<?xml version="1.0" encoding="UTF-8"?>
<add>
  <doc>
    <field name="type">file</field>
    <field name="name">PolicyConfig.h</field>
    <field name="url">PolicyConfig_8h.html</field>
    <field name="keywords">PolicyConfig.h</field>
    <field name="text">Undocumented COM-interface IPolicyConfig Use for setting default audio render endpoint EreTIk</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">PolicyConfig.h</field>
    <field name="url">PolicyConfig_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">DEFINE_GUID IID_IPolicyConfig DEFINE_GUID CLSID_CPolicyConfigClient DECLSPEC_UUID IPolicyConfig DECLSPEC_UUID CPolicyConfigClient IPolicyConfig IUnknown HRESULT GetMixFormat PCWSTR WAVEFORMATEX HRESULT STDMETHODCALLTYPE GetDeviceFormat PCWSTR INT WAVEFORMATEX HRESULT STDMETHODCALLTYPE ResetDeviceFormat PCWSTR HRESULT STDMETHODCALLTYPE SetDeviceFormat PCWSTR WAVEFORMATEX WAVEFORMATEX HRESULT STDMETHODCALLTYPE GetProcessingPeriod PCWSTR INT PINT64 PINT64 HRESULT STDMETHODCALLTYPE SetProcessingPeriod PCWSTR PINT64 HRESULT STDMETHODCALLTYPE GetShareMode PCWSTR DeviceShareMode HRESULT STDMETHODCALLTYPE SetShareMode PCWSTR DeviceShareMode HRESULT STDMETHODCALLTYPE GetPropertyValue PCWSTR PROPERTYKEY PROPVARIANT HRESULT STDMETHODCALLTYPE SetPropertyValue PCWSTR PROPERTYKEY PROPVARIANT HRESULT STDMETHODCALLTYPE SetDefaultEndpoint PCWSTR wszDeviceId ERole eRole HRESULT STDMETHODCALLTYPE SetEndpointVisibility PCWSTR INT</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">audio.cpp</field>
    <field name="url">audio_8cpp.html</field>
    <field name="keywords">audio.cpp</field>
    <field name="text">Definitions for audio capture and encoding audio_ctx_ref_t audio get_audio_ctx_ref audio_ctx_ref_t audio get_audio_ctx_ref if audio get is_audio_ctx_sink_available audio get</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">audio::is_audio_ctx_sink_available</field>
    <field name="args">(const audio_ctx_t &amp;ctx)</field>
    <field name="url">audio_8cpp.html#a7ca978d7523c30309defd31a66d1654c</field>
    <field name="keywords">is_audio_ctx_sink_available audio::is_audio_ctx_sink_available audio</field>
    <field name="text">Check if the audio sink held by audio context is available True if available and can probably be restored false otherwise Useful for delaying the release of audio context shared pointer which tries to restore original sink Examples Check if the audio sink held by audio context is available True if available and can probably be restored false otherwise Useful for delaying the release of audio context shared pointer which tries to restore original sink Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">audio::get_audio_ctx_ref</field>
    <field name="args">()</field>
    <field name="url">audio_8cpp.html#acf6045021b53fd7c6583fe9ac2740fbe</field>
    <field name="keywords">get_audio_ctx_ref audio::get_audio_ctx_ref audio</field>
    <field name="text">Get the reference to the audio context A shared pointer reference to audio context Aside from the configuration purposes it can be used to extend the audio sink lifetime to capture sink earlier and restore it later Examples Get the reference to the audio context A shared pointer reference to audio context Aside from the configuration purposes it can be used to extend the audio sink lifetime to capture sink earlier and restore it later Examples</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h.html</field>
    <field name="keywords">audio.h</field>
    <field name="text">Declarations for audio capture and encoding audio_ctx_ref_t audio get_audio_ctx_ref audio_ctx_ref_t audio get_audio_ctx_ref if audio get is_audio_ctx_sink_available audio get</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">audio::stream_config_e</field>
    <field name="url">audio_8h.html#ac92552a5fdc9c1f75dfca4542c7f3cd9</field>
    <field name="keywords">stream_config_e audio::stream_config_e audio</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">audio::HIGH_STEREO</field>
    <field name="url">audio_8h.html#ac92552a5fdc9c1f75dfca4542c7f3cd9a2c8d41b662fa736c28187960d05f773e</field>
    <field name="keywords">HIGH_STEREO audio::HIGH_STEREO audio HIGH_STEREO audio::HIGH_STEREO audio</field>
    <field name="text">High stereo</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">audio::SURROUND51</field>
    <field name="url">audio_8h.html#ac92552a5fdc9c1f75dfca4542c7f3cd9a76bdfe77a1e4a8ea436c099112beba8f</field>
    <field name="keywords">SURROUND51 audio::SURROUND51 audio SURROUND51 audio::SURROUND51 audio</field>
    <field name="text">Surround 5.1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">audio::STEREO</field>
    <field name="url">audio_8h.html#ac92552a5fdc9c1f75dfca4542c7f3cd9a7890cc01d9ec2540b6330a25365ddbc5</field>
    <field name="keywords">STEREO audio::STEREO audio STEREO audio::STEREO audio</field>
    <field name="text">Stereo</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">audio::HIGH_SURROUND71</field>
    <field name="url">audio_8h.html#ac92552a5fdc9c1f75dfca4542c7f3cd9a8d647db81d57921ec933c5cf6b9fd0cb</field>
    <field name="keywords">HIGH_SURROUND71 audio::HIGH_SURROUND71 audio HIGH_SURROUND71 audio::HIGH_SURROUND71 audio</field>
    <field name="text">High surround 7.1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">audio::HIGH_SURROUND51</field>
    <field name="url">audio_8h.html#ac92552a5fdc9c1f75dfca4542c7f3cd9a98f7c38e4754dc0f21a5ea7a689ba7d4</field>
    <field name="keywords">HIGH_SURROUND51 audio::HIGH_SURROUND51 audio HIGH_SURROUND51 audio::HIGH_SURROUND51 audio</field>
    <field name="text">High surround 5.1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">audio::SURROUND71</field>
    <field name="url">audio_8h.html#ac92552a5fdc9c1f75dfca4542c7f3cd9ad09001a7ffb508cb770ff3907be15c7b</field>
    <field name="keywords">SURROUND71 audio::SURROUND71 audio SURROUND71 audio::SURROUND71 audio</field>
    <field name="text">Surround 7.1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">audio::MAX_STREAM_CONFIG</field>
    <field name="url">audio_8h.html#ac92552a5fdc9c1f75dfca4542c7f3cd9aea5748c50c878b9d1f90504c4d377a3d</field>
    <field name="keywords">MAX_STREAM_CONFIG audio::MAX_STREAM_CONFIG audio MAX_STREAM_CONFIG audio::MAX_STREAM_CONFIG audio</field>
    <field name="text">Maximum audio stream configuration</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">audio</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00015</field>
    <field name="keywords"></field>
    <field name="text">stream_config_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00016</field>
    <field name="keywords"></field>
    <field name="text">STEREO</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00017</field>
    <field name="keywords"></field>
    <field name="text">HIGH_STEREO</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00018</field>
    <field name="keywords"></field>
    <field name="text">SURROUND51</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00019</field>
    <field name="keywords"></field>
    <field name="text">HIGH_SURROUND51</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00020</field>
    <field name="keywords"></field>
    <field name="text">SURROUND71</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00021</field>
    <field name="keywords"></field>
    <field name="text">HIGH_SURROUND71</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00022</field>
    <field name="keywords"></field>
    <field name="text">MAX_STREAM_CONFIG</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00025</field>
    <field name="keywords"></field>
    <field name="text">opus_stream_config_t std::int32_t sampleRate channelCount streams coupledStreams std::uint8_t mapping bitrate</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00034</field>
    <field name="keywords"></field>
    <field name="text">stream_params_t channelCount streams coupledStreams std::uint8_t mapping opus_stream_config_t stream_configs MAX_STREAM_CONFIG</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00043</field>
    <field name="keywords"></field>
    <field name="text">config_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00044</field>
    <field name="keywords"></field>
    <field name="text">flags_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00045</field>
    <field name="keywords"></field>
    <field name="text">HIGH_QUALITY</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00046</field>
    <field name="keywords"></field>
    <field name="text">HOST_AUDIO</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00047</field>
    <field name="keywords"></field>
    <field name="text">CUSTOM_SURROUND_PARAMS</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00048</field>
    <field name="keywords"></field>
    <field name="text">MAX_FLAGS packetDuration channels mask stream_params_t customStreamParams std::bitset&lt;MAX_FLAGS&gt; flags</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">audio.h</field>
    <field name="url">audio_8h_source.html#l00060</field>
    <field name="keywords"></field>
    <field name="text">audio_ctx_t std::unique_ptr&lt;std::atomic_bool&gt; sink_flag std::unique_ptr&lt;platf::audio_control_t&gt; control restore_sink platf::sink_t sink buffer_t util::buffer_t&lt;std::uint8_t&gt; packet_t std::pair&lt;void *, buffer_t&gt; audio_ctx_ref_t safe::shared_t&lt;audio_ctx_t&gt;::ptr_t capture safe::mail_t mail config_t config channel_data audio_ctx_ref_t get_audio_ctx_ref is_audio_ctx_sink_available audio_ctx_t ctx</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">av_audio.h</field>
    <field name="url">av__audio_8h.html</field>
    <field name="keywords">av_audio.h</field>
    <field name="text">Declarations for audio capture on macOS</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">av_audio.h</field>
    <field name="url">av__audio_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">av_audio.h</field>
    <field name="url">av__audio_8h_source.html#l00015</field>
    <field name="keywords"></field>
    <field name="text">AVAudio NSObject AVCaptureAudioDataOutputSampleBufferDelegate TPCircularBuffer audioSampleBuffer nonatomic assign AVCaptureSession audioCaptureSession nonatomic assign AVCaptureConnection audioConnection nonatomic assign NSCondition samplesArrivedSignal NSArray microphoneNames AVCaptureDevice findMicrophone NSString int setupMicrophone AVCaptureDevice UInt32 UInt32 UInt8</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">av_audio.m</field>
    <field name="url">av__audio_8m.html</field>
    <field name="keywords">av_audio.m</field>
    <field name="text">Definitions for audio capture on macOS</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">av_img_t.h</field>
    <field name="url">av__img__t_8h.html</field>
    <field name="keywords">av_img_t.h</field>
    <field name="text">Declarations for AV image types on macOS</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">av_img_t.h</field>
    <field name="url">av__img__t_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">platf</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">av_img_t.h</field>
    <field name="url">av__img__t_8h_source.html#l00015</field>
    <field name="keywords"></field>
    <field name="text">av_sample_buf_t CMSampleBufferRef buf av_sample_buf_t CMSampleBufferRef buf buf CMSampleBufferRef CFRetain buf buf CFRelease buf</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">av_img_t.h</field>
    <field name="url">av__img__t_8h_source.html#l00029</field>
    <field name="keywords"></field>
    <field name="text">av_pixel_buf_t CVPixelBufferRef buf av_pixel_buf_t CMSampleBufferRef sb buf CMSampleBufferGetImageBuffer sb CVPixelBufferLockBaseAddress buf kCVPixelBufferLock_ReadOnly nodiscard uint8_t data uint8_t CVPixelBufferGetBaseAddress buf buf CVPixelBufferUnlockBaseAddress buf kCVPixelBufferLock_ReadOnly</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">av_img_t.h</field>
    <field name="url">av__img__t_8h_source.html#l00052</field>
    <field name="keywords"></field>
    <field name="text">av_img_t img_t std::shared_ptr&lt;av_sample_buf_t&gt; sample_buffer std::shared_ptr&lt;av_pixel_buf_t&gt; pixel_buffer</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">av_img_t.h</field>
    <field name="url">av__img__t_8h_source.html#l00057</field>
    <field name="keywords"></field>
    <field name="text">temp_retain_av_img_t std::shared_ptr&lt;av_sample_buf_t&gt; sample_buffer std::shared_ptr&lt;av_pixel_buf_t&gt; pixel_buffer uint8_t data temp_retain_av_img_t std::shared_ptr&lt;av_sample_buf_t&gt; sb std::shared_ptr&lt;av_pixel_buf_t&gt; pb uint8_t dt sample_buffer std::move sb pixel_buffer std::move pb data dt</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">av_video.h</field>
    <field name="url">av__video_8h.html</field>
    <field name="keywords">av_video.h</field>
    <field name="text">Declarations for video capture on macOS</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">av_video.h</field>
    <field name="url">av__video_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">av_video.h</field>
    <field name="url">av__video_8h_source.html#l00011</field>
    <field name="keywords"></field>
    <field name="text">CaptureSession AVCaptureVideoDataOutput output NSCondition captureStopped</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">av_video.h</field>
    <field name="url">av__video_8h_source.html#l00016</field>
    <field name="keywords"></field>
    <field name="text">AVVideo NSObject AVCaptureVideoDataOutputSampleBufferDelegate nonatomic assign CGDirectDisplayID displayID nonatomic assign CMTime minFrameDuration nonatomic assign OSType pixelFormat nonatomic assign frameWidth nonatomic assign frameHeight bool FrameCallbackBlock CMSampleBufferRef nonatomic assign AVCaptureSession session nonatomic assign NSMapTable&lt;AVCaptureConnection *, AVCaptureVideoDataOutput *&gt; videoOutputs nonatomic assign NSMapTable&lt;AVCaptureConnection *, FrameCallbackBlock&gt; captureCallbacks nonatomic assign NSMapTable&lt;AVCaptureConnection *, dispatch_semaphore_t&gt; captureSignals NSArray&lt;NSDictionary *&gt; displayNames NSString getDisplayName CGDirectDisplayID displayID id initWithDisplay CGDirectDisplayID displayID frameRate int frameRate void setFrameWidth int frameWidth frameHeight int frameHeight dispatch_semaphore_t capture FrameCallbackBlock frameCallback</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">av_video.m</field>
    <field name="url">av__video_8m.html</field>
    <field name="keywords">av_video.m</field>
    <field name="text">Definitions for video capture on macOS</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">cbs.cpp</field>
    <field name="url">cbs_8cpp.html</field>
    <field name="keywords">cbs.cpp</field>
    <field name="text">Definitions for FFmpeg Coded Bitstream API</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">cbs::validate_sps</field>
    <field name="args">(const AVPacket *packet, int codec_id)</field>
    <field name="url">cbs_8cpp.html#a4982caca63442cb3e81cd22b713c2069</field>
    <field name="keywords">validate_sps cbs::validate_sps cbs</field>
    <field name="text">Validates the Sequence Parameter Set SPS of a given packet This function initializes a Coded Bitstream Context and reads the packet into a Coded Bitstream Fragment It then checks if the SPS- VUI Video Usability Information is present in the active SPS of the packet This is done for both H264 and H265 codecs packet The packet to validate codec_id The ID of the codec used either AV_CODEC_ID_H264 or AV_CODEC_ID_H265 True if the SPS- VUI is present in the active SPS of the packet false otherwise Validates the Sequence Parameter Set SPS of a given packet This function initializes a Coded Bitstream Context and reads the packet into a Coded Bitstream Fragment It then checks if the SPS- VUI Video Usability Information is present in the active SPS of the packet This is done for both H264 and H265 codecs packet The packet to validate codec_id The ID of the codec used either AV_CODEC_ID_H264 or AV_CODEC_ID_H265 True if the SPS- VUI is present in the active SPS of the packet false otherwise</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">cbs.h</field>
    <field name="url">cbs_8h.html</field>
    <field name="keywords">cbs.h</field>
    <field name="text">Declarations for FFmpeg Coded Bitstream API</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">cbs.h</field>
    <field name="url">cbs_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">AVPacket AVCodecContext cbs</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">cbs.h</field>
    <field name="url">cbs_8h_source.html#l00015</field>
    <field name="keywords"></field>
    <field name="text">nal_t util::buffer_t&lt;std::uint8_t&gt; _new util::buffer_t&lt;std::uint8_t&gt; old</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">cbs.h</field>
    <field name="url">cbs_8h_source.html#l00020</field>
    <field name="keywords"></field>
    <field name="text">hevc_t nal_t vps nal_t sps</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">cbs.h</field>
    <field name="url">cbs_8h_source.html#l00025</field>
    <field name="keywords"></field>
    <field name="text">h264_t nal_t sps hevc_t make_sps_hevc AVCodecContext ctx AVPacket packet h264_t make_sps_h264 AVCodecContext ctx AVPacket packet validate_sps AVPacket packet codec_id</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">boost::v1::basic_environment</field>
    <field name="url">classboost_1_1v1_1_1basic__environment.html</field>
    <field name="keywords">basic_environment basic_environment&lt; char &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">cbs::frag_t</field>
    <field name="url">classcbs_1_1frag__t.html</field>
    <field name="keywords">frag_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">crypto::cert_chain_t</field>
    <field name="url">classcrypto_1_1cert__chain__t.html</field>
    <field name="keywords">cert_chain_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">crypto::cert_chain_t::verify</field>
    <field name="args">(x509_t::element_type *cert)</field>
    <field name="url">classcrypto_1_1cert__chain__t.html#a7d26ba275fd650d019a9544f5d676434</field>
    <field name="keywords">verify crypto::cert_chain_t::verify crypto::cert_chain_t</field>
    <field name="text">Verify the certificate chain When certificates from two or more instances of Moonlight have been added to x509_store_t only one of them will be verified by X509_verify_cert resulting in only a single instance of Moonlight to be able to use Sunshine To circumvent this x509_store_t instance will be created for each instance of the certificates cert The certificate to verify nullptr if the certificate is valid otherwise an error string</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">crypto::cipher::cbc_t</field>
    <field name="url">classcrypto_1_1cipher_1_1cbc__t.html</field>
    <field name="keywords">cbc_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">crypto::cipher::cbc_t::encrypt</field>
    <field name="args">(const std::string_view &amp;plaintext, std::uint8_t *cipher, aes_t *iv)</field>
    <field name="url">classcrypto_1_1cipher_1_1cbc__t.html#a0366f44853d4228d82822d25f8297be3</field>
    <field name="keywords">encrypt crypto::cipher::cbc_t::encrypt crypto::cipher::cbc_t</field>
    <field name="text">Encrypts the plaintext using AES CBC mode length of cipher must be at least round_to_pkcs7_padded plaintext.size() plaintext The plaintext data to be encrypted cipher The buffer where the resulting ciphertext will be written iv The initialization vector to be used for the encryption The total length of the ciphertext written into cipher Returns 1 in case of an error This function encrypts the given plaintext using the AES key in CBC mode The initialization vector IV is also provided The function handles the creation and initialization of the encryption context and manages the encryption process The resulting ciphertext is written into the cipher buffer</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">crypto::cipher::cipher_t</field>
    <field name="url">classcrypto_1_1cipher_1_1cipher__t.html</field>
    <field name="keywords">cipher_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">crypto::cipher::ecb_t</field>
    <field name="url">classcrypto_1_1cipher_1_1ecb__t.html</field>
    <field name="keywords">ecb_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">crypto::cipher::gcm_t</field>
    <field name="url">classcrypto_1_1cipher_1_1gcm__t.html</field>
    <field name="keywords">gcm_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">crypto::cipher::gcm_t::encrypt</field>
    <field name="args">(const std::string_view &amp;plaintext, std::uint8_t *tagged_cipher, aes_t *iv)</field>
    <field name="url">classcrypto_1_1cipher_1_1gcm__t.html#a58e22faf9e81d658e83cd22aec055745</field>
    <field name="keywords">encrypt crypto::cipher::gcm_t::encrypt crypto::cipher::gcm_t</field>
    <field name="text">Encrypts the plaintext using AES GCM mode length of cipher must be at least round_to_pkcs7_padded plaintext.size() crypto::cipher::tag_size plaintext The plaintext data to be encrypted tagged_cipher The buffer where the resulting ciphertext and GCM tag will be written iv The initialization vector to be used for the encryption The total length of the ciphertext and GCM tag written into tagged_cipher Returns 1 in case of an error</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">crypto::cipher::gcm_t::encrypt</field>
    <field name="args">(const std::string_view &amp;plaintext, std::uint8_t *tag, std::uint8_t *ciphertext, aes_t *iv)</field>
    <field name="url">classcrypto_1_1cipher_1_1gcm__t.html#a595f79509ff80b4db67db826d219d732</field>
    <field name="keywords">encrypt crypto::cipher::gcm_t::encrypt crypto::cipher::gcm_t</field>
    <field name="text">Encrypts the plaintext using AES GCM mode plaintext The plaintext data to be encrypted tag The buffer where the GCM tag will be written ciphertext The buffer where the resulting ciphertext will be written iv The initialization vector to be used for the encryption The total length of the ciphertext and GCM tag Returns 1 in case of an error This function encrypts the given plaintext using the AES key in GCM mode The initialization vector IV is also provided The function handles the creation and initialization of the encryption context and manages the encryption process The resulting ciphertext and the GCM tag are written into the tagged_cipher buffer</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">cuda::cuda_ram_t</field>
    <field name="url">classcuda_1_1cuda__ram__t.html</field>
    <field name="keywords">cuda_ram_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">cuda::cuda_ram_t::set_frame</field>
    <field name="args">(AVFrame *frame, AVBufferRef *hw_frames_ctx)</field>
    <field name="url">classcuda_1_1cuda__ram__t.html#a31237783c7192631d1ab57417235f64f</field>
    <field name="keywords">set_frame cuda::cuda_ram_t::set_frame cuda::cuda_ram_t</field>
    <field name="text">Set the frame to be encoded Implementations must take ownership of frame</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">cuda::cuda_t</field>
    <field name="url">classcuda_1_1cuda__t.html</field>
    <field name="keywords">cuda_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">cuda::cuda_t::set_frame</field>
    <field name="args">(AVFrame *frame, AVBufferRef *hw_frames_ctx) override</field>
    <field name="url">classcuda_1_1cuda__t.html#acdda716a5e76a138e2c6b52e290d0872</field>
    <field name="keywords">set_frame cuda::cuda_t::set_frame cuda::cuda_t</field>
    <field name="text">Set the frame to be encoded Set the frame to be encoded Implementations must take ownership of frame Set the frame to be encoded</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">cuda::cuda_vram_t</field>
    <field name="url">classcuda_1_1cuda__vram__t.html</field>
    <field name="keywords">cuda_vram_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">cuda::gl_cuda_vram_t</field>
    <field name="url">classcuda_1_1gl__cuda__vram__t.html</field>
    <field name="keywords">gl_cuda_vram_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">cuda::gl_cuda_vram_t::init</field>
    <field name="args">(int in_width, int in_height, int offset_x, int offset_y)</field>
    <field name="url">classcuda_1_1gl__cuda__vram__t.html#a9a65f54787b1685c3c624fe3372bc9a0</field>
    <field name="keywords">init cuda::gl_cuda_vram_t::init cuda::gl_cuda_vram_t</field>
    <field name="text">Initialize the GL- CUDA encoding device in_width Width of captured frames in_height Height of captured frames offset_x Offset of content in captured frame offset_y Offset of content in captured frame 0 on success or 1 on failure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">cuda::gl_cuda_vram_t::convert</field>
    <field name="args">(platf::img_t &amp;img) override</field>
    <field name="url">classcuda_1_1gl__cuda__vram__t.html#acc3e54f5fd9a790bb5448b0aa32b6d8a</field>
    <field name="keywords">convert cuda::gl_cuda_vram_t::convert cuda::gl_cuda_vram_t</field>
    <field name="text">Convert the captured image into the target CUDA frame img Captured screen image 0 on success or 1 on failure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">cuda::gl_cuda_vram_t::apply_colorspace</field>
    <field name="args">() override</field>
    <field name="url">classcuda_1_1gl__cuda__vram__t.html#ad36e33af3f1ca3f93518aab9f9049a35</field>
    <field name="keywords">apply_colorspace cuda::gl_cuda_vram_t::apply_colorspace cuda::gl_cuda_vram_t</field>
    <field name="text">Configures shader parameters for the specified colorspace</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">cuda::gl_cuda_vram_t::set_frame</field>
    <field name="args">(AVFrame *frame, AVBufferRef *hw_frames_ctx_buf) override</field>
    <field name="url">classcuda_1_1gl__cuda__vram__t.html#afc097b95a1f41818297d3eb9bf5976ae</field>
    <field name="keywords">set_frame cuda::gl_cuda_vram_t::set_frame cuda::gl_cuda_vram_t</field>
    <field name="text">Initialize color conversion into target CUDA frame frame Destination CUDA frame to write into hw_frames_ctx_buf FFmpeg hardware frame context 0 on success or 1 on failure</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">cuda::img_t</field>
    <field name="url">classcuda_1_1img__t.html</field>
    <field name="keywords">img_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">cuda::nvfbc::ctx_t</field>
    <field name="url">classcuda_1_1nvfbc_1_1ctx__t.html</field>
    <field name="keywords">ctx_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">cuda::nvfbc::display_t</field>
    <field name="url">classcuda_1_1nvfbc_1_1display__t.html</field>
    <field name="keywords">display_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">cuda::nvfbc::display_t::capture</field>
    <field name="args">(const push_captured_image_cb_t &amp;push_captured_image_cb, const pull_free_image_cb_t &amp;pull_free_image_cb, bool *cursor) override</field>
    <field name="url">classcuda_1_1nvfbc_1_1display__t.html#a550560b3fa8ed6a4b61d8f3cd6426448</field>
    <field name="keywords">capture cuda::nvfbc::display_t::capture cuda::nvfbc::display_t</field>
    <field name="text">Capture a frame push_captured_image_cb The callback that is called with captured image must be called from the same thread as capture() pull_free_image_cb Capture backends call this callback to get empty image from the pool If backend uses multiple threads calls to this callback must be synchronized Calls to this callback and push_captured_image_cb must be synchronized as well cursor A pointer to the flag that indicates whether the cursor should be captured as well capture_e::ok When stopping capture_e::error On error capture_e::reinit When need of reinitialization</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">cuda::nvfbc::handle_t</field>
    <field name="url">classcuda_1_1nvfbc_1_1handle__t.html</field>
    <field name="keywords">handle_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">egl::cursor_t</field>
    <field name="url">classegl_1_1cursor__t.html</field>
    <field name="keywords">cursor_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">egl::img_descriptor_t</field>
    <field name="url">classegl_1_1img__descriptor__t.html</field>
    <field name="keywords">img_descriptor_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">egl::sws_t</field>
    <field name="url">classegl_1_1sws__t.html</field>
    <field name="keywords">sws_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">gl::buffer_t</field>
    <field name="url">classgl_1_1buffer__t.html</field>
    <field name="keywords">buffer_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">gl::frame_buf_t</field>
    <field name="url">classgl_1_1frame__buf__t.html</field>
    <field name="keywords">frame_buf_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">gl::frame_buf_t::copy</field>
    <field name="args">(int id, int texture, int offset_x, int offset_y, int width, int height)</field>
    <field name="url">classgl_1_1frame__buf__t.html#aff210f8c2b3e622941632054e71edaa2</field>
    <field name="keywords">copy gl::frame_buf_t::copy gl::frame_buf_t</field>
    <field name="text">Copies a part of the framebuffer to texture</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">gl::program_t</field>
    <field name="url">classgl_1_1program__t.html</field>
    <field name="keywords">program_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">gl::shader_t</field>
    <field name="url">classgl_1_1shader__t.html</field>
    <field name="keywords">shader_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">gl::tex_t</field>
    <field name="url">classgl_1_1tex__t.html</field>
    <field name="keywords">tex_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">input::deinit_t</field>
    <field name="url">classinput_1_1deinit__t.html</field>
    <field name="keywords">deinit_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">logging::deinit_t</field>
    <field name="url">classlogging_1_1deinit__t.html</field>
    <field name="keywords">deinit_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">logging::deinit_t::~deinit_t</field>
    <field name="args">()</field>
    <field name="url">classlogging_1_1deinit__t.html#aa18017a64b183e5beb6fc9cd77a697a6</field>
    <field name="keywords">logging::deinit_t::~deinit_t logging::deinit_t</field>
    <field name="text">A destructor that restores the initial state</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">logging::min_max_avg_periodic_logger</field>
    <field name="url">classlogging_1_1min__max__avg__periodic__logger.html</field>
    <field name="keywords">min_max_avg_periodic_logger min_max_avg_periodic_logger&lt; double &gt;</field>
    <field name="text">A helper class for tracking and logging numerical values across a period of time Examples min_max_avg_periodic_logger&lt;int&gt; logger debug s logger collect_and_log logger collect_and_log logger collect_and_log</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">logging::time_delta_periodic_logger</field>
    <field name="url">classlogging_1_1time__delta__periodic__logger.html</field>
    <field name="keywords">time_delta_periodic_logger</field>
    <field name="text">A helper class for tracking and logging short time intervals across a period of time Examples time_delta_periodic_logger logger debug s logger first_point_now logger second_point_now_and_log logger first_point_now logger second_point_now_and_log</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">move_by_copy_util::MoveByCopy</field>
    <field name="url">classmove__by__copy__util_1_1MoveByCopy.html</field>
    <field name="keywords">MoveByCopy</field>
    <field name="text">When a copy is made it moves the object This allows you to move an object when a move can t be done</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">nvenc::nvenc_base</field>
    <field name="url">classnvenc_1_1nvenc__base.html</field>
    <field name="keywords">nvenc_base</field>
    <field name="text">Abstract platform-agnostic base of standalone NVENC encoder Derived classes perform platform-specific operations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_base::invalidate_ref_frames</field>
    <field name="args">(uint64_t first_frame, uint64_t last_frame)</field>
    <field name="url">classnvenc_1_1nvenc__base.html#a1522dd102caee6c0cdaaf9b2ad474630</field>
    <field name="keywords">invalidate_ref_frames nvenc::nvenc_base::invalidate_ref_frames nvenc::nvenc_base</field>
    <field name="text">Perform reference frame invalidation RFI procedure first_frame First frame index of the invalidation range last_frame Last frame index of the invalidation range true on success false on error After error next frame must be encoded with force_idr true Perform reference frame invalidation RFI procedure Perform reference frame invalidation RFI procedure Perform reference frame invalidation RFI procedure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_base::encode_frame</field>
    <field name="args">(uint64_t frame_index, bool force_idr)</field>
    <field name="url">classnvenc_1_1nvenc__base.html#a1ceecd60a058513e04a252ed948a49b7</field>
    <field name="keywords">encode_frame nvenc::nvenc_base::encode_frame nvenc::nvenc_base</field>
    <field name="text">Encode the next frame using platform-specific input surface frame_index Frame index that uniquely identifies the frame Afterwards serves as parameter for invalidate_ref_frames() No restrictions on the first frame index but later frame indexes must be subsequent force_idr Whether to encode frame as forced IDR Encoded frame Encode the next frame using platform-specific input surface Encode the next frame using platform-specific input surface Encode the next frame using platform-specific input surface</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">nvenc::nvenc_base::registered_input_buffer</field>
    <field name="url">classnvenc_1_1nvenc__base.html#a27182b8a6462b5f6d0f19d05e9f25c69</field>
    <field name="keywords">registered_input_buffer nvenc::nvenc_base::registered_input_buffer nvenc::nvenc_base</field>
    <field name="text">Platform-specific input surface registered with NvEncRegisterResource() Should be set in create_and_register_input_buffer()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_base::create_encoder</field>
    <field name="args">(const nvenc_config &amp;config, const video::config_t &amp;client_config, const nvenc_colorspace_t &amp;colorspace, NV_ENC_BUFFER_FORMAT buffer_format)</field>
    <field name="url">classnvenc_1_1nvenc__base.html#a45027a5ae0f12d7c8af3f2eefb1f1745</field>
    <field name="keywords">create_encoder nvenc::nvenc_base::create_encoder nvenc::nvenc_base</field>
    <field name="text">Create the encoder config NVENC encoder configuration client_config Stream configuration requested by the client colorspace YUV colorspace buffer_format Platform-agnostic input surface format true on success false on error Create the encoder Create the encoder Create the encoder</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_base::create_and_register_input_buffer</field>
    <field name="args">()=0</field>
    <field name="url">classnvenc_1_1nvenc__base.html#a48b0c03afe90d6884f76df1981f6151e</field>
    <field name="keywords">create_and_register_input_buffer nvenc::nvenc_base::create_and_register_input_buffer nvenc::nvenc_base</field>
    <field name="text">Required Used for creating outside-facing input surface registering this surface with nvenc- nvEncRegisterResource() and setting registered_input_buffer variable Called during create_encoder() true on success false on error Required Used for creating outside-facing input surface registering this surface with nvenc- nvEncRegisterResource() and setting registered_input_buffer variable Called during create_encoder()</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">nvenc::nvenc_base::nvenc</field>
    <field name="url">classnvenc_1_1nvenc__base.html#a604d8c5234292ff086c1c9aceba413a1</field>
    <field name="keywords">nvenc nvenc::nvenc_base::nvenc nvenc::nvenc_base</field>
    <field name="text">Function pointers list produced by NvEncodeAPICreateInstance() Should be set in init_library()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_base::min_struct_version</field>
    <field name="args">(uint32_t version, uint32_t v11_struct_version=0, uint32_t v12_struct_version=0)</field>
    <field name="url">classnvenc_1_1nvenc__base.html#a7048f6ef632257d53af9c58e1d106a86</field>
    <field name="keywords">min_struct_version nvenc::nvenc_base::min_struct_version nvenc::nvenc_base</field>
    <field name="text">This function returns the corresponding struct version for the minimum API required by the codec Reducing the struct versions maximizes driver compatibility by avoiding needless API breaks version The raw structure version from NVENCAPI_STRUCT_VERSION() v11_struct_version Optionally specifies the struct version to use with v11 SDK major versions v12_struct_version Optionally specifies the struct version to use with v12 SDK major versions A suitable struct version for the active codec This function returns the corresponding struct version for the minimum API required by the codec This function returns the corresponding struct version for the minimum API required by the codec This function returns the corresponding struct version for the minimum API required by the codec</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_base::wait_for_async_event</field>
    <field name="args">(uint32_t timeout_ms)</field>
    <field name="url">classnvenc_1_1nvenc__base.html#a8b000cf26f722736f8978d6f001de033</field>
    <field name="keywords">wait_for_async_event nvenc::nvenc_base::wait_for_async_event nvenc::nvenc_base</field>
    <field name="text">Optional Override if you want to create encoder in async mode In this case must also set async_event_handle variable timeout_ms Wait timeout in milliseconds true on success false on timeout or error</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">nvenc::nvenc_base::async_event_handle</field>
    <field name="url">classnvenc_1_1nvenc__base.html#a8eb53f1464946a433db535b62b9ab0ba</field>
    <field name="keywords">async_event_handle nvenc::nvenc_base::async_event_handle nvenc::nvenc_base</field>
    <field name="text">optional Platform-specific handle of event object event Can be set in constructor or init_library() must override wait_for_async_event()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_base::destroy_encoder</field>
    <field name="args">()</field>
    <field name="url">classnvenc_1_1nvenc__base.html#a9cfe50fbbd4e52a189003ab0ece8a54e</field>
    <field name="keywords">destroy_encoder nvenc::nvenc_base::destroy_encoder nvenc::nvenc_base</field>
    <field name="text">Destroy the encoder Derived classes classes call it in the destructor Destroy the encoder Derived classes classes call it in the destructor Destroy the encoder Derived classes classes call it in the destructor Destroy the encoder Derived classes classes call it in the destructor</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">nvenc::nvenc_base::device</field>
    <field name="url">classnvenc_1_1nvenc__base.html#aafb3a73b1c5514af7da30f4a97fa7972</field>
    <field name="keywords">device nvenc::nvenc_base::device nvenc::nvenc_base</field>
    <field name="text">Platform-specific handle of encoding device Should be set in constructor or init_library()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_base::init_library</field>
    <field name="args">()=0</field>
    <field name="url">classnvenc_1_1nvenc__base.html#ac748ce2fdd3abbad51002faeb25f1e92</field>
    <field name="keywords">init_library nvenc::nvenc_base::init_library nvenc::nvenc_base</field>
    <field name="text">Required Used for loading NvEnc library and setting nvenc variable with NvEncodeAPICreateInstance() Called during create_encoder() if nvenc variable is not initialized true on success false on error</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_base::nvenc_base</field>
    <field name="args">(NV_ENC_DEVICE_TYPE device_type)</field>
    <field name="url">classnvenc_1_1nvenc__base.html#adb79d6313c371274c0798cd3eb2cfb3d</field>
    <field name="keywords">nvenc_base nvenc::nvenc_base::nvenc_base nvenc::nvenc_base</field>
    <field name="text">device_type Underlying device type used by derived class</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_base::synchronize_input_buffer</field>
    <field name="args">()</field>
    <field name="url">classnvenc_1_1nvenc__base.html#ae903171a17b9687c607c87469708cdb7</field>
    <field name="keywords">synchronize_input_buffer nvenc::nvenc_base::synchronize_input_buffer nvenc::nvenc_base</field>
    <field name="text">Optional Override if you must perform additional operations on the registered input surface in the beginning of encode_frame() Typically used for interop copy true on success false on error Optional Override if you must perform additional operations on the registered input surface in the beginning of encode_frame() Typically used for interop copy Optional Override if you must perform additional operations on the registered input surface in the beginning of encode_frame() Typically used for interop copy</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">nvenc::nvenc_d3d11</field>
    <field name="url">classnvenc_1_1nvenc__d3d11.html</field>
    <field name="keywords">nvenc_d3d11</field>
    <field name="text">Abstract Direct3D11 NVENC encoder Encapsulates common code used by native and interop implementations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_d3d11::wait_for_async_event</field>
    <field name="args">(uint32_t timeout_ms) override</field>
    <field name="url">classnvenc_1_1nvenc__d3d11.html#a11dbf73b30039af000f93c722e308c75</field>
    <field name="keywords">wait_for_async_event nvenc::nvenc_d3d11::wait_for_async_event nvenc::nvenc_d3d11</field>
    <field name="text">Optional Override if you want to create encoder in async mode In this case must also set async_event_handle variable timeout_ms Wait timeout in milliseconds true on success false on timeout or error Optional Override if you want to create encoder in async mode In this case must also set async_event_handle variable Optional Override if you want to create encoder in async mode In this case must also set async_event_handle variable</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_d3d11::init_library</field>
    <field name="args">() override</field>
    <field name="url">classnvenc_1_1nvenc__d3d11.html#a3873f47493c27e870fcab901642208cb</field>
    <field name="keywords">init_library nvenc::nvenc_d3d11::init_library nvenc::nvenc_d3d11</field>
    <field name="text">Required Used for loading NvEnc library and setting nvenc variable with NvEncodeAPICreateInstance() Called during create_encoder() if nvenc variable is not initialized true on success false on error Required Used for loading NvEnc library and setting nvenc variable with NvEncodeAPICreateInstance() Called during create_encoder() if nvenc variable is not initialized</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_d3d11::get_input_texture</field>
    <field name="args">()=0</field>
    <field name="url">classnvenc_1_1nvenc__d3d11.html#a817b3683848ec89f7c4ac9ce221a49f8</field>
    <field name="keywords">get_input_texture nvenc::nvenc_d3d11::get_input_texture nvenc::nvenc_d3d11</field>
    <field name="text">Get input surface texture Input surface texture</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">nvenc::nvenc_d3d11_native</field>
    <field name="url">classnvenc_1_1nvenc__d3d11__native.html</field>
    <field name="keywords">nvenc_d3d11_native</field>
    <field name="text">Native Direct3D11 NVENC encoder</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_d3d11_native::get_input_texture</field>
    <field name="args">() override</field>
    <field name="url">classnvenc_1_1nvenc__d3d11__native.html#a17d3c6e9790da663e3c2a0afeb388f1c</field>
    <field name="keywords">get_input_texture nvenc::nvenc_d3d11_native::get_input_texture nvenc::nvenc_d3d11_native</field>
    <field name="text">Get input surface texture Input surface texture</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_d3d11_native::nvenc_d3d11_native</field>
    <field name="args">(ID3D11Device *d3d_device)</field>
    <field name="url">classnvenc_1_1nvenc__d3d11__native.html#a33ea12366c5fc6439878acb76ce23aa8</field>
    <field name="keywords">nvenc_d3d11_native nvenc::nvenc_d3d11_native::nvenc_d3d11_native nvenc::nvenc_d3d11_native</field>
    <field name="text">d3d_device Direct3D11 device used for encoding</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">nvenc::nvenc_d3d11_on_cuda</field>
    <field name="url">classnvenc_1_1nvenc__d3d11__on__cuda.html</field>
    <field name="keywords">nvenc_d3d11_on_cuda</field>
    <field name="text">Interop Direct3D11 on CUDA NVENC encoder Input surface is Direct3D11 encoding is performed by CUDA</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_d3d11_on_cuda::get_input_texture</field>
    <field name="args">() override</field>
    <field name="url">classnvenc_1_1nvenc__d3d11__on__cuda.html#a2d4f5c3d6b30b73c0ed9df9b7acc2570</field>
    <field name="keywords">get_input_texture nvenc::nvenc_d3d11_on_cuda::get_input_texture nvenc::nvenc_d3d11_on_cuda</field>
    <field name="text">Get input surface texture Input surface texture</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvenc::nvenc_d3d11_on_cuda::nvenc_d3d11_on_cuda</field>
    <field name="args">(ID3D11Device *d3d_device)</field>
    <field name="url">classnvenc_1_1nvenc__d3d11__on__cuda.html#aab55a794691e5942f12fc10241827bd2</field>
    <field name="keywords">nvenc_d3d11_on_cuda nvenc::nvenc_d3d11_on_cuda::nvenc_d3d11_on_cuda nvenc::nvenc_d3d11_on_cuda</field>
    <field name="text">d3d_device Direct3D11 device that will create input surface texture CUDA encoding device will be derived from it</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">nvhttp::SunshineHTTPS</field>
    <field name="url">classnvhttp_1_1SunshineHTTPS.html</field>
    <field name="keywords">SunshineHTTPS</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">nvhttp::SunshineHTTPSServer</field>
    <field name="url">classnvhttp_1_1SunshineHTTPSServer.html</field>
    <field name="keywords">SunshineHTTPSServer</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">nvprefs::driver_settings_t</field>
    <field name="url">classnvprefs_1_1driver__settings__t.html</field>
    <field name="keywords">driver_settings_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">nvprefs::nvprefs_interface</field>
    <field name="url">classnvprefs_1_1nvprefs__interface.html</field>
    <field name="keywords">nvprefs_interface</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">nvprefs::undo_data_t</field>
    <field name="url">classnvprefs_1_1undo__data__t.html</field>
    <field name="keywords">undo_data_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">nvprefs::undo_file_t</field>
    <field name="url">classnvprefs_1_1undo__file__t.html</field>
    <field name="keywords">undo_file_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::audio::audio_control_t</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html</field>
    <field name="keywords">audio_control_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::audio::audio_control_t::find_device_id</field>
    <field name="args">(const match_fields_list_t &amp;match_list)</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html#a1cdc40e251bd66e1b875f82d1360f6cd</field>
    <field name="keywords">find_device_id platf::audio::audio_control_t::find_device_id platf::audio::audio_control_t</field>
    <field name="text">Search for currently present audio device_id using multiple match fields match_list Pairs of match fields and values Optional pair of matched field and device_id</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::audio::audio_control_t::extract_virtual_sink_info</field>
    <field name="args">(const std::string &amp;sink)</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html#a31d3c62a41e1dfebcb3dc0ccc2b3b22b</field>
    <field name="keywords">extract_virtual_sink_info platf::audio::audio_control_t::extract_virtual_sink_info platf::audio::audio_control_t</field>
    <field name="text">Extract virtual audio sink information possibly encoded in the sink name sink The sink name A pair of device_id and format reference if the sink name matches our naming scheme for virtual audio sinks std::nullopt otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::audio::audio_control_t::install_steam_audio_drivers</field>
    <field name="args">()</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html#a3d0a1ebf91e06eb3516ececee4bdffa3</field>
    <field name="keywords">install_steam_audio_drivers platf::audio::audio_control_t::install_steam_audio_drivers platf::audio::audio_control_t</field>
    <field name="text">Installs the Steam Streaming Speakers driver if present true if installation was successful</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::audio::audio_control_t::reset_default_device</field>
    <field name="args">()</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html#a3e0ff3382453142af56ba8744ac4798b</field>
    <field name="keywords">reset_default_device platf::audio::audio_control_t::reset_default_device platf::audio::audio_control_t</field>
    <field name="text">Resets the default audio device from Steam Streaming Speakers</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::audio::audio_control_t::match_field_e</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html#a47f2f015d1a2255af4a26a2f0b3b6e16</field>
    <field name="keywords">match_field_e platf::audio::audio_control_t::match_field_e platf::audio::audio_control_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::audio::audio_control_t::match_field_e::device_friendly_name</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html#a47f2f015d1a2255af4a26a2f0b3b6e16a69238b9fe09a16b62853b2aa39fb63bf</field>
    <field name="keywords">device_friendly_name platf::audio::audio_control_t::match_field_e::device_friendly_name platf::audio::audio_control_t device_friendly_name platf::audio::audio_control_t::match_field_e::device_friendly_name platf::audio::audio_control_t</field>
    <field name="text">Match endpoint friendly name</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::audio::audio_control_t::match_field_e::device_id</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html#a47f2f015d1a2255af4a26a2f0b3b6e16a9379346c996b0535a7a98f25887156a2</field>
    <field name="keywords">device_id platf::audio::audio_control_t::match_field_e::device_id platf::audio::audio_control_t device_id platf::audio::audio_control_t::match_field_e::device_id platf::audio::audio_control_t</field>
    <field name="text">Match device_id</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::audio::audio_control_t::match_field_e::adapter_friendly_name</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html#a47f2f015d1a2255af4a26a2f0b3b6e16a98c47b7f540adb1255271e24c8ca72b7</field>
    <field name="keywords">adapter_friendly_name platf::audio::audio_control_t::match_field_e::adapter_friendly_name platf::audio::audio_control_t adapter_friendly_name platf::audio::audio_control_t::match_field_e::adapter_friendly_name platf::audio::audio_control_t</field>
    <field name="text">Match adapter friendly name</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::audio::audio_control_t::match_field_e::device_description</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html#a47f2f015d1a2255af4a26a2f0b3b6e16ab405e2961f08dedb8fbcb28832589bae</field>
    <field name="keywords">device_description platf::audio::audio_control_t::match_field_e::device_description platf::audio::audio_control_t device_description platf::audio::audio_control_t::match_field_e::device_description platf::audio::audio_control_t</field>
    <field name="text">Match endpoint description</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::audio::audio_control_t::is_sink_available</field>
    <field name="args">(const std::string &amp;sink) override</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html#a5b3b1cd25b647394f2fb7a7eedde62ea</field>
    <field name="keywords">is_sink_available platf::audio::audio_control_t::is_sink_available platf::audio::audio_control_t</field>
    <field name="text">Check if the audio sink is available in the system sink Sink to be checked True if available false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::audio::audio_control_t::set_format</field>
    <field name="args">(const std::string &amp;sink)</field>
    <field name="url">classplatf_1_1audio_1_1audio__control__t.html#a8d503115c04dac556ac1b5e24a98676e</field>
    <field name="keywords">set_format platf::audio::audio_control_t::set_format platf::audio::audio_control_t</field>
    <field name="text">If the requested sink is a virtual sink meaning no speakers attached to the host then we can seamlessly set the format to stereo and surround sound Any virtual sink detected will be prefixed by virtual- format name If it doesn t contain that prefix then the format will not be changed</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::audio::audio_notification_t</field>
    <field name="url">classplatf_1_1audio_1_1audio__notification__t.html</field>
    <field name="keywords">audio_notification_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::audio::audio_notification_t::check_default_render_device_changed</field>
    <field name="args">()</field>
    <field name="url">classplatf_1_1audio_1_1audio__notification__t.html#ac937540038c87f7e46449dc4a11e36af</field>
    <field name="keywords">check_default_render_device_changed platf::audio::audio_notification_t::check_default_render_device_changed platf::audio::audio_notification_t</field>
    <field name="text">Checks if the default rendering device changed and resets the change flag true if the device changed since last call</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::audio::co_init_t</field>
    <field name="url">classplatf_1_1audio_1_1co__init__t.html</field>
    <field name="keywords">co_init_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::audio::mic_wasapi_t</field>
    <field name="url">classplatf_1_1audio_1_1mic__wasapi__t.html</field>
    <field name="keywords">mic_wasapi_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::audio::prop_var_t</field>
    <field name="url">classplatf_1_1audio_1_1prop__var__t.html</field>
    <field name="keywords">prop_var_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::audio_control_t</field>
    <field name="url">classplatf_1_1audio__control__t.html</field>
    <field name="keywords">audio_control_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::audio_control_t::is_sink_available</field>
    <field name="args">(const std::string &amp;sink)=0</field>
    <field name="url">classplatf_1_1audio__control__t.html#a7cd90e21cf89883aa4738d6d24f935b1</field>
    <field name="keywords">is_sink_available platf::audio_control_t::is_sink_available platf::audio_control_t</field>
    <field name="text">Check if the audio sink is available in the system sink Sink to be checked True if available false otherwise</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::deinit_t</field>
    <field name="url">classplatf_1_1deinit__t.html</field>
    <field name="keywords">deinit_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::display_t</field>
    <field name="url">classplatf_1_1display__t.html</field>
    <field name="keywords">display_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::display_t::is_codec_supported</field>
    <field name="args">(std::string_view name, const ::video::config_t &amp;config)</field>
    <field name="url">classplatf_1_1display__t.html#a027bae5a74b0bbc847cf902360cfe681</field>
    <field name="keywords">is_codec_supported platf::display_t::is_codec_supported platf::display_t</field>
    <field name="text">Check that a given codec is supported by the display device Check that a given codec is supported by the display device Check that a given codec is supported by the display device name The FFmpeg codec name or similar for non-FFmpeg codecs config The codec configuration true if supported false otherwise Check that a given codec is supported by the display device Check that a given codec is supported by the display device Check that a given codec is supported by the display device Check that a given codec is supported by the display device Check that a given codec is supported by the display device Check that a given codec is supported by the display device Check that a given codec is supported by the display device Check that a given codec is supported by the display device Check that a given codec is supported by the display device Check that a given codec is supported by the display device Check that a given codec is supported by the display device Check that a given codec is supported by the display device</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">platf::display_t::push_captured_image_cb_t</field>
    <field name="url">classplatf_1_1display__t.html#a16412ffef5f0b7450f5448cfae3eb890</field>
    <field name="keywords">push_captured_image_cb_t platf::display_t::push_captured_image_cb_t platf::display_t</field>
    <field name="text">Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false true On success false On break request Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false Callback for when a new image is ready When display has a new image ready or a timeout occurs this callback will be called with the image If a frame was captured frame_captured will be true If a timeout occurred it will be false</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">platf::display_t::pull_free_image_cb_t</field>
    <field name="url">classplatf_1_1display__t.html#a5f7ea800ae3b42067fb940cc16a93f11</field>
    <field name="keywords">pull_free_image_cb_t platf::display_t::pull_free_image_cb_t platf::display_t</field>
    <field name="text">Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted true On success img_out contains free image false When capture has been interrupted img_out contains nullptr Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted Get free image from pool Calls must be synchronized Blocks until there is free image in the pool or capture is interrupted</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::display_t::capture</field>
    <field name="args">(const push_captured_image_cb_t &amp;push_captured_image_cb, const pull_free_image_cb_t &amp;pull_free_image_cb, bool *cursor)=0</field>
    <field name="url">classplatf_1_1display__t.html#a7c0041ff870a8f16600de33fc10cdfee</field>
    <field name="keywords">capture platf::display_t::capture platf::display_t</field>
    <field name="text">Capture a frame push_captured_image_cb The callback that is called with captured image must be called from the same thread as capture() pull_free_image_cb Capture backends call this callback to get empty image from the pool If backend uses multiple threads calls to this callback must be synchronized Calls to this callback and push_captured_image_cb must be synchronized as well cursor A pointer to the flag that indicates whether the cursor should be captured as well capture_e::ok When stopping capture_e::error On error capture_e::reinit When need of reinitialization Capture a frame Capture a frame</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::d3d_avcodec_encode_device_t</field>
    <field name="url">classplatf_1_1dxgi_1_1d3d__avcodec__encode__device__t.html</field>
    <field name="keywords">d3d_avcodec_encode_device_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::d3d_avcodec_encode_device_t::set_frame</field>
    <field name="args">(AVFrame *frame, AVBufferRef *hw_frames_ctx) override</field>
    <field name="url">classplatf_1_1dxgi_1_1d3d__avcodec__encode__device__t.html#a2eb9095c34aef731b1d235e8f4a159b9</field>
    <field name="keywords">set_frame platf::dxgi::d3d_avcodec_encode_device_t::set_frame platf::dxgi::d3d_avcodec_encode_device_t</field>
    <field name="text">Set the frame to be encoded Implementations must take ownership of frame</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::d3d_avcodec_encode_device_t::init_hwframes</field>
    <field name="args">(AVHWFramesContext *frames) override</field>
    <field name="url">classplatf_1_1dxgi_1_1d3d__avcodec__encode__device__t.html#a31e9ed39f0788aec005851f54fd9ac48</field>
    <field name="keywords">init_hwframes platf::dxgi::d3d_avcodec_encode_device_t::init_hwframes platf::dxgi::d3d_avcodec_encode_device_t</field>
    <field name="text">Initialize the hwframes context Implementations may set parameters during initialization of the hwframes context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::d3d_avcodec_encode_device_t::prepare_to_derive_context</field>
    <field name="args">(int hw_device_type) override</field>
    <field name="url">classplatf_1_1dxgi_1_1d3d__avcodec__encode__device__t.html#ac9da3ae70fcb8d9d3903ff73c3f29eeb</field>
    <field name="keywords">prepare_to_derive_context platf::dxgi::d3d_avcodec_encode_device_t::prepare_to_derive_context platf::dxgi::d3d_avcodec_encode_device_t</field>
    <field name="text">Prepare to derive a context Implementations may make modifications required before context derivation</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::d3d_base_encode_device</field>
    <field name="url">classplatf_1_1dxgi_1_1d3d__base__encode__device.html</field>
    <field name="keywords">d3d_base_encode_device</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::d3d_nvenc_encode_device_t</field>
    <field name="url">classplatf_1_1dxgi_1_1d3d__nvenc__encode__device__t.html</field>
    <field name="keywords">d3d_nvenc_encode_device_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::display_base_t</field>
    <field name="url">classplatf_1_1dxgi_1_1display__base__t.html</field>
    <field name="keywords">display_base_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::display_base_t::capture</field>
    <field name="args">(const push_captured_image_cb_t &amp;push_captured_image_cb, const pull_free_image_cb_t &amp;pull_free_image_cb, bool *cursor) override</field>
    <field name="url">classplatf_1_1dxgi_1_1display__base__t.html#a6bc026b9f07765fb4531814c2d0b72e8</field>
    <field name="keywords">capture platf::dxgi::display_base_t::capture platf::dxgi::display_base_t</field>
    <field name="text">Capture a frame push_captured_image_cb The callback that is called with captured image must be called from the same thread as capture() pull_free_image_cb Capture backends call this callback to get empty image from the pool If backend uses multiple threads calls to this callback must be synchronized Calls to this callback and push_captured_image_cb must be synchronized as well cursor A pointer to the flag that indicates whether the cursor should be captured as well capture_e::ok When stopping capture_e::error On error capture_e::reinit When need of reinitialization Capture a frame Capture a frame Capture a frame Capture a frame Capture a frame Capture a frame</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::dxgi::display_base_t::_D3DKMT_SCHEDULINGPRIORITYCLASS</field>
    <field name="url">classplatf_1_1dxgi_1_1display__base__t.html#a85d3af61fb35c74f72b645722d9310b0</field>
    <field name="keywords">_D3DKMT_SCHEDULINGPRIORITYCLASS platf::dxgi::display_base_t::_D3DKMT_SCHEDULINGPRIORITYCLASS platf::dxgi::display_base_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_NORMAL</field>
    <field name="url">classplatf_1_1dxgi_1_1display__base__t.html#a85d3af61fb35c74f72b645722d9310b0a033314eb2ed71a7be1e159d55b9195a9</field>
    <field name="keywords">D3DKMT_SCHEDULINGPRIORITYCLASS_NORMAL platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_NORMAL platf::dxgi::display_base_t D3DKMT_SCHEDULINGPRIORITYCLASS_NORMAL platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_NORMAL platf::dxgi::display_base_t</field>
    <field name="text">Normal priority class</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_BELOW_NORMAL</field>
    <field name="url">classplatf_1_1dxgi_1_1display__base__t.html#a85d3af61fb35c74f72b645722d9310b0a03c757af9ee0c018f7ade54f8c963888</field>
    <field name="keywords">D3DKMT_SCHEDULINGPRIORITYCLASS_BELOW_NORMAL platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_BELOW_NORMAL platf::dxgi::display_base_t D3DKMT_SCHEDULINGPRIORITYCLASS_BELOW_NORMAL platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_BELOW_NORMAL platf::dxgi::display_base_t</field>
    <field name="text">Below normal priority class</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_HIGH</field>
    <field name="url">classplatf_1_1dxgi_1_1display__base__t.html#a85d3af61fb35c74f72b645722d9310b0a236e7ea38f1145344f9bb19943bbaf52</field>
    <field name="keywords">D3DKMT_SCHEDULINGPRIORITYCLASS_HIGH platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_HIGH platf::dxgi::display_base_t D3DKMT_SCHEDULINGPRIORITYCLASS_HIGH platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_HIGH platf::dxgi::display_base_t</field>
    <field name="text">High priority class</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_IDLE</field>
    <field name="url">classplatf_1_1dxgi_1_1display__base__t.html#a85d3af61fb35c74f72b645722d9310b0a310c91ff13280fec0800ab2c88dbaba0</field>
    <field name="keywords">D3DKMT_SCHEDULINGPRIORITYCLASS_IDLE platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_IDLE platf::dxgi::display_base_t D3DKMT_SCHEDULINGPRIORITYCLASS_IDLE platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_IDLE platf::dxgi::display_base_t</field>
    <field name="text">Idle priority class</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_REALTIME</field>
    <field name="url">classplatf_1_1dxgi_1_1display__base__t.html#a85d3af61fb35c74f72b645722d9310b0a6a5753871fe7fcaa41839c1214a0fe5f</field>
    <field name="keywords">D3DKMT_SCHEDULINGPRIORITYCLASS_REALTIME platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_REALTIME platf::dxgi::display_base_t D3DKMT_SCHEDULINGPRIORITYCLASS_REALTIME platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_REALTIME platf::dxgi::display_base_t</field>
    <field name="text">Realtime priority class</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_ABOVE_NORMAL</field>
    <field name="url">classplatf_1_1dxgi_1_1display__base__t.html#a85d3af61fb35c74f72b645722d9310b0afe4c14d1ae6b179e9ea446610e0e767c</field>
    <field name="keywords">D3DKMT_SCHEDULINGPRIORITYCLASS_ABOVE_NORMAL platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_ABOVE_NORMAL platf::dxgi::display_base_t D3DKMT_SCHEDULINGPRIORITYCLASS_ABOVE_NORMAL platf::dxgi::display_base_t::D3DKMT_SCHEDULINGPRIORITYCLASS_ABOVE_NORMAL platf::dxgi::display_base_t</field>
    <field name="text">Above normal priority class</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::display_ddup_ram_t</field>
    <field name="url">classplatf_1_1dxgi_1_1display__ddup__ram__t.html</field>
    <field name="keywords">display_ddup_ram_t</field>
    <field name="text">Display backend that uses DDAPI with a software encoder</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::display_ddup_vram_t</field>
    <field name="url">classplatf_1_1dxgi_1_1display__ddup__vram__t.html</field>
    <field name="keywords">display_ddup_vram_t</field>
    <field name="text">Display backend that uses DDAPI with a hardware encoder</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::display_ram_t</field>
    <field name="url">classplatf_1_1dxgi_1_1display__ram__t.html</field>
    <field name="keywords">display_ram_t</field>
    <field name="text">Display component for devices that use software encoders</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::display_vram_t</field>
    <field name="url">classplatf_1_1dxgi_1_1display__vram__t.html</field>
    <field name="keywords">display_vram_t</field>
    <field name="text">Display component for devices that use hardware encoders</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::display_vram_t::is_codec_supported</field>
    <field name="args">(std::string_view name, const ::video::config_t &amp;config) override</field>
    <field name="url">classplatf_1_1dxgi_1_1display__vram__t.html#a1f291f20910ff95f6b29e0c6104c4b1f</field>
    <field name="keywords">is_codec_supported platf::dxgi::display_vram_t::is_codec_supported platf::dxgi::display_vram_t</field>
    <field name="text">Check that a given codec is supported by the display device Check that a given codec is supported by the display device name The FFmpeg codec name or similar for non-FFmpeg codecs config The codec configuration true if supported false otherwise Check that a given codec is supported by the display device</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::display_wgc_ram_t</field>
    <field name="url">classplatf_1_1dxgi_1_1display__wgc__ram__t.html</field>
    <field name="keywords">display_wgc_ram_t</field>
    <field name="text">Display backend that uses Windows.Graphics.Capture with a software encoder</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::display_wgc_ram_t::snapshot</field>
    <field name="args">(const pull_free_image_cb_t &amp;pull_free_image_cb, std::shared_ptr&lt; platf::img_t &gt; &amp;img_out, std::chrono::milliseconds timeout, bool cursor_visible) override</field>
    <field name="url">classplatf_1_1dxgi_1_1display__wgc__ram__t.html#a40932dc26d9b50b98583130b335c6c84</field>
    <field name="keywords">snapshot platf::dxgi::display_wgc_ram_t::snapshot platf::dxgi::display_wgc_ram_t</field>
    <field name="text">Get the next frame from the Windows.Graphics.Capture API and copy it into a new snapshot texture pull_free_image_cb call this to get a new free image from the video subsystem img_out the captured frame is returned here timeout how long to wait for the next frame cursor_visible whether to capture the cursor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::display_wgc_vram_t</field>
    <field name="url">classplatf_1_1dxgi_1_1display__wgc__vram__t.html</field>
    <field name="keywords">display_wgc_vram_t</field>
    <field name="text">Display backend that uses Windows.Graphics.Capture with a hardware encoder</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::display_wgc_vram_t::snapshot</field>
    <field name="args">(const pull_free_image_cb_t &amp;pull_free_image_cb, std::shared_ptr&lt; platf::img_t &gt; &amp;img_out, std::chrono::milliseconds timeout, bool cursor_visible) override</field>
    <field name="url">classplatf_1_1dxgi_1_1display__wgc__vram__t.html#a890f2051c49a4a4b62d2e6efb9b8903d</field>
    <field name="keywords">snapshot platf::dxgi::display_wgc_vram_t::snapshot platf::dxgi::display_wgc_vram_t</field>
    <field name="text">Get the next frame from the Windows.Graphics.Capture API and copy it into a new snapshot texture pull_free_image_cb call this to get a new free image from the video subsystem img_out the captured frame is returned here timeout how long to wait for the next frame cursor_visible</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::duplication_t</field>
    <field name="url">classplatf_1_1dxgi_1_1duplication__t.html</field>
    <field name="keywords">duplication_t</field>
    <field name="text">Display duplicator that uses the DirectX Desktop Duplication API</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::duplication_t::init</field>
    <field name="args">(display_base_t *display, const ::video::config_t &amp;config)</field>
    <field name="url">classplatf_1_1dxgi_1_1duplication__t.html#aa36e396d80dea0f01e9131ce562f1e9b</field>
    <field name="keywords">init platf::dxgi::duplication_t::init platf::dxgi::duplication_t</field>
    <field name="text">DDAPI-specific initialization goes here</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::gpu_cursor_t</field>
    <field name="url">classplatf_1_1dxgi_1_1gpu__cursor__t.html</field>
    <field name="keywords">gpu_cursor_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::dxgi::wgc_capture_t</field>
    <field name="url">classplatf_1_1dxgi_1_1wgc__capture__t.html</field>
    <field name="keywords">wgc_capture_t</field>
    <field name="text">Display duplicator that uses the Windows.Graphics.Capture API</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::wgc_capture_t::next_frame</field>
    <field name="args">(std::chrono::milliseconds timeout, ID3D11Texture2D **out, uint64_t &amp;out_time)</field>
    <field name="url">classplatf_1_1dxgi_1_1wgc__capture__t.html#a3a832f4ce270843c9b98ccb65607d32e</field>
    <field name="keywords">next_frame platf::dxgi::wgc_capture_t::next_frame platf::dxgi::wgc_capture_t</field>
    <field name="text">Get the next frame from the producer thread If not available the capture thread blocks until one is or the wait times out timeout how long to wait for the next frame out a texture containing the frame just captured out_time the timestamp of the frame just captured</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::wgc_capture_t::init</field>
    <field name="args">(display_base_t *display, const ::video::config_t &amp;config)</field>
    <field name="url">classplatf_1_1dxgi_1_1wgc__capture__t.html#adff515ab40b9ad97ff35e1e3fa87f707</field>
    <field name="keywords">init platf::dxgi::wgc_capture_t::init platf::dxgi::wgc_capture_t</field>
    <field name="text">Initialize the Windows.Graphics.Capture backend 0 on success 1 on failure</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::kms::cap_sys_admin</field>
    <field name="url">classplatf_1_1kms_1_1cap__sys__admin.html</field>
    <field name="keywords">cap_sys_admin</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::kms::card_t</field>
    <field name="url">classplatf_1_1kms_1_1card__t.html</field>
    <field name="keywords">card_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::kms::display_ram_t</field>
    <field name="url">classplatf_1_1kms_1_1display__ram__t.html</field>
    <field name="keywords">display_ram_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::kms::display_ram_t::capture</field>
    <field name="args">(const push_captured_image_cb_t &amp;push_captured_image_cb, const pull_free_image_cb_t &amp;pull_free_image_cb, bool *cursor) override</field>
    <field name="url">classplatf_1_1kms_1_1display__ram__t.html#ac9647cc8352b3d1efe85c6ea7d8f4332</field>
    <field name="keywords">capture platf::kms::display_ram_t::capture platf::kms::display_ram_t</field>
    <field name="text">Capture a frame push_captured_image_cb The callback that is called with captured image must be called from the same thread as capture() pull_free_image_cb Capture backends call this callback to get empty image from the pool If backend uses multiple threads calls to this callback must be synchronized Calls to this callback and push_captured_image_cb must be synchronized as well cursor A pointer to the flag that indicates whether the cursor should be captured as well capture_e::ok When stopping capture_e::error On error capture_e::reinit When need of reinitialization</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::kms::display_t</field>
    <field name="url">classplatf_1_1kms_1_1display__t.html</field>
    <field name="keywords">display_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::kms::display_vram_t</field>
    <field name="url">classplatf_1_1kms_1_1display__vram__t.html</field>
    <field name="keywords">display_vram_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::kms::display_vram_t::capture</field>
    <field name="args">(const push_captured_image_cb_t &amp;push_captured_image_cb, const pull_free_image_cb_t &amp;pull_free_image_cb, bool *cursor)</field>
    <field name="url">classplatf_1_1kms_1_1display__vram__t.html#adb476d9e1d7e1ddd5eb35079d216a66b</field>
    <field name="keywords">capture platf::kms::display_vram_t::capture platf::kms::display_vram_t</field>
    <field name="text">Capture a frame push_captured_image_cb The callback that is called with captured image must be called from the same thread as capture() pull_free_image_cb Capture backends call this callback to get empty image from the pool If backend uses multiple threads calls to this callback must be synchronized Calls to this callback and push_captured_image_cb must be synchronized as well cursor A pointer to the flag that indicates whether the cursor should be captured as well capture_e::ok When stopping capture_e::error On error capture_e::reinit When need of reinitialization</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::kms::plane_it_t</field>
    <field name="url">classplatf_1_1kms_1_1plane__it__t.html</field>
    <field name="keywords">plane_it_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::kms::wrapper_fb</field>
    <field name="url">classplatf_1_1kms_1_1wrapper__fb.html</field>
    <field name="keywords">wrapper_fb</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::linux_high_precision_timer</field>
    <field name="url">classplatf_1_1linux__high__precision__timer.html</field>
    <field name="keywords">linux_high_precision_timer</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::linux_high_precision_timer::operator bool</field>
    <field name="args">() override</field>
    <field name="url">classplatf_1_1linux__high__precision__timer.html#acbfd04ae3c5318f86df3a735af9d4229</field>
    <field name="keywords">operator bool platf::linux_high_precision_timer::operator bool platf::linux_high_precision_timer</field>
    <field name="text">Check if platform-specific timer backend has been initialized successfully true on success false on error</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::linux_high_precision_timer::sleep_for</field>
    <field name="args">(const std::chrono::nanoseconds &amp;duration) override</field>
    <field name="url">classplatf_1_1linux__high__precision__timer.html#ae6f672415c5bdf6c8a83eb664bb92861</field>
    <field name="keywords">sleep_for platf::linux_high_precision_timer::sleep_for platf::linux_high_precision_timer</field>
    <field name="text">Sleep for the duration duration Sleep duration</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::macos_high_precision_timer</field>
    <field name="url">classplatf_1_1macos__high__precision__timer.html</field>
    <field name="keywords">macos_high_precision_timer</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::macos_high_precision_timer::sleep_for</field>
    <field name="args">(const std::chrono::nanoseconds &amp;duration) override</field>
    <field name="url">classplatf_1_1macos__high__precision__timer.html#aa7251df41e02f5ded51d15809b5b2509</field>
    <field name="keywords">sleep_for platf::macos_high_precision_timer::sleep_for platf::macos_high_precision_timer</field>
    <field name="text">Sleep for the duration duration Sleep duration</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::macos_high_precision_timer::operator bool</field>
    <field name="args">() override</field>
    <field name="url">classplatf_1_1macos__high__precision__timer.html#ac5391b4d8957696cc128a5cb0e22db48</field>
    <field name="keywords">operator bool platf::macos_high_precision_timer::operator bool platf::macos_high_precision_timer</field>
    <field name="text">Check if platform-specific timer backend has been initialized successfully true on success false on error</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::mic_t</field>
    <field name="url">classplatf_1_1mic__t.html</field>
    <field name="keywords">mic_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::nv12_zero_device</field>
    <field name="url">classplatf_1_1nv12__zero__device.html</field>
    <field name="keywords">nv12_zero_device</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::nv12_zero_device::set_frame</field>
    <field name="args">(AVFrame *frame, AVBufferRef *hw_frames_ctx) override</field>
    <field name="url">classplatf_1_1nv12__zero__device.html#a8c7959b895664ce9ca95c776bca2abf4</field>
    <field name="keywords">set_frame platf::nv12_zero_device::set_frame platf::nv12_zero_device</field>
    <field name="text">Set the frame to be encoded Implementations must take ownership of frame</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::pa::server_t</field>
    <field name="url">classplatf_1_1pa_1_1server__t.html</field>
    <field name="keywords">server_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::pa::server_t::is_sink_available</field>
    <field name="args">(const std::string &amp;sink) override</field>
    <field name="url">classplatf_1_1pa_1_1server__t.html#a3ea168c886d6f09abace31b6cc1bf1de</field>
    <field name="keywords">is_sink_available platf::pa::server_t::is_sink_available platf::pa::server_t</field>
    <field name="text">Check if the audio sink is available in the system sink Sink to be checked True if available false otherwise</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::publish::deinit_t</field>
    <field name="url">classplatf_1_1publish_1_1deinit__t.html</field>
    <field name="keywords">deinit_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::publish::mdns_registration_t</field>
    <field name="url">classplatf_1_1publish_1_1mdns__registration__t.html</field>
    <field name="keywords">mdns_registration_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::qos_t</field>
    <field name="url">classplatf_1_1qos__t.html</field>
    <field name="keywords">qos_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::shm_data_t</field>
    <field name="url">classplatf_1_1shm__data__t.html</field>
    <field name="keywords">shm_data_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::shm_id_t</field>
    <field name="url">classplatf_1_1shm__id__t.html</field>
    <field name="keywords">shm_id_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::vigem_t</field>
    <field name="url">classplatf_1_1vigem__t.html</field>
    <field name="keywords">vigem_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::vigem_t::alloc_gamepad_internal</field>
    <field name="args">(const gamepad_id_t &amp;id, feedback_queue_t &amp;feedback_queue, VIGEM_TARGET_TYPE gp_type)</field>
    <field name="url">classplatf_1_1vigem__t.html#a0f2408a41e9bf840f37c7d58b86abec0</field>
    <field name="keywords">alloc_gamepad_internal platf::vigem_t::alloc_gamepad_internal platf::vigem_t</field>
    <field name="text">Attaches a new gamepad id The gamepad ID feedback_queue The queue for posting messages back to the client gp_type The type of gamepad 0 on success</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::vigem_t::rumble</field>
    <field name="args">(target_t::pointer target, std::uint8_t largeMotor, std::uint8_t smallMotor)</field>
    <field name="url">classplatf_1_1vigem__t.html#a11b23f096ce1853e83a44f467f4e13ea</field>
    <field name="keywords">rumble platf::vigem_t::rumble platf::vigem_t</field>
    <field name="text">Pass rumble data back to the client target The gamepad largeMotor The large motor smallMotor The small motor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::vigem_t::free_target</field>
    <field name="args">(int nr)</field>
    <field name="url">classplatf_1_1vigem__t.html#a9d7fc6f60833a14c41b88a9e95dd6143</field>
    <field name="keywords">free_target platf::vigem_t::free_target platf::vigem_t</field>
    <field name="text">Detaches the specified gamepad nr The gamepad</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::vigem_t::~vigem_t</field>
    <field name="args">()</field>
    <field name="url">classplatf_1_1vigem__t.html#aa96ad2ee3cd04f7c60c103aad6410949</field>
    <field name="keywords">platf::vigem_t::~vigem_t platf::vigem_t</field>
    <field name="text">vigem_t destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::vigem_t::set_rgb_led</field>
    <field name="args">(target_t::pointer target, std::uint8_t r, std::uint8_t g, std::uint8_t b)</field>
    <field name="url">classplatf_1_1vigem__t.html#ab5563322600b0802538e0825f63d6a8c</field>
    <field name="keywords">set_rgb_led platf::vigem_t::set_rgb_led platf::vigem_t</field>
    <field name="text">Pass RGB LED data back to the client target The gamepad r The red channel g The red channel b The red channel</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::win32_high_precision_timer</field>
    <field name="url">classplatf_1_1win32__high__precision__timer.html</field>
    <field name="keywords">win32_high_precision_timer</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::win32_high_precision_timer::sleep_for</field>
    <field name="args">(const std::chrono::nanoseconds &amp;duration) override</field>
    <field name="url">classplatf_1_1win32__high__precision__timer.html#a1e57779915a487dc5846fc4f203f77a1</field>
    <field name="keywords">sleep_for platf::win32_high_precision_timer::sleep_for platf::win32_high_precision_timer</field>
    <field name="text">Sleep for the duration duration Sleep duration</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::win32_high_precision_timer::operator bool</field>
    <field name="args">() override</field>
    <field name="url">classplatf_1_1win32__high__precision__timer.html#a996c256ea08b66591307921990e2ad51</field>
    <field name="keywords">operator bool platf::win32_high_precision_timer::operator bool platf::win32_high_precision_timer</field>
    <field name="text">Check if platform-specific timer backend has been initialized successfully true on success false on error</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">platf::x11::cursor_t</field>
    <field name="url">classplatf_1_1x11_1_1cursor__t.html</field>
    <field name="keywords">cursor_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::x11::cursor_t::blend</field>
    <field name="args">(img_t &amp;img, int offsetX, int offsetY)</field>
    <field name="url">classplatf_1_1x11_1_1cursor__t.html#a6230b67a76c58af3bd0353d062c7b138</field>
    <field name="keywords">blend platf::x11::cursor_t::blend platf::x11::cursor_t</field>
    <field name="text">Capture and blend the cursor into the image img destination image offsetX offsetY Top left corner of the virtual screen</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">proc::deinit_t</field>
    <field name="url">classproc_1_1deinit__t.html</field>
    <field name="keywords">deinit_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">proc::proc_t</field>
    <field name="url">classproc_1_1proc__t.html</field>
    <field name="keywords">proc_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">proc::proc_t::running</field>
    <field name="args">()</field>
    <field name="url">classproc_1_1proc__t.html#a3c524382f5450f61614271f7a0dfb130</field>
    <field name="keywords">running proc::proc_t::running proc::proc_t</field>
    <field name="text">_app_id if a process is running otherwise returns 0</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">round_robin_util::it_wrap_t</field>
    <field name="url">classround__robin__util_1_1it__wrap__t.html</field>
    <field name="keywords">it_wrap_t it_wrap_t&lt; plane_t::element_type, plane_it_t &gt; it_wrap_t&lt; V, round_robin_t&lt; V, It &gt; &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">round_robin_util::round_robin_t</field>
    <field name="url">classround__robin__util_1_1round__robin__t.html</field>
    <field name="keywords">round_robin_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">rtsp_stream::rtsp_server_t</field>
    <field name="url">classrtsp__stream_1_1rtsp__server__t.html</field>
    <field name="keywords">rtsp_server_t</field>
    <field name="text">clear</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::rtsp_server_t::session_raise</field>
    <field name="args">(std::shared_ptr&lt; launch_session_t &gt; launch_session)</field>
    <field name="url">classrtsp__stream_1_1rtsp__server__t.html#a0d0fc458798862bfaf07b5319838a209</field>
    <field name="keywords">session_raise rtsp_stream::rtsp_server_t::session_raise rtsp_stream::rtsp_server_t</field>
    <field name="text">Launch a new streaming session If the client does not begin streaming within the ping_timeout the session will be discarded launch_session Streaming session information</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::rtsp_server_t::remove</field>
    <field name="args">(const std::shared_ptr&lt; stream::session_t &gt; &amp;session)</field>
    <field name="url">classrtsp__stream_1_1rtsp__server__t.html#a0e8deb113b4cfdeb4c62e0eff317e655</field>
    <field name="keywords">remove rtsp_stream::rtsp_server_t::remove rtsp_stream::rtsp_server_t</field>
    <field name="text">Removes the provided session from the set of sessions session The session to remove</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::rtsp_server_t::session_count</field>
    <field name="args">()</field>
    <field name="url">classrtsp__stream_1_1rtsp__server__t.html#a1f9351ef8d17e99cf9f687371d5f15c4</field>
    <field name="keywords">session_count rtsp_stream::rtsp_server_t::session_count rtsp_stream::rtsp_server_t</field>
    <field name="text">Get the number of active sessions Count of active sessions</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::rtsp_server_t::clear</field>
    <field name="args">(bool all=true)</field>
    <field name="url">classrtsp__stream_1_1rtsp__server__t.html#a550c3db80ec5d6a5402a72719d19ab58</field>
    <field name="keywords">clear rtsp_stream::rtsp_server_t::clear rtsp_stream::rtsp_server_t</field>
    <field name="text">Clear launch sessions all If true clear all sessions Otherwise only clear timed out and stopped sessions Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::rtsp_server_t::session_clear</field>
    <field name="args">(uint32_t launch_session_id)</field>
    <field name="url">classrtsp__stream_1_1rtsp__server__t.html#aab8e218c1637b421cd2a23c536e4b450</field>
    <field name="keywords">session_clear rtsp_stream::rtsp_server_t::session_clear rtsp_stream::rtsp_server_t</field>
    <field name="text">Clear state for the oldest launch session launch_session_id The ID of the session to clear</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::rtsp_server_t::insert</field>
    <field name="args">(const std::shared_ptr&lt; stream::session_t &gt; &amp;session)</field>
    <field name="url">classrtsp__stream_1_1rtsp__server__t.html#aeb64c430366f33c67139da1cd204bb80</field>
    <field name="keywords">insert rtsp_stream::rtsp_server_t::insert rtsp_stream::rtsp_server_t</field>
    <field name="text">Inserts the provided session into the set of sessions session The session to insert</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">rtsp_stream::socket_t</field>
    <field name="url">classrtsp__stream_1_1socket__t.html</field>
    <field name="keywords">socket_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::socket_t::handle_read_encrypted_message</field>
    <field name="args">(std::shared_ptr&lt; socket_t &gt; &amp;socket, const boost::system::error_code &amp;ec, std::size_t bytes)</field>
    <field name="url">classrtsp__stream_1_1socket__t.html#a7d34db431c906f572a66573567762843</field>
    <field name="keywords">handle_read_encrypted_message rtsp_stream::socket_t::handle_read_encrypted_message rtsp_stream::socket_t</field>
    <field name="text">Handle the final read of the content of an encrypted message socket The socket the message was received on ec The error code of the read operation bytes The number of bytes read</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::socket_t::read_plaintext_payload</field>
    <field name="args">()</field>
    <field name="url">classrtsp__stream_1_1socket__t.html#a80a322cb230e890e59b1c1b077791493</field>
    <field name="keywords">read_plaintext_payload rtsp_stream::socket_t::read_plaintext_payload rtsp_stream::socket_t</field>
    <field name="text">Queue an asynchronous read of the payload portion of a plaintext message</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::socket_t::read</field>
    <field name="args">()</field>
    <field name="url">classrtsp__stream_1_1socket__t.html#a8a38376735294ad4e1492725df542148</field>
    <field name="keywords">read rtsp_stream::socket_t::read rtsp_stream::socket_t</field>
    <field name="text">Queue an asynchronous read to begin the next message</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::socket_t::handle_read_encrypted_header</field>
    <field name="args">(std::shared_ptr&lt; socket_t &gt; &amp;socket, const boost::system::error_code &amp;ec, std::size_t bytes)</field>
    <field name="url">classrtsp__stream_1_1socket__t.html#aa5d9513a1d925414c03bcd3a2ee21c06</field>
    <field name="keywords">handle_read_encrypted_header rtsp_stream::socket_t::handle_read_encrypted_header rtsp_stream::socket_t</field>
    <field name="text">Handle the initial read of the header of an encrypted message socket The socket the message was received on ec The error code of the read operation bytes The number of bytes read</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::socket_t::handle_plaintext_payload</field>
    <field name="args">(std::shared_ptr&lt; socket_t &gt; &amp;socket, const boost::system::error_code &amp;ec, std::size_t bytes)</field>
    <field name="url">classrtsp__stream_1_1socket__t.html#ac0327746c3c82cd6f3a42d19ff1c3f19</field>
    <field name="keywords">handle_plaintext_payload rtsp_stream::socket_t::handle_plaintext_payload rtsp_stream::socket_t</field>
    <field name="text">Handle the read of the payload portion of a plaintext message socket The socket the message was received on ec The error code of the read operation bytes The number of bytes read</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::socket_t::handle_read_plaintext</field>
    <field name="args">(std::shared_ptr&lt; socket_t &gt; &amp;socket, const boost::system::error_code &amp;ec, std::size_t bytes)</field>
    <field name="url">classrtsp__stream_1_1socket__t.html#ac5403f57f6dc725f706cfc2008dd3345</field>
    <field name="keywords">handle_read_plaintext rtsp_stream::socket_t::handle_read_plaintext rtsp_stream::socket_t</field>
    <field name="text">Handle the read of the header portion of a plaintext message socket The socket the message was received on ec The error code of the read operation bytes The number of bytes read</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">safe::alarm_raw_t</field>
    <field name="url">classsafe_1_1alarm__raw__t.html</field>
    <field name="keywords">alarm_raw_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">safe::event_t</field>
    <field name="url">classsafe_1_1event__t.html</field>
    <field name="keywords">event_t event_t&lt; bool &gt; event_t&lt; std::shared_ptr&lt; rtsp_stream::launch_session_t &gt; &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">safe::mail_raw_t</field>
    <field name="url">classsafe_1_1mail__raw__t.html</field>
    <field name="keywords">mail_raw_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">safe::post_t</field>
    <field name="url">classsafe_1_1post__t.html</field>
    <field name="keywords">post_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">safe::queue_t</field>
    <field name="url">classsafe_1_1queue__t.html</field>
    <field name="keywords">queue_t queue_t&lt; sync_session_ctx_t &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">safe::ptr_t</field>
    <field name="url">classsafe_1_1shared__t.html</field>
    <field name="keywords">ptr_t shared_t shared_t&lt; stream::broadcast_ctx_t &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">service_ctrl::service_controller</field>
    <field name="url">classservice__ctrl_1_1service__controller.html</field>
    <field name="keywords">service_controller</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">service_ctrl::service_controller::start_service</field>
    <field name="args">()</field>
    <field name="url">classservice__ctrl_1_1service__controller.html#a3061466581e5b4ef75c15881b9129128</field>
    <field name="keywords">start_service service_ctrl::service_controller::start_service service_ctrl::service_controller</field>
    <field name="text">Asynchronously starts the Sunshine service</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">service_ctrl::service_controller::query_service_status</field>
    <field name="args">(SERVICE_STATUS &amp;status)</field>
    <field name="url">classservice__ctrl_1_1service__controller.html#a910e75f5aecdc54afdb6872b4fc86aa7</field>
    <field name="keywords">query_service_status service_ctrl::service_controller::query_service_status service_ctrl::service_controller</field>
    <field name="text">Query the service status status The SERVICE_STATUS struct to populate</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">service_ctrl::service_controller::service_controller</field>
    <field name="args">(DWORD service_desired_access)</field>
    <field name="url">classservice__ctrl_1_1service__controller.html#afe42460ed7e8aca882f6f91b78764e23</field>
    <field name="keywords">service_controller service_ctrl::service_controller::service_controller service_ctrl::service_controller</field>
    <field name="text">Constructor for service_controller class service_desired_access SERVICE_* desired access flags</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">stat_trackers::min_max_avg_tracker</field>
    <field name="url">classstat__trackers_1_1min__max__avg__tracker.html</field>
    <field name="keywords">min_max_avg_tracker min_max_avg_tracker&lt; double &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">stream::control_server_t</field>
    <field name="url">classstream_1_1control__server__t.html</field>
    <field name="keywords">control_server_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">stream::control_server_t::call</field>
    <field name="args">(std::uint16_t type, session_t *session, const std::string_view &amp;payload, bool reinjected)</field>
    <field name="url">classstream_1_1control__server__t.html#ae5a7e8f715d43010dbcd0307ceb56c45</field>
    <field name="keywords">call stream::control_server_t::call stream::control_server_t</field>
    <field name="text">Call the handler for a given control stream message type The message type session The session the message was received on payload The payload of the message reinjected true if this message is being reprocessed after decryption</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">sync_util::sync_t</field>
    <field name="url">classsync__util_1_1sync__t.html</field>
    <field name="keywords">sync_t sync_t&lt; std::map&lt; net::peer_t, stream::session_t * &gt; &gt; sync_t&lt; std::set&lt; std::shared_ptr&lt; stream::session_t &gt; &gt; &gt; sync_t&lt; std::vector&lt; stream::session_t * &gt; &gt; sync_t&lt; std::weak_ptr&lt; platf::display_t &gt; &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">task_pool_util::TaskPool</field>
    <field name="url">classtask__pool__util_1_1TaskPool.html</field>
    <field name="keywords">TaskPool</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">task_pool_util::TaskPool::delay</field>
    <field name="args">(task_id_t task_id, std::chrono::duration&lt; X, Y &gt; duration)</field>
    <field name="url">classtask__pool__util_1_1TaskPool.html#acd005004e051dbb33466768b2defa9b8</field>
    <field name="keywords">delay task_pool_util::TaskPool::delay task_pool_util::TaskPool</field>
    <field name="text">task_id The id of the task to delay duration The delay before executing the task</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">task_pool_util::TaskPool::pushDelayed</field>
    <field name="args">(Function &amp;&amp;newTask, std::chrono::duration&lt; X, Y &gt; duration, Args &amp;&amp;...args)</field>
    <field name="url">classtask__pool__util_1_1TaskPool.html#acf403ca5189c02ac12a0540de29f7280</field>
    <field name="keywords">pushDelayed task_pool_util::TaskPool::pushDelayed task_pool_util::TaskPool</field>
    <field name="text">An id to potentially delay the task</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">task_pool_util::TaskPool::timer_task_t</field>
    <field name="url">classtask__pool__util_1_1TaskPool_1_1timer__task__t.html</field>
    <field name="keywords">timer_task_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">task_pool_util::_Impl</field>
    <field name="url">classtask__pool__util_1_1__Impl.html</field>
    <field name="keywords">_Impl</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">task_pool_util::_ImplBase</field>
    <field name="url">classtask__pool__util_1_1__ImplBase.html</field>
    <field name="keywords">_ImplBase</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">thread_pool_util::ThreadPool</field>
    <field name="url">classthread__pool__util_1_1ThreadPool.html</field>
    <field name="keywords">ThreadPool</field>
    <field name="text">Allow threads to execute unhindered while keeping full control over the threads</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">upnp::deinit_t</field>
    <field name="url">classupnp_1_1deinit__t.html</field>
    <field name="keywords">deinit_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">upnp::deinit_t::upnp_thread_proc</field>
    <field name="args">()</field>
    <field name="url">classupnp_1_1deinit__t.html#a1786cd31228965cdbbc93d3a956a3318</field>
    <field name="keywords">upnp_thread_proc upnp::deinit_t::upnp_thread_proc upnp::deinit_t</field>
    <field name="text">Maintains UPnP port forwarding rules</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">upnp::deinit_t::map_upnp_port</field>
    <field name="args">(const IGDdatas &amp;data, const urls_t &amp;urls, const std::string &amp;lan_addr, const mapping_t &amp;mapping)</field>
    <field name="url">classupnp_1_1deinit__t.html#a5d45866bd0f6253b7a08d8010c4bf4ac</field>
    <field name="keywords">map_upnp_port upnp::deinit_t::map_upnp_port upnp::deinit_t</field>
    <field name="text">Maps a port via UPnP data IGDdatas from UPNP_GetValidIGD() urls urls_t from UPNP_GetValidIGD() lan_addr Local IP address to map to mapping Information about port to map true on success</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">upnp::deinit_t::create_ipv6_pinholes</field>
    <field name="args">()</field>
    <field name="url">classupnp_1_1deinit__t.html#ade488be5115c96286e012055c134a7e2</field>
    <field name="keywords">create_ipv6_pinholes upnp::deinit_t::create_ipv6_pinholes upnp::deinit_t</field>
    <field name="text">Opens pinholes for IPv6 traffic if the IGD is capable Not many IGDs support this feature so we perform error logging with debug level true if the pinholes were opened successfully</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">upnp::deinit_t::unmap_all_upnp_ports</field>
    <field name="args">(const urls_t &amp;urls, const IGDdatas &amp;data)</field>
    <field name="url">classupnp_1_1deinit__t.html#aea8dce30642c9142d9da82dc15c1ebeb</field>
    <field name="keywords">unmap_all_upnp_ports upnp::deinit_t::unmap_all_upnp_ports upnp::deinit_t</field>
    <field name="text">Unmaps all ports urls urls_t from UPNP_GetValidIGD() data IGDdatas from UPNP_GetValidIGD()</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">upnp::urls_t</field>
    <field name="url">classupnp_1_1urls__t.html</field>
    <field name="keywords">urls_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">util::Either</field>
    <field name="url">classutil_1_1Either.html</field>
    <field name="keywords">Either Either&lt; std::shared_ptr&lt; typename SimpleWeb::ServerBase&lt; SimpleWeb::HTTP &gt;::Response &gt;, std::shared_ptr&lt; typename SimpleWeb::ServerBase&lt; nvhttp::SunshineHTTPS &gt;::Response &gt; &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">util::FailGuard</field>
    <field name="url">classutil_1_1FailGuard.html</field>
    <field name="keywords">FailGuard</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">util::Hex</field>
    <field name="url">classutil_1_1Hex.html</field>
    <field name="keywords">Hex</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">util::buffer_t</field>
    <field name="url">classutil_1_1buffer__t.html</field>
    <field name="keywords">buffer_t buffer_t&lt; char &gt; buffer_t&lt; float &gt; buffer_t&lt; GLint &gt; buffer_t&lt; GLuint &gt; buffer_t&lt; std::uint8_t &gt; buffer_t&lt; uint8_t * &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">util::hash</field>
    <field name="url">classutil_1_1hash.html</field>
    <field name="keywords">hash</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">util::uniq_ptr</field>
    <field name="url">classutil_1_1uniq__ptr.html</field>
    <field name="keywords">uniq_ptr uniq_ptr&lt; std::remove_pointer_t&lt; T &gt;, safe_hlocal_deleter &gt; uniq_ptr&lt; T, Destroy&lt; T *, ReturnType, function &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, ReturnType, function &gt; &gt;&lt; FILE, int, fclose &gt; uniq_ptr&lt; T, Destroy&lt; T *, ReturnType, function &gt; &gt;&lt; void, BOOL, CloseHandle &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; _VIGEM_CLIENT_T, vigem_free &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; _VIGEM_TARGET_T, vigem_target_free &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; _XDisplay, freeDisplay &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; AVBufferRef, free_buffer &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; AVCodecContext, free_ctx &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; AVFrame, free_frame &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; CUgraphicsResource_st, unregisterResource &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; cursor_ctx_raw_t, freeCursorCtx &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; device, &amp;device_destroy &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; drmModePlaneRes, drmModeFreePlaneResources &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; ENetHost, free_host &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; EVP_CIPHER_CTX, EVP_CIPHER_CTX_free &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; IAudioCaptureClient, Release&lt; IAudioCaptureClient &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; IAudioClient, Release&lt; IAudioClient &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; ID3D11BlendState, Release&lt; ID3D11BlendState &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; ID3D11Buffer, Release&lt; ID3D11Buffer &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; ID3D11Device, Release&lt; ID3D11Device &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; ID3D11DeviceContext, Release&lt; ID3D11DeviceContext &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; ID3D11PixelShader, Release&lt; ID3D11PixelShader &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; ID3D11RenderTargetView, Release&lt; ID3D11RenderTargetView &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; ID3D11SamplerState, Release&lt; ID3D11SamplerState &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; ID3D11ShaderResourceView, Release&lt; ID3D11ShaderResourceView &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; ID3D11Texture2D, Release&lt; ID3D11Texture2D &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; ID3D11VertexShader, Release&lt; ID3D11VertexShader &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; IDXGIAdapter1, Release&lt; IDXGIAdapter1 &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; IDXGIFactory1, Release&lt; IDXGIFactory1 &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; IDXGIKeyedMutex, Release&lt; IDXGIKeyedMutex &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; IDXGIOutput, Release&lt; IDXGIOutput &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; IDXGIOutputDuplication, Release&lt; IDXGIOutputDuplication &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; IMMDevice, Release&lt; IMMDevice &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; IMMDeviceEnumerator, Release&lt; IMMDeviceEnumerator &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; IPolicyConfig, Release&lt; IPolicyConfig &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; pa_context, pa_context_unref &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; pa_mainloop, pa_mainloop_free &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; pa_simple, pa_simple_free &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; SwsContext, sws_freeContext &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; T, c_free&lt; T &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; T, dynamic&lt; T, ReturnType, function &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; T, dynamic&lt; T, void, function &gt; &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; void, EGLBoolean, &amp;eglTerminate &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; wl_display, wl_display_disconnect &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; X509_STORE_CTX, X509_STORE_CTX_free &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; xcb_connection_t, &amp;xcb::disconnect &gt; uniq_ptr&lt; T, Destroy&lt; T *, void, function &gt; &gt;&lt; XImage, freeImage &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">util::wrap_ptr</field>
    <field name="url">classutil_1_1wrap__ptr.html</field>
    <field name="keywords">wrap_ptr</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">va::va_ram_t</field>
    <field name="url">classva_1_1va__ram__t.html</field>
    <field name="keywords">va_ram_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">va::va_t</field>
    <field name="url">classva_1_1va__t.html</field>
    <field name="keywords">va_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">va::va_t::select_va_entrypoint</field>
    <field name="args">(VAProfile profile)</field>
    <field name="url">classva_1_1va__t.html#a28965a5dbe34b0bfa32c8c9ca69b2313</field>
    <field name="keywords">select_va_entrypoint va::va_t::select_va_entrypoint va::va_t</field>
    <field name="text">Finds a supported VA entrypoint for the given VA profile Finds a supported VA entrypoint for the given VA profile profile The profile to match A valid encoding entrypoint or 0 on failure Finds a supported VA entrypoint for the given VA profile</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">va::va_t::is_va_profile_supported</field>
    <field name="args">(VAProfile profile)</field>
    <field name="url">classva_1_1va__t.html#a3aec171aeb1a8fb6c83630d7e3ddf63a</field>
    <field name="keywords">is_va_profile_supported va::va_t::is_va_profile_supported va::va_t</field>
    <field name="text">Determines if a given VA profile is supported Determines if a given VA profile is supported profile The profile to match Boolean value indicating if the profile is supported Determines if a given VA profile is supported</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">va::va_t::init_codec_options</field>
    <field name="args">(AVCodecContext *ctx, AVDictionary **options) override</field>
    <field name="url">classva_1_1va__t.html#a5c2543faf994c21963a473259ea0652e</field>
    <field name="keywords">init_codec_options va::va_t::init_codec_options va::va_t</field>
    <field name="text">Provides a hook for allow platform-specific code to adjust codec options Provides a hook for allow platform-specific code to adjust codec options Implementations may set or modify codec options prior to codec initialization Provides a hook for allow platform-specific code to adjust codec options</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">va::va_t::get_va_profile</field>
    <field name="args">(AVCodecContext *ctx)</field>
    <field name="url">classva_1_1va__t.html#a88746367097f723b0662f70e2db4d016</field>
    <field name="keywords">get_va_profile va::va_t::get_va_profile va::va_t</field>
    <field name="text">Determines the matching VA profile for the codec configuration Determines the matching VA profile for the codec configuration ctx The FFmpeg codec context The matching VA profile or VAProfileNone on failure Determines the matching VA profile for the codec configuration</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">va::va_t::set_frame</field>
    <field name="args">(AVFrame *frame, AVBufferRef *hw_frames_ctx_buf) override</field>
    <field name="url">classva_1_1va__t.html#afd327b757a1d733e8b48ef42c8fb124f</field>
    <field name="keywords">set_frame va::va_t::set_frame va::va_t</field>
    <field name="text">Set the frame to be encoded Set the frame to be encoded Implementations must take ownership of frame Set the frame to be encoded</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">va::va_vram_t</field>
    <field name="url">classva_1_1va__vram__t.html</field>
    <field name="keywords">va_vram_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">video::avcodec_encode_session_t</field>
    <field name="url">classvideo_1_1avcodec__encode__session__t.html</field>
    <field name="keywords">avcodec_encode_session_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">video::avcodec_software_encode_device_t</field>
    <field name="url">classvideo_1_1avcodec__software__encode__device__t.html</field>
    <field name="keywords">avcodec_software_encode_device_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">video::avcodec_software_encode_device_t::set_frame</field>
    <field name="args">(AVFrame *frame, AVBufferRef *hw_frames_ctx) override</field>
    <field name="url">classvideo_1_1avcodec__software__encode__device__t.html#a6f27b4810bd4deba2ab7e297a230621c</field>
    <field name="keywords">set_frame video::avcodec_software_encode_device_t::set_frame video::avcodec_software_encode_device_t</field>
    <field name="text">Set the frame to be encoded Implementations must take ownership of frame</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">video::avcodec_software_encode_device_t::prefill</field>
    <field name="args">()</field>
    <field name="url">classvideo_1_1avcodec__software__encode__device__t.html#acdc5388558c6eea1b09e76e040523292</field>
    <field name="keywords">prefill video::avcodec_software_encode_device_t::prefill video::avcodec_software_encode_device_t</field>
    <field name="text">When preserving aspect ratio ensure that padding is black</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">video::nvenc_encode_session_t</field>
    <field name="url">classvideo_1_1nvenc__encode__session__t.html</field>
    <field name="keywords">nvenc_encode_session_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">wl::display_t</field>
    <field name="url">classwl_1_1display__t.html</field>
    <field name="keywords">display_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">wl::display_t::init</field>
    <field name="args">(const char *display_name=nullptr)</field>
    <field name="url">classwl_1_1display__t.html#a694e0ff1bde4b6765baaee78281382fb</field>
    <field name="keywords">init wl::display_t::init wl::display_t</field>
    <field name="text">Initialize display If display_name nullptr display_name std::getenv display_name The name of the display 0 on success 1 on failure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">wl::display_t::dispatch</field>
    <field name="args">(std::chrono::milliseconds timeout)</field>
    <field name="url">classwl_1_1display__t.html#aff0029d1450d71c59c9b6e0f58fe1e6a</field>
    <field name="keywords">dispatch wl::display_t::dispatch wl::display_t</field>
    <field name="text">Waits up to the specified timeout to dispatch new events on the wl_display timeout The timeout in milliseconds true if new events were dispatched or false if the timeout expired</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">wl::dmabuf_t</field>
    <field name="url">classwl_1_1dmabuf__t.html</field>
    <field name="keywords">dmabuf_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">wl::dmabuf_t::status_e</field>
    <field name="url">classwl_1_1dmabuf__t.html#aa76efa95a9d28860661a9e0448e94144</field>
    <field name="keywords">status_e wl::dmabuf_t::status_e wl::dmabuf_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">wl::dmabuf_t::WAITING</field>
    <field name="url">classwl_1_1dmabuf__t.html#aa76efa95a9d28860661a9e0448e94144a1954794ea28ec365dcb7c9318ddb77d4</field>
    <field name="keywords">WAITING wl::dmabuf_t::WAITING wl::dmabuf_t WAITING wl::dmabuf_t::WAITING wl::dmabuf_t</field>
    <field name="text">Waiting for a frame</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">wl::dmabuf_t::READY</field>
    <field name="url">classwl_1_1dmabuf__t.html#aa76efa95a9d28860661a9e0448e94144a2c41360125c71453f2b55d02ef36c99d</field>
    <field name="keywords">READY wl::dmabuf_t::READY wl::dmabuf_t READY wl::dmabuf_t::READY wl::dmabuf_t</field>
    <field name="text">Frame is ready</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">wl::dmabuf_t::REINIT</field>
    <field name="url">classwl_1_1dmabuf__t.html#aa76efa95a9d28860661a9e0448e94144ae6059220834f430264c341e15a4e427c</field>
    <field name="keywords">REINIT wl::dmabuf_t::REINIT wl::dmabuf_t REINIT wl::dmabuf_t::REINIT wl::dmabuf_t</field>
    <field name="text">Reinitialize the frame</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">wl::frame_t</field>
    <field name="url">classwl_1_1frame__t.html</field>
    <field name="keywords">frame_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">wl::interface_t</field>
    <field name="url">classwl_1_1interface__t.html</field>
    <field name="keywords">interface_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">wl::interface_t::interface_e</field>
    <field name="url">classwl_1_1interface__t.html#a4712fea814a21cb2880028c292ad76dc</field>
    <field name="keywords">interface_e wl::interface_t::interface_e wl::interface_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">wl::interface_t::WLR_EXPORT_DMABUF</field>
    <field name="url">classwl_1_1interface__t.html#a4712fea814a21cb2880028c292ad76dca54d0ce9359594f62522b9dde3ab23bda</field>
    <field name="keywords">WLR_EXPORT_DMABUF wl::interface_t::WLR_EXPORT_DMABUF wl::interface_t WLR_EXPORT_DMABUF wl::interface_t::WLR_EXPORT_DMABUF wl::interface_t</field>
    <field name="text">screencopy manager</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">wl::interface_t::LINUX_DMABUF</field>
    <field name="url">classwl_1_1interface__t.html#a4712fea814a21cb2880028c292ad76dcab5e36e6694f30e2980525116892c616e</field>
    <field name="keywords">LINUX_DMABUF wl::interface_t::LINUX_DMABUF wl::interface_t LINUX_DMABUF wl::interface_t::LINUX_DMABUF wl::interface_t</field>
    <field name="text">linux-dmabuf protocol</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">wl::interface_t::MAX_INTERFACES</field>
    <field name="url">classwl_1_1interface__t.html#a4712fea814a21cb2880028c292ad76dcad7dcc68aab12b03318715ed9c495d6ee</field>
    <field name="keywords">MAX_INTERFACES wl::interface_t::MAX_INTERFACES wl::interface_t MAX_INTERFACES wl::interface_t::MAX_INTERFACES wl::interface_t</field>
    <field name="text">Maximum number of interfaces</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">wl::interface_t::XDG_OUTPUT</field>
    <field name="url">classwl_1_1interface__t.html#a4712fea814a21cb2880028c292ad76dcaecc10494d6cdf9d8fc230b2b0c199e6e</field>
    <field name="keywords">XDG_OUTPUT wl::interface_t::XDG_OUTPUT wl::interface_t XDG_OUTPUT wl::interface_t::XDG_OUTPUT wl::interface_t</field>
    <field name="text">xdg-output</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">wl::monitor_t</field>
    <field name="url">classwl_1_1monitor__t.html</field>
    <field name="keywords">monitor_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">wl::wlr_ram_t</field>
    <field name="url">classwl_1_1wlr__ram__t.html</field>
    <field name="keywords">wlr_ram_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">wl::wlr_ram_t::capture</field>
    <field name="args">(const push_captured_image_cb_t &amp;push_captured_image_cb, const pull_free_image_cb_t &amp;pull_free_image_cb, bool *cursor) override</field>
    <field name="url">classwl_1_1wlr__ram__t.html#abf2911e76f73338f897390933301d164</field>
    <field name="keywords">capture wl::wlr_ram_t::capture wl::wlr_ram_t</field>
    <field name="text">Capture a frame push_captured_image_cb The callback that is called with captured image must be called from the same thread as capture() pull_free_image_cb Capture backends call this callback to get empty image from the pool If backend uses multiple threads calls to this callback must be synchronized Calls to this callback and push_captured_image_cb must be synchronized as well cursor A pointer to the flag that indicates whether the cursor should be captured as well capture_e::ok When stopping capture_e::error On error capture_e::reinit When need of reinitialization</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">wl::wlr_t</field>
    <field name="url">classwl_1_1wlr__t.html</field>
    <field name="keywords">wlr_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">wl::wlr_vram_t</field>
    <field name="url">classwl_1_1wlr__vram__t.html</field>
    <field name="keywords">wlr_vram_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">wl::wlr_vram_t::capture</field>
    <field name="args">(const push_captured_image_cb_t &amp;push_captured_image_cb, const pull_free_image_cb_t &amp;pull_free_image_cb, bool *cursor) override</field>
    <field name="url">classwl_1_1wlr__vram__t.html#ab9459fb23f4ec868a0f9fe69ab93f102</field>
    <field name="keywords">capture wl::wlr_vram_t::capture wl::wlr_vram_t</field>
    <field name="text">Capture a frame push_captured_image_cb The callback that is called with captured image must be called from the same thread as capture() pull_free_image_cb Capture backends call this callback to get empty image from the pool If backend uses multiple threads calls to this callback must be synchronized Calls to this callback and push_captured_image_cb must be synchronized as well cursor A pointer to the flag that indicates whether the cursor should be captured as well capture_e::ok When stopping capture_e::error On error capture_e::reinit When need of reinitialization</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">common.h</field>
    <field name="url">common_8h.html</field>
    <field name="keywords">common.h</field>
    <field name="text">Declarations for common platform specific utilities x y get_mouse_loc input</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::mem_type_e</field>
    <field name="url">common_8h.html#a004c913f8b3c00e100fd0b1c0fec42d6</field>
    <field name="keywords">mem_type_e platf::mem_type_e platf</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::mem_type_e::videotoolbox</field>
    <field name="url">common_8h.html#a004c913f8b3c00e100fd0b1c0fec42d6a08e3b71c42a6d1ae4be0e8a81656d6bd</field>
    <field name="keywords">videotoolbox platf::mem_type_e::videotoolbox videotoolbox platf::mem_type_e::videotoolbox</field>
    <field name="text">VideoToolbox</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::mem_type_e::cuda</field>
    <field name="url">common_8h.html#a004c913f8b3c00e100fd0b1c0fec42d6a39466fe22b062a34cfe09f3cc8c24868</field>
    <field name="keywords">cuda platf::mem_type_e::cuda cuda platf::mem_type_e::cuda</field>
    <field name="text">CUDA</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::mem_type_e::dxgi</field>
    <field name="url">common_8h.html#a004c913f8b3c00e100fd0b1c0fec42d6a53cababb5a17752b225265ef8ba7d581</field>
    <field name="keywords">dxgi platf::mem_type_e::dxgi dxgi platf::mem_type_e::dxgi</field>
    <field name="text">DXGI</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::mem_type_e::system</field>
    <field name="url">common_8h.html#a004c913f8b3c00e100fd0b1c0fec42d6a54b53072540eeeb8f8e9343e71f28176</field>
    <field name="keywords">system platf::mem_type_e::system system platf::mem_type_e::system</field>
    <field name="text">System memory</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::mem_type_e::vaapi</field>
    <field name="url">common_8h.html#a004c913f8b3c00e100fd0b1c0fec42d6a9bd39779e839d3bcb1773e5ed3f177df</field>
    <field name="keywords">vaapi platf::mem_type_e::vaapi vaapi platf::mem_type_e::vaapi</field>
    <field name="text">VAAPI</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::mem_type_e::unknown</field>
    <field name="url">common_8h.html#a004c913f8b3c00e100fd0b1c0fec42d6aad921d60486366258809553a3db49a4a</field>
    <field name="keywords">unknown platf::mem_type_e::unknown unknown platf::mem_type_e::unknown</field>
    <field name="text">Unknown</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::speaker::speaker_e</field>
    <field name="url">common_8h.html#a106830698d1a6ef85d78997c61ad653c</field>
    <field name="keywords">speaker_e platf::speaker::speaker_e platf::speaker</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::speaker::BACK_LEFT</field>
    <field name="url">common_8h.html#a106830698d1a6ef85d78997c61ad653ca10a605f9bf3ce26b5d35705582b76704</field>
    <field name="keywords">BACK_LEFT platf::speaker::BACK_LEFT platf::speaker BACK_LEFT platf::speaker::BACK_LEFT platf::speaker</field>
    <field name="text">Back left</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::speaker::LOW_FREQUENCY</field>
    <field name="url">common_8h.html#a106830698d1a6ef85d78997c61ad653ca13c12126df58c2ee59977f762df19afd</field>
    <field name="keywords">LOW_FREQUENCY platf::speaker::LOW_FREQUENCY platf::speaker LOW_FREQUENCY platf::speaker::LOW_FREQUENCY platf::speaker</field>
    <field name="text">Low frequency</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::speaker::SIDE_RIGHT</field>
    <field name="url">common_8h.html#a106830698d1a6ef85d78997c61ad653ca497ecf03616435203e1af109f7c7de72</field>
    <field name="keywords">SIDE_RIGHT platf::speaker::SIDE_RIGHT platf::speaker SIDE_RIGHT platf::speaker::SIDE_RIGHT platf::speaker</field>
    <field name="text">Side right</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::speaker::MAX_SPEAKERS</field>
    <field name="url">common_8h.html#a106830698d1a6ef85d78997c61ad653ca711787343d085d895d360cb6085fee42</field>
    <field name="keywords">MAX_SPEAKERS platf::speaker::MAX_SPEAKERS platf::speaker MAX_SPEAKERS platf::speaker::MAX_SPEAKERS platf::speaker</field>
    <field name="text">Maximum number of speakers</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::speaker::FRONT_LEFT</field>
    <field name="url">common_8h.html#a106830698d1a6ef85d78997c61ad653caab07647428b7ac357fb64cdcf18b789b</field>
    <field name="keywords">FRONT_LEFT platf::speaker::FRONT_LEFT platf::speaker FRONT_LEFT platf::speaker::FRONT_LEFT platf::speaker</field>
    <field name="text">Front left</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::speaker::SIDE_LEFT</field>
    <field name="url">common_8h.html#a106830698d1a6ef85d78997c61ad653cab928ab46c2c3e91a40e403326557be7b</field>
    <field name="keywords">SIDE_LEFT platf::speaker::SIDE_LEFT platf::speaker SIDE_LEFT platf::speaker::SIDE_LEFT platf::speaker</field>
    <field name="text">Side left</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::speaker::FRONT_CENTER</field>
    <field name="url">common_8h.html#a106830698d1a6ef85d78997c61ad653caca32efbb92e79a2fc09d784b28cdb673</field>
    <field name="keywords">FRONT_CENTER platf::speaker::FRONT_CENTER platf::speaker FRONT_CENTER platf::speaker::FRONT_CENTER platf::speaker</field>
    <field name="text">Front center</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::speaker::BACK_RIGHT</field>
    <field name="url">common_8h.html#a106830698d1a6ef85d78997c61ad653caeed6b3fe57c0eb24086bec8799199fcf</field>
    <field name="keywords">BACK_RIGHT platf::speaker::BACK_RIGHT platf::speaker BACK_RIGHT platf::speaker::BACK_RIGHT platf::speaker</field>
    <field name="text">Back right</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::speaker::FRONT_RIGHT</field>
    <field name="url">common_8h.html#a106830698d1a6ef85d78997c61ad653cafde1e22f4166b82072cb1197016c54ac</field>
    <field name="keywords">FRONT_RIGHT platf::speaker::FRONT_RIGHT platf::speaker FRONT_RIGHT platf::speaker::FRONT_RIGHT platf::speaker</field>
    <field name="text">Front right</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::supported_gamepads</field>
    <field name="args">(input_t *input)</field>
    <field name="url">common_8h.html#a156d03c673f6f5e04d5385bc1e6b8f24</field>
    <field name="keywords">supported_gamepads platf::supported_gamepads platf</field>
    <field name="text">Gets the supported gamepads for this platform backend This may be called prior to platf::input() input Pointer to the platform s input_t or nullptr Vector of gamepad options and status Gets the supported gamepads for this platform backend This may be called prior to platf::input() input Pointer to the platform s input_t or nullptr Vector of gamepad options and status Gets the supported gamepads for this platform backend This may be called prior to platf::input() input Pointer to the platform s input_t or nullptr Vector of gamepad options and status Gets the supported gamepads for this platform backend This may be called prior to platf::input() input Pointer to the platform s input_t or nullptr Vector of gamepad options and status</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::process_group_running</field>
    <field name="args">(std::uintptr_t native_handle)</field>
    <field name="url">common_8h.html#a15b226e5b1acf4c217a696334aa9d5ad</field>
    <field name="keywords">process_group_running platf::process_group_running platf</field>
    <field name="text">Check if a process group still has running children native_handle The native handle of the process group true if processes are still running Check if a process group still has running children native_handle The native handle of the process group true if processes are still running Check if a process group still has running children native_handle The native handle of the process group true if processes are still running Check if a process group still has running children native_handle The native handle of the process group true if processes are still running</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::publish::start</field>
    <field name="args">()</field>
    <field name="url">common_8h.html#a1b329aabced5dbd0ac7125f055636622</field>
    <field name="keywords">start platf::publish::start platf::publish</field>
    <field name="text">Main entry point for publication of our service on macOS This function initiates a connection to the macOS mDNS service and requests to register our Sunshine service Registration will occur asynchronously unless it fails immediately which is probably only possible if the host machine is misconfigured Either nullptr if the registration fails immediately or a uniqur_ptr deinit_t which will manage polling for a response from the mDNS service and then when deconstructed will deregister the service Main entry point for publication of our service on macOS This function initiates a connection to the macOS mDNS service and requests to register our Sunshine service Registration will occur asynchronously unless it fails immediately which is probably only possible if the host machine is misconfigured Either nullptr if the registration fails immediately or a uniqur_ptr deinit_t which will manage polling for a response from the mDNS service and then when deconstructed will deregister the service Main entry point for publication of our service on macOS This function initiates a connection to the macOS mDNS service and requests to register our Sunshine service Registration will occur asynchronously unless it fails immediately which is probably only possible if the host machine is misconfigured Either nullptr if the registration fails immediately or a uniqur_ptr deinit_t which will manage polling for a response from the mDNS service and then when deconstructed will deregister the service Main entry point for publication of our service on macOS This function initiates a connection to the macOS mDNS service and requests to register our Sunshine service Registration will occur asynchronously unless it fails immediately which is probably only possible if the host machine is misconfigured Either nullptr if the registration fails immediately or a uniqur_ptr deinit_t which will manage polling for a response from the mDNS service and then when deconstructed will deregister the service</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::display</field>
    <field name="args">(mem_type_e hwdevice_type, const std::string &amp;display_name, const video::config_t &amp;config)</field>
    <field name="url">common_8h.html#a347250dde6bad66c71aabd8b4abcdac3</field>
    <field name="keywords">display platf::display platf</field>
    <field name="text">Get the display_t instance for the given hwdevice_type If display_name is empty use the first monitor that s compatible you can find If you require to use this parameter in a separate thread make a copy of it display_name The name of the monitor that SHOULD be displayed config Stream configuration The display_t instance based on hwdevice_type Pick a display adapter and capture method hwdevice_type enables possible use of hardware encoder Get the display_t instance for the given hwdevice_type If display_name is empty use the first monitor that s compatible you can find If you require to use this parameter in a separate thread make a copy of it display_name The name of the monitor that SHOULD be displayed config Stream configuration The display_t instance based on hwdevice_type Pick a display adapter and capture method hwdevice_type enables possible use of hardware encoder Get the display_t instance for the given hwdevice_type If display_name is empty use the first monitor that s compatible you can find If you require to use this parameter in a separate thread make a copy of it display_name The name of the monitor that SHOULD be displayed config Stream configuration The display_t instance based on hwdevice_type Pick a display adapter and capture method hwdevice_type enables possible use of hardware encoder Get the display_t instance for the given hwdevice_type If display_name is empty use the first monitor that s compatible you can find If you require to use this parameter in a separate thread make a copy of it display_name The name of the monitor that SHOULD be displayed config Stream configuration The display_t instance based on hwdevice_type Pick a display adapter and capture method hwdevice_type enables possible use of hardware encoder</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::pix_fmt_e</field>
    <field name="url">common_8h.html#a402274738b013a8042caeff1891b6d77</field>
    <field name="keywords">pix_fmt_e platf::pix_fmt_e platf</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::pix_fmt_e::ayuv</field>
    <field name="url">common_8h.html#a402274738b013a8042caeff1891b6d77a03dbc96b4b5df8b894eedbf024f53c42</field>
    <field name="keywords">ayuv platf::pix_fmt_e::ayuv ayuv platf::pix_fmt_e::ayuv</field>
    <field name="text">AYUV</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::pix_fmt_e::yuv420p10</field>
    <field name="url">common_8h.html#a402274738b013a8042caeff1891b6d77a2e1a616f553bb15488ec49243ce1086e</field>
    <field name="keywords">yuv420p10 platf::pix_fmt_e::yuv420p10 yuv420p10 platf::pix_fmt_e::yuv420p10</field>
    <field name="text">YUV 4 2 0 1 0 bit</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::pix_fmt_e::y410</field>
    <field name="url">common_8h.html#a402274738b013a8042caeff1891b6d77a6c6c8d09c60019e9bbb47de2668c1e1a</field>
    <field name="keywords">y410 platf::pix_fmt_e::y410 y410 platf::pix_fmt_e::y410</field>
    <field name="text">Y410</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::pix_fmt_e::nv12</field>
    <field name="url">common_8h.html#a402274738b013a8042caeff1891b6d77a70d831c8685ddf61857a6d0e41eb5889</field>
    <field name="keywords">nv12 platf::pix_fmt_e::nv12 nv12 platf::pix_fmt_e::nv12</field>
    <field name="text">NV12</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::pix_fmt_e::yuv444p16</field>
    <field name="url">common_8h.html#a402274738b013a8042caeff1891b6d77aa1a0ece59bf710bef345f18aa3da0895</field>
    <field name="keywords">yuv444p16 platf::pix_fmt_e::yuv444p16 yuv444p16 platf::pix_fmt_e::yuv444p16</field>
    <field name="text">Planar 1 0 bit shifted to 1 6 bit YUV 4 4 4</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::pix_fmt_e::unknown</field>
    <field name="url">common_8h.html#a402274738b013a8042caeff1891b6d77aad921d60486366258809553a3db49a4a</field>
    <field name="keywords">unknown platf::pix_fmt_e::unknown unknown platf::pix_fmt_e::unknown</field>
    <field name="text">Unknown</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::pix_fmt_e::yuv420p</field>
    <field name="url">common_8h.html#a402274738b013a8042caeff1891b6d77ae60b539bc68b74c169a47c07ef79dc19</field>
    <field name="keywords">yuv420p platf::pix_fmt_e::yuv420p yuv420p platf::pix_fmt_e::yuv420p</field>
    <field name="text">YUV 4 2 0</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::pix_fmt_e::p010</field>
    <field name="url">common_8h.html#a402274738b013a8042caeff1891b6d77af691b5fd11954f285107d4dbf6ab53ed</field>
    <field name="keywords">p010 platf::pix_fmt_e::p010 p010 platf::pix_fmt_e::p010</field>
    <field name="text">P010</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::alloc_gamepad</field>
    <field name="args">(input_t &amp;input, const gamepad_id_t &amp;id, const gamepad_arrival_t &amp;metadata, feedback_queue_t feedback_queue)</field>
    <field name="url">common_8h.html#a40ca62129afba973c5ff19211352f4aa</field>
    <field name="keywords">alloc_gamepad platf::alloc_gamepad platf</field>
    <field name="text">Create a new virtual gamepad input The global input context id The gamepad ID metadata Controller metadata from client empty if none provided feedback_queue The queue for posting messages back to the client 0 on success Create a new virtual gamepad input The global input context id The gamepad ID metadata Controller metadata from client empty if none provided feedback_queue The queue for posting messages back to the client 0 on success Create a new virtual gamepad input The global input context id The gamepad ID metadata Controller metadata from client empty if none provided feedback_queue The queue for posting messages back to the client 0 on success Create a new virtual gamepad input The global input context id The gamepad ID metadata Controller metadata from client empty if none provided feedback_queue The queue for posting messages back to the client 0 on success</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::appdata</field>
    <field name="args">()</field>
    <field name="url">common_8h.html#a4fbb83cf4b899a1c1803a001a7afe9b6</field>
    <field name="keywords">appdata platf::appdata platf</field>
    <field name="text">Performs migration if necessary then returns the appdata directory This is used for the log directory so it cannot invoke Boost logging! The path of the appdata directory that should be used Performs migration if necessary then returns the appdata directory This is used for the log directory so it cannot invoke Boost logging! The path of the appdata directory that should be used Performs migration if necessary then returns the appdata directory This is used for the log directory so it cannot invoke Boost logging! The path of the appdata directory that should be used Performs migration if necessary then returns the appdata directory This is used for the log directory so it cannot invoke Boost logging! The path of the appdata directory that should be used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::request_process_group_exit</field>
    <field name="args">(std::uintptr_t native_handle)</field>
    <field name="url">common_8h.html#a50662722e41c039531c47613118ec6d4</field>
    <field name="keywords">request_process_group_exit platf::request_process_group_exit platf</field>
    <field name="text">Attempt to gracefully terminate a process group native_handle The native handle of the process group true if termination was successfully requested Attempt to gracefully terminate a process group native_handle The native handle of the process group true if termination was successfully requested Attempt to gracefully terminate a process group native_handle The native handle of the process group true if termination was successfully requested Attempt to gracefully terminate a process group native_handle The native handle of the process group true if termination was successfully requested</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::qos_data_type_e</field>
    <field name="url">common_8h.html#a57e50aa4703e278013300965d3ae93ee</field>
    <field name="keywords">qos_data_type_e platf::qos_data_type_e platf</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::qos_data_type_e::video</field>
    <field name="url">common_8h.html#a57e50aa4703e278013300965d3ae93eea421b47ffd946ca083b65cd668c6b17e6</field>
    <field name="keywords">video platf::qos_data_type_e::video video platf::qos_data_type_e::video</field>
    <field name="text">Video</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::qos_data_type_e::audio</field>
    <field name="url">common_8h.html#a57e50aa4703e278013300965d3ae93eeaa5ca0b5894324f8bb54bb9fffad29d1e</field>
    <field name="keywords">audio platf::qos_data_type_e::audio audio platf::qos_data_type_e::audio</field>
    <field name="text">Audio</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::create_high_precision_timer</field>
    <field name="args">()</field>
    <field name="url">common_8h.html#a598d8f6f866a48ae0fe51da20ddad424</field>
    <field name="keywords">create_high_precision_timer platf::create_high_precision_timer platf</field>
    <field name="text">Create platform-specific timer capable of high-precision sleep A unique pointer to timer Create platform-specific timer capable of high-precision sleep A unique pointer to timer Create platform-specific timer capable of high-precision sleep A unique pointer to timer Create platform-specific timer capable of high-precision sleep A unique pointer to timer</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">platf::speaker::map_surround51</field>
    <field name="args">[]</field>
    <field name="url">common_8h.html#a5e29131833845a4537f49d52af8a728c</field>
    <field name="keywords"></field>
    <field name="text">FRONT_LEFT FRONT_RIGHT FRONT_CENTER LOW_FREQUENCY BACK_LEFT BACK_RIGHT</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::get_mouse_loc</field>
    <field name="args">(input_t &amp;input)</field>
    <field name="url">common_8h.html#a6f5f968406dd6f95634aea26b2e379ff</field>
    <field name="keywords">get_mouse_loc platf::get_mouse_loc platf</field>
    <field name="text">Get the current mouse position on screen input The input_t instance to use Screen coordinates of the mouse Examples Get the current mouse position on screen input The input_t instance to use Screen coordinates of the mouse Examples Get the current mouse position on screen input The input_t instance to use Screen coordinates of the mouse Examples Get the current mouse position on screen input The input_t instance to use Screen coordinates of the mouse Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::allocate_client_input_context</field>
    <field name="args">(input_t &amp;input)</field>
    <field name="url">common_8h.html#a7294b014506cc9822c80f602fecc14c5</field>
    <field name="keywords">allocate_client_input_context platf::allocate_client_input_context platf</field>
    <field name="text">Allocate a context to store per-client input data Allocates a context to store per-client input data input The global input context A unique pointer to a per-client input data context Allocate a context to store per-client input data Allocates a context to store per-client input data input The global input context A unique pointer to a per-client input data context Allocate a context to store per-client input data Allocates a context to store per-client input data input The global input context A unique pointer to a per-client input data context Allocate a context to store per-client input data Allocates a context to store per-client input data input The global input context A unique pointer to a per-client input data context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::enable_socket_qos</field>
    <field name="args">(uintptr_t native_socket, boost::asio::ip::address &amp;address, uint16_t port, qos_data_type_e data_type, bool dscp_tagging)</field>
    <field name="url">common_8h.html#a7c9301b5a222caf9db82510718b39950</field>
    <field name="keywords">enable_socket_qos platf::enable_socket_qos platf</field>
    <field name="text">Enable QoS on the given socket for traffic to the specified destination Enables QoS on the given socket for traffic to the specified destination native_socket The native socket handle address The destination address for traffic sent on this socket port The destination port for traffic sent on this socket data_type The type of traffic sent on this socket dscp_tagging Specifies whether to enable DSCP tagging on outgoing traffic Enable QoS on the given socket for traffic to the specified destination Enables QoS on the given socket for traffic to the specified destination native_socket The native socket handle address The destination address for traffic sent on this socket port The destination port for traffic sent on this socket data_type The type of traffic sent on this socket dscp_tagging Specifies whether to enable DSCP tagging on outgoing traffic Enable QoS on the given socket for traffic to the specified destination Enables QoS on the given socket for traffic to the specified destination native_socket The native socket handle address The destination address for traffic sent on this socket port The destination port for traffic sent on this socket data_type The type of traffic sent on this socket dscp_tagging Specifies whether to enable DSCP tagging on outgoing traffic Enable QoS on the given socket for traffic to the specified destination Enables QoS on the given socket for traffic to the specified destination native_socket The native socket handle address The destination address for traffic sent on this socket port The destination port for traffic sent on this socket data_type The type of traffic sent on this socket dscp_tagging Specifies whether to enable DSCP tagging on outgoing traffic</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">platf::speaker::map_stereo</field>
    <field name="args">[]</field>
    <field name="url">common_8h.html#a7ea0491f170d93c5bc14403a68ef49aa</field>
    <field name="keywords"></field>
    <field name="text">FRONT_LEFT FRONT_RIGHT</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::open_url</field>
    <field name="args">(const std::string &amp;url)</field>
    <field name="url">common_8h.html#a7fdf254e44bf90390769741c1a3befe6</field>
    <field name="keywords">open_url platf::open_url platf</field>
    <field name="text">Open a url in the default web browser url The url to open Open a url in the default web browser url The url to open Open a url in the default web browser url The url to open Open a url in the default web browser url The url to open</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">platf::speaker::map_surround71</field>
    <field name="args">[]</field>
    <field name="url">common_8h.html#a81885885f083e86f0a55f7e72efe349e</field>
    <field name="keywords"></field>
    <field name="text">FRONT_LEFT FRONT_RIGHT FRONT_CENTER LOW_FREQUENCY BACK_LEFT BACK_RIGHT SIDE_LEFT SIDE_RIGHT</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::pen_update</field>
    <field name="args">(client_input_t *input, const touch_port_t &amp;touch_port, const pen_input_t &amp;pen)</field>
    <field name="url">common_8h.html#a8b691a3dc4fbd6d34aa7b8d69411cc0b</field>
    <field name="keywords">pen_update platf::pen_update platf</field>
    <field name="text">Send a pen event to the OS Sends a pen event to the OS input The client-specific input context touch_port The current viewport for translating to screen coordinates pen The pen event Send a pen event to the OS Sends a pen event to the OS input The client-specific input context touch_port The current viewport for translating to screen coordinates pen The pen event Send a pen event to the OS Sends a pen event to the OS input The client-specific input context touch_port The current viewport for translating to screen coordinates pen The pen event Send a pen event to the OS Sends a pen event to the OS input The client-specific input context touch_port The current viewport for translating to screen coordinates pen The pen event</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::gamepad_motion</field>
    <field name="args">(input_t &amp;input, const gamepad_motion_t &amp;motion)</field>
    <field name="url">common_8h.html#a8cde0deb6957485668b4bc4b2f6d751d</field>
    <field name="keywords">gamepad_motion platf::gamepad_motion platf</field>
    <field name="text">Send a gamepad motion event to the OS Sends a gamepad motion event to the OS input The global input context motion The motion event Send a gamepad motion event to the OS Sends a gamepad motion event to the OS input The global input context motion The motion event Send a gamepad motion event to the OS Sends a gamepad motion event to the OS input The global input context motion The motion event Send a gamepad motion event to the OS Sends a gamepad motion event to the OS input The global input context motion The motion event</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::needs_encoder_reenumeration</field>
    <field name="args">()</field>
    <field name="url">common_8h.html#a8cdea46467ee0239af9e7d345a115451</field>
    <field name="keywords">needs_encoder_reenumeration platf::needs_encoder_reenumeration platf</field>
    <field name="text">Check if GPUs/drivers have changed since the last call to this function Returns if GPUs/drivers have changed since the last call to this function true if a change has occurred or if it is unknown whether a change occurred Check if GPUs/drivers have changed since the last call to this function Returns if GPUs/drivers have changed since the last call to this function true if a change has occurred or if it is unknown whether a change occurred Check if GPUs/drivers have changed since the last call to this function Returns if GPUs/drivers have changed since the last call to this function true if a change has occurred or if it is unknown whether a change occurred Check if GPUs/drivers have changed since the last call to this function Returns if GPUs/drivers have changed since the last call to this function true if a change has occurred or if it is unknown whether a change occurred</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::gamepad_feedback_e</field>
    <field name="url">common_8h.html#a8e77ce36feac02af93ad309fe975baa5</field>
    <field name="keywords">gamepad_feedback_e platf::gamepad_feedback_e platf</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad_feedback_e::rumble</field>
    <field name="url">common_8h.html#a8e77ce36feac02af93ad309fe975baa5a7a0dd6e69d789844dc5cba983f34681c</field>
    <field name="keywords">rumble platf::gamepad_feedback_e::rumble rumble platf::gamepad_feedback_e::rumble</field>
    <field name="text">Rumble</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad_feedback_e::rumble_triggers</field>
    <field name="url">common_8h.html#a8e77ce36feac02af93ad309fe975baa5aa842a43c689995806eed1ddcf496d9d0</field>
    <field name="keywords">rumble_triggers platf::gamepad_feedback_e::rumble_triggers rumble_triggers platf::gamepad_feedback_e::rumble_triggers</field>
    <field name="text">Rumble triggers</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad_feedback_e::set_adaptive_triggers</field>
    <field name="url">common_8h.html#a8e77ce36feac02af93ad309fe975baa5aae84e2032e186524bb253fb1a40cd2c1</field>
    <field name="keywords">set_adaptive_triggers platf::gamepad_feedback_e::set_adaptive_triggers set_adaptive_triggers platf::gamepad_feedback_e::set_adaptive_triggers</field>
    <field name="text">Set adaptive triggers</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad_feedback_e::set_motion_event_state</field>
    <field name="url">common_8h.html#a8e77ce36feac02af93ad309fe975baa5ac34d47a8b43f88848adab1d40dda7c3a</field>
    <field name="keywords">set_motion_event_state platf::gamepad_feedback_e::set_motion_event_state set_motion_event_state platf::gamepad_feedback_e::set_motion_event_state</field>
    <field name="text">Set motion event state</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad_feedback_e::set_rgb_led</field>
    <field name="url">common_8h.html#a8e77ce36feac02af93ad309fe975baa5ae3536200e5bf30b64a9ac2f09e3860c5</field>
    <field name="keywords">set_rgb_led platf::gamepad_feedback_e::set_rgb_led set_rgb_led platf::gamepad_feedback_e::set_rgb_led</field>
    <field name="text">Set RGB LED</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::thread_priority_e</field>
    <field name="url">common_8h.html#a91a97c07811f26518aaabf52f55ed6f8</field>
    <field name="keywords">thread_priority_e platf::thread_priority_e platf</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::thread_priority_e::low</field>
    <field name="url">common_8h.html#a91a97c07811f26518aaabf52f55ed6f8a53cced8d281a1a0ace3cb6594daaa4f7</field>
    <field name="keywords">low platf::thread_priority_e::low low platf::thread_priority_e::low</field>
    <field name="text">Low priority</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::thread_priority_e::critical</field>
    <field name="url">common_8h.html#a91a97c07811f26518aaabf52f55ed6f8a7e85bcb66fb9a809d5ab4f62a8b8bea8</field>
    <field name="keywords">critical platf::thread_priority_e::critical critical platf::thread_priority_e::critical</field>
    <field name="text">Critical priority</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::thread_priority_e::high</field>
    <field name="url">common_8h.html#a91a97c07811f26518aaabf52f55ed6f8a8d966b2253a917086c8604959e152243</field>
    <field name="keywords">high platf::thread_priority_e::high high platf::thread_priority_e::high</field>
    <field name="text">High priority</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::thread_priority_e::normal</field>
    <field name="url">common_8h.html#a91a97c07811f26518aaabf52f55ed6f8afea087517c26fadd409bd4b9dc642555</field>
    <field name="keywords">normal platf::thread_priority_e::normal normal platf::thread_priority_e::normal</field>
    <field name="text">Normal priority</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::get_host_name</field>
    <field name="args">()</field>
    <field name="url">common_8h.html#a999b96fc8107067dae040e1feedcd9dd</field>
    <field name="keywords">get_host_name platf::get_host_name platf</field>
    <field name="text">Returns the current computer name in UTF-8 Computer name or a placeholder upon failure Returns the current computer name in UTF-8 Computer name or a placeholder upon failure Returns the current computer name in UTF-8 Computer name or a placeholder upon failure Returns the current computer name in UTF-8 Computer name or a placeholder upon failure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::gamepad_battery</field>
    <field name="args">(input_t &amp;input, const gamepad_battery_t &amp;battery)</field>
    <field name="url">common_8h.html#abdd53413d69b0b3eaacfdf7b0d8d342e</field>
    <field name="keywords">gamepad_battery platf::gamepad_battery platf</field>
    <field name="text">Send a gamepad battery event to the OS Sends a gamepad battery event to the OS input The global input context battery The battery event Send a gamepad battery event to the OS Sends a gamepad battery event to the OS input The global input context battery The battery event Send a gamepad battery event to the OS Sends a gamepad battery event to the OS input The global input context battery The battery event Send a gamepad battery event to the OS Sends a gamepad battery event to the OS input The global input context battery The battery event</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::get_capabilities</field>
    <field name="args">()</field>
    <field name="url">common_8h.html#ac6d03f56feda8a3bac98863894d78ce2</field>
    <field name="keywords">get_capabilities platf::get_capabilities platf</field>
    <field name="text">Get the supported platform capabilities to advertise to the client Returns the supported platform capabilities to advertise to the client Capability flags Get the supported platform capabilities to advertise to the client Returns the supported platform capabilities to advertise to the client Capability flags Get the supported platform capabilities to advertise to the client Returns the supported platform capabilities to advertise to the client Capability flags Get the supported platform capabilities to advertise to the client Returns the supported platform capabilities to advertise to the client Capability flags</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::gamepad_update</field>
    <field name="args">(input_t &amp;input, int nr, const gamepad_state_t &amp;gamepad_state)</field>
    <field name="url">common_8h.html#ad70d827c0b2da335d65df482f3ca18e5</field>
    <field name="keywords">gamepad_update platf::gamepad_update platf</field>
    <field name="text">Updates virtual gamepad with the provided gamepad state input The input context nr The gamepad index to update gamepad_state The gamepad button/axis state sent from the client Updates virtual gamepad with the provided gamepad state input The input context nr The gamepad index to update gamepad_state The gamepad button/axis state sent from the client Updates virtual gamepad with the provided gamepad state input The input context nr The gamepad index to update gamepad_state The gamepad button/axis state sent from the client Updates virtual gamepad with the provided gamepad state input The input context nr The gamepad index to update gamepad_state The gamepad button/axis state sent from the client</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">_CONVERT</field>
    <field name="args">(x)</field>
    <field name="url">common_8h.html#adfc7c5b350cd44594ef49e9eff65bab0</field>
    <field name="keywords"></field>
    <field name="text">pix_fmt_e::x x sv</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::set_env</field>
    <field name="args">(const std::string &amp;name, const std::string &amp;value)</field>
    <field name="url">common_8h.html#adff9dd14d310da57cb60b1a946d10758</field>
    <field name="keywords">set_env platf::set_env platf</field>
    <field name="text">Set an environment variable name The name of the environment variable value The value to set the environment variable to 0 on success non-zero on failure Set an environment variable name The name of the environment variable value The value to set the environment variable to 0 on success non-zero on failure Set an environment variable name The name of the environment variable value The value to set the environment variable to 0 on success non-zero on failure Set an environment variable name The name of the environment variable value The value to set the environment variable to 0 on success non-zero on failure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::gamepad_touch</field>
    <field name="args">(input_t &amp;input, const gamepad_touch_t &amp;touch)</field>
    <field name="url">common_8h.html#ae01bf59251f3a780fc483c9809d6f872</field>
    <field name="keywords">gamepad_touch platf::gamepad_touch platf</field>
    <field name="text">Send a gamepad touch event to the OS Sends a gamepad touch event to the OS input The global input context touch The touch event Send a gamepad touch event to the OS Sends a gamepad touch event to the OS input The global input context touch The touch event Send a gamepad touch event to the OS Sends a gamepad touch event to the OS input The global input context touch The touch event Send a gamepad touch event to the OS Sends a gamepad touch event to the OS input The global input context touch The touch event</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::touch_update</field>
    <field name="args">(client_input_t *input, const touch_port_t &amp;touch_port, const touch_input_t &amp;touch)</field>
    <field name="url">common_8h.html#ae999694af675698f6129736857d47cca</field>
    <field name="keywords">touch_update platf::touch_update platf</field>
    <field name="text">Send a touch event to the OS Sends a touch event to the OS input The client-specific input context touch_port The current viewport for translating to screen coordinates touch The touch event Send a touch event to the OS Sends a touch event to the OS input The client-specific input context touch_port The current viewport for translating to screen coordinates touch The touch event Send a touch event to the OS Sends a touch event to the OS input The client-specific input context touch_port The current viewport for translating to screen coordinates touch The touch event Send a touch event to the OS Sends a touch event to the OS input The client-specific input context touch_port The current viewport for translating to screen coordinates touch The touch event</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::capture_e</field>
    <field name="url">common_8h.html#af5f90a441809f80482b9dafef3b3febe</field>
    <field name="keywords">capture_e platf::capture_e platf</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::capture_e::ok</field>
    <field name="url">common_8h.html#af5f90a441809f80482b9dafef3b3febea444bcb3a3fcf8389296c49467f27e1d6</field>
    <field name="keywords">ok platf::capture_e::ok ok platf::capture_e::ok</field>
    <field name="text">Success</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::capture_e::timeout</field>
    <field name="url">common_8h.html#af5f90a441809f80482b9dafef3b3febea90272dda245ae1fb3cf197e91a8689dc</field>
    <field name="keywords">timeout platf::capture_e::timeout timeout platf::capture_e::timeout</field>
    <field name="text">Timeout</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::capture_e::reinit</field>
    <field name="url">common_8h.html#af5f90a441809f80482b9dafef3b3febeaa959eb478b2a954e344e721cbfa6c15c</field>
    <field name="keywords">reinit platf::capture_e::reinit reinit platf::capture_e::reinit</field>
    <field name="text">Need to reinitialize</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::capture_e::error</field>
    <field name="url">common_8h.html#af5f90a441809f80482b9dafef3b3febeacb5e100e5a9a3e7f6d1fd97512215282</field>
    <field name="keywords">error platf::capture_e::error error platf::capture_e::error</field>
    <field name="text">Error</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::capture_e::interrupted</field>
    <field name="url">common_8h.html#af5f90a441809f80482b9dafef3b3febeafadb76763385627e57ec386c9b6038f0</field>
    <field name="keywords">interrupted platf::capture_e::interrupted interrupted platf::capture_e::interrupted</field>
    <field name="text">Capture was interrupted</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::unset_env</field>
    <field name="args">(const std::string &amp;name)</field>
    <field name="url">common_8h.html#afe7959a469a8a2521010b116f72b879b</field>
    <field name="keywords">unset_env platf::unset_env platf</field>
    <field name="text">Unset an environment variable name The name of the environment variable 0 on success non-zero on failure Unset an environment variable name The name of the environment variable 0 on success non-zero on failure Unset an environment variable name The name of the environment variable 0 on success non-zero on failure Unset an environment variable name The name of the environment variable 0 on success non-zero on failure</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">std::literals sockaddr AVFrame AVBufferRef AVHWFramesContext AVCodecContext AVDictionary boost asio ip address filesystem path process::inline v1 child group</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00059</field>
    <field name="keywords"></field>
    <field name="text">basic_environment basic_environment&lt;char&gt; environment video config_t nvenc nvenc_base platf MAX_GAMEPADS std::uint32_t DPAD_UP std::uint32_t DPAD_DOWN std::uint32_t DPAD_LEFT std::uint32_t DPAD_RIGHT std::uint32_t START std::uint32_t BACK std::uint32_t LEFT_STICK std::uint32_t RIGHT_STICK std::uint32_t LEFT_BUTTON std::uint32_t RIGHT_BUTTON std::uint32_t HOME std::uint32_t A std::uint32_t B std::uint32_t X std::uint32_t Y std::uint32_t PADDLE1 std::uint32_t PADDLE2 std::uint32_t PADDLE3 std::uint32_t PADDLE4 std::uint32_t TOUCHPAD_BUTTON std::uint32_t MISC_BUTTON</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00098</field>
    <field name="keywords"></field>
    <field name="text">supported_gamepad_t std::string name is_enabled std::string reason_disabled</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00104</field>
    <field name="keywords"></field>
    <field name="text">gamepad_feedback_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00105</field>
    <field name="keywords"></field>
    <field name="text">rumble</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00106</field>
    <field name="keywords"></field>
    <field name="text">rumble_triggers</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00107</field>
    <field name="keywords"></field>
    <field name="text">set_motion_event_state</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00108</field>
    <field name="keywords"></field>
    <field name="text">set_rgb_led</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00109</field>
    <field name="keywords"></field>
    <field name="text">set_adaptive_triggers</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00112</field>
    <field name="keywords"></field>
    <field name="text">gamepad_feedback_msg_t gamepad_feedback_msg_t make_rumble std::uint16_t std::uint16_t lowfreq std::uint16_t highfreq gamepad_feedback_msg_t msg msg type gamepad_feedback_e::rumble msg id id msg data rumble lowfreq highfreq msg gamepad_feedback_msg_t make_rumble_triggers std::uint16_t std::uint16_t left std::uint16_t right gamepad_feedback_msg_t msg msg type gamepad_feedback_e::rumble_triggers msg id id msg data rumble_triggers left right msg gamepad_feedback_msg_t make_motion_event_state std::uint16_t std::uint8_t motion_type std::uint16_t report_rate gamepad_feedback_msg_t msg msg type gamepad_feedback_e::set_motion_event_state msg id id msg data motion_event_state motion_type motion_type msg data motion_event_state report_rate report_rate msg gamepad_feedback_msg_t make_rgb_led std::uint16_t std::uint8_t r std::uint8_t g std::uint8_t b gamepad_feedback_msg_t msg msg type gamepad_feedback_e::set_rgb_led msg id id msg data rgb_led r g b msg gamepad_feedback_msg_t make_adaptive_triggers std::uint16_t uint8_t event_flags uint8_t type_left uint8_t type_right std::array&lt;uint8_t, 10&gt; left std::array&lt;uint8_t, 10&gt; right gamepad_feedback_msg_t msg msg type gamepad_feedback_e::set_adaptive_triggers msg id id msg data adaptive_triggers event_flags event_flags type_left type_left type_right type_right left left right right msg gamepad_feedback_e type std::uint16_t id std::uint16_t lowfreq std::uint16_t highfreq rumble std::uint16_t left_trigger std::uint16_t right_trigger rumble_triggers std::uint16_t report_rate std::uint8_t motion_type motion_event_state std::uint8_t r std::uint8_t g std::uint8_t b rgb_led uint16_t controllerNumber uint8_t event_flags uint8_t type_left uint8_t type_right std::array&lt;uint8_t, 10&gt; left std::array&lt;uint8_t, 10&gt; right adaptive_triggers data feedback_queue_t safe::mail_raw_t::queue_t&lt;gamepad_feedback_msg_t&gt; speaker</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00193</field>
    <field name="keywords"></field>
    <field name="text">speaker_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00194</field>
    <field name="keywords"></field>
    <field name="text">FRONT_LEFT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00195</field>
    <field name="keywords"></field>
    <field name="text">FRONT_RIGHT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00196</field>
    <field name="keywords"></field>
    <field name="text">FRONT_CENTER</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00197</field>
    <field name="keywords"></field>
    <field name="text">LOW_FREQUENCY</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00198</field>
    <field name="keywords"></field>
    <field name="text">BACK_LEFT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00199</field>
    <field name="keywords"></field>
    <field name="text">BACK_RIGHT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00200</field>
    <field name="keywords"></field>
    <field name="text">SIDE_LEFT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00201</field>
    <field name="keywords"></field>
    <field name="text">SIDE_RIGHT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00202</field>
    <field name="keywords"></field>
    <field name="text">MAX_SPEAKERS std::uint8_t map_stereo FRONT_LEFT FRONT_RIGHT std::uint8_t map_surround51 FRONT_LEFT FRONT_RIGHT FRONT_CENTER LOW_FREQUENCY BACK_LEFT BACK_RIGHT std::uint8_t map_surround71 platf::speaker::FRONT_LEFT platf::speaker::FRONT_RIGHT platf::speaker::FRONT_CENTER platf::speaker::LOW_FREQUENCY platf::speaker::BACK_LEFT platf::speaker::BACK_RIGHT platf::speaker::SIDE_LEFT platf::speaker::SIDE_RIGHT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00229</field>
    <field name="keywords"></field>
    <field name="text">mem_type_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00230</field>
    <field name="keywords"></field>
    <field name="text">system</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00231</field>
    <field name="keywords"></field>
    <field name="text">vaapi</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00232</field>
    <field name="keywords"></field>
    <field name="text">dxgi</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00233</field>
    <field name="keywords"></field>
    <field name="text">cuda</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00234</field>
    <field name="keywords"></field>
    <field name="text">videotoolbox</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00235</field>
    <field name="keywords"></field>
    <field name="text">unknown</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00238</field>
    <field name="keywords"></field>
    <field name="text">pix_fmt_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00239</field>
    <field name="keywords"></field>
    <field name="text">yuv420p</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00240</field>
    <field name="keywords"></field>
    <field name="text">yuv420p10</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00241</field>
    <field name="keywords"></field>
    <field name="text">nv12</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00242</field>
    <field name="keywords"></field>
    <field name="text">p010</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00243</field>
    <field name="keywords"></field>
    <field name="text">ayuv</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00244</field>
    <field name="keywords"></field>
    <field name="text">yuv444p16</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00245</field>
    <field name="keywords"></field>
    <field name="text">y410</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00246</field>
    <field name="keywords"></field>
    <field name="text">unknown std::string_view from_pix_fmt pix_fmt_e pix_fmt std::literals pix_fmt _CONVERT yuv420p _CONVERT yuv420p10 _CONVERT nv12 _CONVERT p010 _CONVERT ayuv _CONVERT yuv444p16 _CONVERT y410 _CONVERT unknown sv</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00270</field>
    <field name="keywords"></field>
    <field name="text">touch_port_t offset_x offset_y width height platform_caps uint32_t caps_t caps_t pen_touch caps_t controller_touch</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00283</field>
    <field name="keywords"></field>
    <field name="text">gamepad_state_t std::uint32_t buttonFlags std::uint8_t lt std::uint8_t rt std::int16_t lsX std::int16_t lsY std::int16_t rsX std::int16_t rsY</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00293</field>
    <field name="keywords"></field>
    <field name="text">gamepad_id_t globalIndex std::uint8_t clientRelativeIndex</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00304</field>
    <field name="keywords"></field>
    <field name="text">gamepad_arrival_t std::uint8_t type std::uint16_t capabilities std::uint32_t supportedButtons</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00310</field>
    <field name="keywords"></field>
    <field name="text">gamepad_touch_t gamepad_id_t id std::uint8_t eventType std::uint32_t pointerId x y pressure</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00319</field>
    <field name="keywords"></field>
    <field name="text">gamepad_motion_t gamepad_id_t id std::uint8_t motionType x y z</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00330</field>
    <field name="keywords"></field>
    <field name="text">gamepad_battery_t gamepad_id_t id std::uint8_t state std::uint8_t percentage</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00336</field>
    <field name="keywords"></field>
    <field name="text">touch_input_t std::uint8_t eventType std::uint16_t rotation std::uint32_t pointerId x y pressureOrDistance contactAreaMajor contactAreaMinor</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00347</field>
    <field name="keywords"></field>
    <field name="text">pen_input_t std::uint8_t eventType std::uint8_t toolType std::uint8_t penButtons std::uint8_t tilt std::uint16_t rotation x y pressureOrDistance contactAreaMajor contactAreaMinor</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00360</field>
    <field name="keywords"></field>
    <field name="text">deinit_t deinit_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00365</field>
    <field name="keywords"></field>
    <field name="text">img_t std::enable_shared_from_this img_t img_t img_t img_t img_t img_t operator= img_t img_t operator= img_t std::uint8_t data std::int32_t width std::int32_t height std::int32_t pixel_pitch std::int32_t row_pitch std::optional&lt;std::chrono::steady_clock::time_point&gt; frame_timestamp</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00385</field>
    <field name="keywords"></field>
    <field name="text">sink_t std::string host</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00391</field>
    <field name="keywords"></field>
    <field name="text">null_t std::string stereo std::string surround51 std::string surround71 std::optional&lt;null_t&gt; null</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00400</field>
    <field name="keywords"></field>
    <field name="text">encode_device_t encode_device_t convert platf::img_t img video::sunshine_colorspace_t colorspace</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00408</field>
    <field name="keywords"></field>
    <field name="text">avcodec_encode_device_t encode_device_t data AVFrame frame convert platf::img_t img apply_colorspace</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00423</field>
    <field name="keywords"></field>
    <field name="text">set_frame AVFrame frame AVBufferRef hw_frames_ctx BOOST_LOG error</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00432</field>
    <field name="keywords"></field>
    <field name="text">init_hwframes AVHWFramesContext frames</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00438</field>
    <field name="keywords"></field>
    <field name="text">init_codec_options AVCodecContext ctx AVDictionary options</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00444</field>
    <field name="keywords"></field>
    <field name="text">prepare_to_derive_context hw_device_type</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00449</field>
    <field name="keywords"></field>
    <field name="text">nvenc_encode_device_t encode_device_t init_encoder video::config_t client_config video::sunshine_colorspace_t colorspace nvenc::nvenc_base nvenc</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00455</field>
    <field name="keywords"></field>
    <field name="text">capture_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00456</field>
    <field name="keywords"></field>
    <field name="text">ok</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00457</field>
    <field name="keywords"></field>
    <field name="text">reinit</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00458</field>
    <field name="keywords"></field>
    <field name="text">timeout</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00459</field>
    <field name="keywords"></field>
    <field name="text">interrupted</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00460</field>
    <field name="keywords"></field>
    <field name="text">error</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00463</field>
    <field name="keywords"></field>
    <field name="text">display_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00472</field>
    <field name="keywords"></field>
    <field name="text">push_captured_image_cb_t std::function bool std::shared_ptr&lt;img_t&gt; img frame_captured</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00481</field>
    <field name="keywords"></field>
    <field name="text">pull_free_image_cb_t std::function bool std::shared_ptr&lt;img_t&gt; img_out display_t noexcept offset_x offset_y</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00500</field>
    <field name="keywords"></field>
    <field name="text">capture_e capture push_captured_image_cb_t push_captured_image_cb pull_free_image_cb_t pull_free_image_cb cursor std::shared_ptr&lt;img_t&gt; alloc_img dummy_img img_t img std::unique_ptr&lt;avcodec_encode_device_t&gt; make_avcodec_encode_device pix_fmt_e pix_fmt std::unique_ptr&lt;nvenc_encode_device_t&gt; make_nvenc_encode_device pix_fmt_e pix_fmt is_hdr get_hdr_metadata SS_HDR_METADATA metadata std::memset metadata metadata</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00529</field>
    <field name="keywords"></field>
    <field name="text">is_codec_supported std::string_view name const ::video::config_t config display_t offset_x offset_y env_width env_height width height logging::time_delta_periodic_logger sleep_overshoot_logger debug</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00546</field>
    <field name="keywords"></field>
    <field name="text">mic_t capture_e sample std::vector&lt;float&gt; frame_buffer mic_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00553</field>
    <field name="keywords"></field>
    <field name="text">audio_control_t set_sink std::string sink std::unique_ptr&lt;mic_t&gt; microphone std::uint8_t mapping channels std::uint32_t sample_rate std::uint32_t frame_size</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00564</field>
    <field name="keywords"></field>
    <field name="text">is_sink_available std::string sink std::optional&lt;sink_t&gt; sink_info audio_control_t freeInput input_t util::safe_ptr&lt;void, freeInput&gt; std::filesystem::path appdata std::string get_mac_address std::string_view address std::string from_sockaddr sockaddr std::pair&lt;std::uint16_t, std::string&gt; from_sockaddr_ex sockaddr std::unique_ptr&lt;audio_control_t&gt; audio_control std::shared_ptr&lt;display_t&gt; display mem_type_e hwdevice_type std::string display_name video::config_t config std::vector&lt;std::string&gt; display_names mem_type_e hwdevice_type needs_encoder_reenumeration boost::process::v1::child run_command elevated interactive std::string cmd boost::filesystem::path working_dir boost::process::v1::environment env FILE file std::error_code ec boost::process::v1::group group</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00605</field>
    <field name="keywords"></field>
    <field name="text">thread_priority_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00606</field>
    <field name="keywords"></field>
    <field name="text">low</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00607</field>
    <field name="keywords"></field>
    <field name="text">normal</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00608</field>
    <field name="keywords"></field>
    <field name="text">high</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00609</field>
    <field name="keywords"></field>
    <field name="text">critical adjust_thread_priority thread_priority_e priority streaming_will_start streaming_will_stop restart set_env std::string name std::string value unset_env std::string name</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00634</field>
    <field name="keywords"></field>
    <field name="text">buffer_descriptor_t buffer size buffer_descriptor_t buffer size buffer buffer size size buffer_descriptor_t buffer size</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00650</field>
    <field name="keywords"></field>
    <field name="text">batched_send_info_t headers header_size std::vector&lt;buffer_descriptor_t&gt; payload_buffers payload_size block_offset block_count std::uintptr_t native_socket boost::asio::ip::address target_address uint16_t target_port boost::asio::ip::address source_address</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00678</field>
    <field name="keywords"></field>
    <field name="text">buffer_descriptor_t buffer_for_payload_offset ptrdiff_t offset desc payload_buffers offset desc size desc buffer offset desc size offset offset desc size send_batch batched_send_info_t send_info</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00695</field>
    <field name="keywords"></field>
    <field name="text">send_info_t header header_size payload payload_size std::uintptr_t native_socket boost::asio::ip::address target_address uint16_t target_port boost::asio::ip::address source_address send send_info_t send_info</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00709</field>
    <field name="keywords"></field>
    <field name="text">qos_data_type_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00710</field>
    <field name="keywords"></field>
    <field name="text">audio</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00711</field>
    <field name="keywords"></field>
    <field name="text">video std::unique_ptr&lt;deinit_t&gt; enable_socket_qos uintptr_t native_socket boost::asio::ip::address address uint16_t port qos_data_type_e data_type dscp_tagging open_url std::string url request_process_group_exit std::uintptr_t native_handle process_group_running std::uintptr_t native_handle input_t input util::point_t get_mouse_loc input_t input move_mouse input_t input deltaX deltaY abs_mouse input_t input touch_port_t touch_port x y button_mouse input_t input button release scroll input_t input distance hscroll input_t input distance keyboard_update input_t input uint16_t modcode release uint8_t flags gamepad_update input_t input nr gamepad_state_t gamepad_state unicode input_t input utf8 size deinit_t client_input_t std::unique_ptr&lt;client_input_t&gt; allocate_client_input_context input_t input touch_update client_input_t input touch_port_t touch_port touch_input_t touch pen_update client_input_t input touch_port_t touch_port pen_input_t pen gamepad_touch input_t input gamepad_touch_t touch gamepad_motion input_t input gamepad_motion_t motion gamepad_battery input_t input gamepad_battery_t battery alloc_gamepad input_t input gamepad_id_t gamepad_arrival_t metadata feedback_queue_t feedback_queue free_gamepad input_t input nr platform_caps::caps_t get_capabilities publish nodiscard std::unique_ptr&lt;deinit_t&gt; start nodiscard std::unique_ptr&lt;deinit_t&gt; init std::string platf::get_host_name std::vector&lt;supported_gamepad_t&gt; platf::supported_gamepads input_t input</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00849</field>
    <field name="keywords"></field>
    <field name="text">high_precision_timer boost::noncopyable high_precision_timer</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00856</field>
    <field name="keywords"></field>
    <field name="text">sleep_for std::chrono::nanoseconds duration</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">common.h</field>
    <field name="url">common_8h_source.html#l00862</field>
    <field name="keywords"></field>
    <field name="text">bool std::unique_ptr&lt;high_precision_timer&gt; create_high_precision_timer</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">config.cpp</field>
    <field name="url">config_8cpp.html</field>
    <field name="keywords">config.cpp</field>
    <field name="text">Definitions for the configuration of Sunshine</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::amd::quality_av1_e</field>
    <field name="url">config_8cpp.html#a0db910a14d9d4ece35ef7652b0897052</field>
    <field name="keywords">quality_av1_e config::amd::quality_av1_e config::amd</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::quality_av1_e::balanced</field>
    <field name="url">config_8cpp.html#a0db910a14d9d4ece35ef7652b0897052ab336df698d12ac8e54570ba6ea2679f0</field>
    <field name="keywords">balanced config::amd::quality_av1_e::balanced balanced config::amd::quality_av1_e::balanced</field>
    <field name="text">Balanced preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::quality_av1_e::speed</field>
    <field name="url">config_8cpp.html#a0db910a14d9d4ece35ef7652b0897052ace4ef3ec98443ed10da505114b58f153</field>
    <field name="keywords">speed config::amd::quality_av1_e::speed speed config::amd::quality_av1_e::speed</field>
    <field name="text">Speed preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::quality_av1_e::quality</field>
    <field name="url">config_8cpp.html#a0db910a14d9d4ece35ef7652b0897052ad66636b253cb346dbb6240e30def3618</field>
    <field name="keywords">quality config::amd::quality_av1_e::quality quality config::amd::quality_av1_e::quality</field>
    <field name="text">Quality preset</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::amd::usage_h264_e</field>
    <field name="url">config_8cpp.html#a17d192fc2b83b099fdc4731c99a2184a</field>
    <field name="keywords">usage_h264_e config::amd::usage_h264_e config::amd</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_h264_e::transcoding</field>
    <field name="url">config_8cpp.html#a17d192fc2b83b099fdc4731c99a2184aa2e7888a81451f1288996df77ccf7d4bc</field>
    <field name="keywords">transcoding config::amd::usage_h264_e::transcoding transcoding config::amd::usage_h264_e::transcoding</field>
    <field name="text">Transcoding preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_h264_e::webcam</field>
    <field name="url">config_8cpp.html#a17d192fc2b83b099fdc4731c99a2184aa86722fdb4bc3199d48c363a6f922a3c7</field>
    <field name="keywords">webcam config::amd::usage_h264_e::webcam webcam config::amd::usage_h264_e::webcam</field>
    <field name="text">Webcam preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_h264_e::lowlatency</field>
    <field name="url">config_8cpp.html#a17d192fc2b83b099fdc4731c99a2184aa9993f34c252aef6541037801d066e9b6</field>
    <field name="keywords">lowlatency config::amd::usage_h264_e::lowlatency lowlatency config::amd::usage_h264_e::lowlatency</field>
    <field name="text">Low latency preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_h264_e::ultralowlatency</field>
    <field name="url">config_8cpp.html#a17d192fc2b83b099fdc4731c99a2184aab8f3dd1f430f86fb4a5e39f9c30ddecf</field>
    <field name="keywords">ultralowlatency config::amd::usage_h264_e::ultralowlatency ultralowlatency config::amd::usage_h264_e::ultralowlatency</field>
    <field name="text">Ultra low latency preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_h264_e::lowlatency_high_quality</field>
    <field name="url">config_8cpp.html#a17d192fc2b83b099fdc4731c99a2184aabcefcb39d267b37be5f159d9ffb1e105</field>
    <field name="keywords">lowlatency_high_quality config::amd::usage_h264_e::lowlatency_high_quality lowlatency_high_quality config::amd::usage_h264_e::lowlatency_high_quality</field>
    <field name="text">Low latency high quality preset</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::amd::quality_hevc_e</field>
    <field name="url">config_8cpp.html#a1afde3cafda8849c3200b6fd2b88e72a</field>
    <field name="keywords">quality_hevc_e config::amd::quality_hevc_e config::amd</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::quality_hevc_e::balanced</field>
    <field name="url">config_8cpp.html#a1afde3cafda8849c3200b6fd2b88e72aab336df698d12ac8e54570ba6ea2679f0</field>
    <field name="keywords">balanced config::amd::quality_hevc_e::balanced balanced config::amd::quality_hevc_e::balanced</field>
    <field name="text">Balanced preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::quality_hevc_e::speed</field>
    <field name="url">config_8cpp.html#a1afde3cafda8849c3200b6fd2b88e72aace4ef3ec98443ed10da505114b58f153</field>
    <field name="keywords">speed config::amd::quality_hevc_e::speed speed config::amd::quality_hevc_e::speed</field>
    <field name="text">Speed preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::quality_hevc_e::quality</field>
    <field name="url">config_8cpp.html#a1afde3cafda8849c3200b6fd2b88e72aad66636b253cb346dbb6240e30def3618</field>
    <field name="keywords">quality config::amd::quality_hevc_e::quality quality config::amd::quality_hevc_e::quality</field>
    <field name="text">Quality preset</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::amd::quality_h264_e</field>
    <field name="url">config_8cpp.html#a23a2fd94cd71f088a9d04284dc6c2211</field>
    <field name="keywords">quality_h264_e config::amd::quality_h264_e config::amd</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::quality_h264_e::balanced</field>
    <field name="url">config_8cpp.html#a23a2fd94cd71f088a9d04284dc6c2211ab336df698d12ac8e54570ba6ea2679f0</field>
    <field name="keywords">balanced config::amd::quality_h264_e::balanced balanced config::amd::quality_h264_e::balanced</field>
    <field name="text">Balanced preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::quality_h264_e::speed</field>
    <field name="url">config_8cpp.html#a23a2fd94cd71f088a9d04284dc6c2211ace4ef3ec98443ed10da505114b58f153</field>
    <field name="keywords">speed config::amd::quality_h264_e::speed speed config::amd::quality_h264_e::speed</field>
    <field name="text">Speed preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::quality_h264_e::quality</field>
    <field name="url">config_8cpp.html#a23a2fd94cd71f088a9d04284dc6c2211ad66636b253cb346dbb6240e30def3618</field>
    <field name="keywords">quality config::amd::quality_h264_e::quality quality config::amd::quality_h264_e::quality</field>
    <field name="text">Quality preset</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">_CONVERT_2_ARG_</field>
    <field name="args">(str, val)</field>
    <field name="url">config_8cpp.html#a26273aefd720f9031374440fc254d27a</field>
    <field name="keywords"></field>
    <field name="text">value str sv video_t::dd_t::resolution_option_e::val value str sv video_t::dd_t::refresh_rate_option_e::val value str sv video_t::dd_t::hdr_option_e::val</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::qsv::preset_e</field>
    <field name="url">config_8cpp.html#a3dda7a82d7579b225a36058a901075fe</field>
    <field name="keywords">preset_e config::qsv::preset_e config::qsv</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::qsv::veryslow</field>
    <field name="url">config_8cpp.html#a3dda7a82d7579b225a36058a901075fea0ef1baf56fb5561f944ea7f75eb25899</field>
    <field name="keywords">veryslow config::qsv::veryslow config::qsv veryslow config::qsv::veryslow config::qsv</field>
    <field name="text">veryslow preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::qsv::slow</field>
    <field name="url">config_8cpp.html#a3dda7a82d7579b225a36058a901075fea66ccc526823fc9f31efbab9fabc97a60</field>
    <field name="keywords">slow config::qsv::slow config::qsv slow config::qsv::slow config::qsv</field>
    <field name="text">slow preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::qsv::veryfast</field>
    <field name="url">config_8cpp.html#a3dda7a82d7579b225a36058a901075fea683e0a18e0678d47585c0fa798dcb3b3</field>
    <field name="keywords">veryfast config::qsv::veryfast config::qsv veryfast config::qsv::veryfast config::qsv</field>
    <field name="text">veryfast preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::qsv::fast</field>
    <field name="url">config_8cpp.html#a3dda7a82d7579b225a36058a901075fea7c4e4e5d08cbabb1610a054ff39cf2ab</field>
    <field name="keywords">fast config::qsv::fast config::qsv fast config::qsv::fast config::qsv</field>
    <field name="text">fast preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::qsv::faster</field>
    <field name="url">config_8cpp.html#a3dda7a82d7579b225a36058a901075fea9197772da1a1b123f4bea2b0e0eb03e3</field>
    <field name="keywords">faster config::qsv::faster config::qsv faster config::qsv::faster config::qsv</field>
    <field name="text">faster preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::qsv::slower</field>
    <field name="url">config_8cpp.html#a3dda7a82d7579b225a36058a901075feac17501a99280f345eb43ff5c7885df5d</field>
    <field name="keywords">slower config::qsv::slower config::qsv slower config::qsv::slower config::qsv</field>
    <field name="text">slower preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::qsv::medium</field>
    <field name="url">config_8cpp.html#a3dda7a82d7579b225a36058a901075feaf43f51bf5499515dea5b26b17be27d56</field>
    <field name="keywords">medium config::qsv::medium config::qsv medium config::qsv::medium config::qsv</field>
    <field name="text">medium preset</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::amd::rc_h264_e</field>
    <field name="url">config_8cpp.html#a3fb53b8f0ec6c328f84b4b8b9eeaede8</field>
    <field name="keywords">rc_h264_e config::amd::rc_h264_e config::amd</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_h264_e::vbr_peak</field>
    <field name="url">config_8cpp.html#a3fb53b8f0ec6c328f84b4b8b9eeaede8a3fab1a1d2ec09921898d7c3cd4d294e4</field>
    <field name="keywords">vbr_peak config::amd::rc_h264_e::vbr_peak vbr_peak config::amd::rc_h264_e::vbr_peak</field>
    <field name="text">VBR with peak constraints</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_h264_e::vbr_latency</field>
    <field name="url">config_8cpp.html#a3fb53b8f0ec6c328f84b4b8b9eeaede8a55d4a66b980e6c50a5e839234d2aaa04</field>
    <field name="keywords">vbr_latency config::amd::rc_h264_e::vbr_latency vbr_latency config::amd::rc_h264_e::vbr_latency</field>
    <field name="text">VBR with latency constraints</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_h264_e::cbr</field>
    <field name="url">config_8cpp.html#a3fb53b8f0ec6c328f84b4b8b9eeaede8aa8186307f5bbc554b722505f23cfc81e</field>
    <field name="keywords">cbr config::amd::rc_h264_e::cbr cbr config::amd::rc_h264_e::cbr</field>
    <field name="text">CBR</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_h264_e::cqp</field>
    <field name="url">config_8cpp.html#a3fb53b8f0ec6c328f84b4b8b9eeaede8ad6acc9f1ba4b28b91ea9de99a0ee53d7</field>
    <field name="keywords">cqp config::amd::rc_h264_e::cqp cqp config::amd::rc_h264_e::cqp</field>
    <field name="text">CQP</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::nvhttp</field>
    <field name="url">config_8cpp.html#a4d2b7d796d4c4d41d171058ad91e1111</field>
    <field name="keywords"></field>
    <field name="text">platf::get_host_name s</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::amd::rc_hevc_e</field>
    <field name="url">config_8cpp.html#a552bd5af0459ef49cff57b9db84e685c</field>
    <field name="keywords">rc_hevc_e config::amd::rc_hevc_e config::amd</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_hevc_e::vbr_peak</field>
    <field name="url">config_8cpp.html#a552bd5af0459ef49cff57b9db84e685ca3fab1a1d2ec09921898d7c3cd4d294e4</field>
    <field name="keywords">vbr_peak config::amd::rc_hevc_e::vbr_peak vbr_peak config::amd::rc_hevc_e::vbr_peak</field>
    <field name="text">VBR with peak constraints</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_hevc_e::vbr_latency</field>
    <field name="url">config_8cpp.html#a552bd5af0459ef49cff57b9db84e685ca55d4a66b980e6c50a5e839234d2aaa04</field>
    <field name="keywords">vbr_latency config::amd::rc_hevc_e::vbr_latency vbr_latency config::amd::rc_hevc_e::vbr_latency</field>
    <field name="text">VBR with latency constraints</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_hevc_e::cbr</field>
    <field name="url">config_8cpp.html#a552bd5af0459ef49cff57b9db84e685caa8186307f5bbc554b722505f23cfc81e</field>
    <field name="keywords">cbr config::amd::rc_hevc_e::cbr cbr config::amd::rc_hevc_e::cbr</field>
    <field name="text">CBR</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_hevc_e::cqp</field>
    <field name="url">config_8cpp.html#a552bd5af0459ef49cff57b9db84e685cad6acc9f1ba4b28b91ea9de99a0ee53d7</field>
    <field name="keywords">cqp config::amd::rc_hevc_e::cqp cqp config::amd::rc_hevc_e::cqp</field>
    <field name="text">CQP</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::stream</field>
    <field name="url">config_8cpp.html#a64b54f2ada544c8afedd9c3b9d2446af</field>
    <field name="keywords"></field>
    <field name="text">s platf::appdata string ENCRYPTION_MODE_NEVER ENCRYPTION_MODE_OPPORTUNISTIC</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::input</field>
    <field name="url">config_8cpp.html#a669e832f2f6b35d525e789e0cc2d2a7f</field>
    <field name="keywords"></field>
    <field name="text">ms ms std::chrono::duration&lt;double&gt; platf::supported_gamepads front name data platf::supported_gamepads front name size</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::amd::usage_av1_e</field>
    <field name="url">config_8cpp.html#a6e379d8b40bddfa08ccfa4c24b384343</field>
    <field name="keywords">usage_av1_e config::amd::usage_av1_e config::amd</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_av1_e::transcoding</field>
    <field name="url">config_8cpp.html#a6e379d8b40bddfa08ccfa4c24b384343a2e7888a81451f1288996df77ccf7d4bc</field>
    <field name="keywords">transcoding config::amd::usage_av1_e::transcoding transcoding config::amd::usage_av1_e::transcoding</field>
    <field name="text">Transcoding preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_av1_e::webcam</field>
    <field name="url">config_8cpp.html#a6e379d8b40bddfa08ccfa4c24b384343a86722fdb4bc3199d48c363a6f922a3c7</field>
    <field name="keywords">webcam config::amd::usage_av1_e::webcam webcam config::amd::usage_av1_e::webcam</field>
    <field name="text">Webcam preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_av1_e::lowlatency</field>
    <field name="url">config_8cpp.html#a6e379d8b40bddfa08ccfa4c24b384343a9993f34c252aef6541037801d066e9b6</field>
    <field name="keywords">lowlatency config::amd::usage_av1_e::lowlatency lowlatency config::amd::usage_av1_e::lowlatency</field>
    <field name="text">Low latency preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_av1_e::ultralowlatency</field>
    <field name="url">config_8cpp.html#a6e379d8b40bddfa08ccfa4c24b384343ab8f3dd1f430f86fb4a5e39f9c30ddecf</field>
    <field name="keywords">ultralowlatency config::amd::usage_av1_e::ultralowlatency ultralowlatency config::amd::usage_av1_e::ultralowlatency</field>
    <field name="text">Ultra low latency preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_av1_e::lowlatency_high_quality</field>
    <field name="url">config_8cpp.html#a6e379d8b40bddfa08ccfa4c24b384343abcefcb39d267b37be5f159d9ffb1e105</field>
    <field name="keywords">lowlatency_high_quality config::amd::usage_av1_e::lowlatency_high_quality lowlatency_high_quality config::amd::usage_av1_e::lowlatency_high_quality</field>
    <field name="text">Low latency high quality preset</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">_CONVERT_</field>
    <field name="args">(x)</field>
    <field name="url">config_8cpp.html#a7fdee3cc258c4c6add64e8da6a2db8eb</field>
    <field name="keywords"></field>
    <field name="text">quality_type x sv T::x rc x sv T::x usage x sv T::x preset x sv x value x sv video_t::dd_t::config_option_e::x _CONVERT_2_ARG_ x x _CONVERT_2_ARG_ x x _CONVERT_2_ARG_ x x</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::qsv::cavlc_e</field>
    <field name="url">config_8cpp.html#a9aca908eacf04026666ed10bd3147781</field>
    <field name="keywords">cavlc_e config::qsv::cavlc_e config::qsv</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::qsv::disabled</field>
    <field name="url">config_8cpp.html#a9aca908eacf04026666ed10bd3147781a6477876cfa48c619e6d44921403021a2</field>
    <field name="keywords">disabled config::qsv::disabled config::qsv disabled config::qsv::disabled config::qsv</field>
    <field name="text">Disabled</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::qsv::enabled</field>
    <field name="url">config_8cpp.html#a9aca908eacf04026666ed10bd3147781a6d9edcff01b50aab8dd96b60d7b8522c</field>
    <field name="keywords">enabled config::qsv::enabled config::qsv enabled config::qsv::enabled config::qsv</field>
    <field name="text">Enabled</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::qsv::_auto</field>
    <field name="url">config_8cpp.html#a9aca908eacf04026666ed10bd3147781a9eb51851c17300f899376e4cc29d764a</field>
    <field name="keywords">_auto config::qsv::_auto config::qsv _auto config::qsv::_auto config::qsv</field>
    <field name="text">Auto</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::amd::usage_hevc_e</field>
    <field name="url">config_8cpp.html#aa23a83e150acc326cca9b5ea5d73579d</field>
    <field name="keywords">usage_hevc_e config::amd::usage_hevc_e config::amd</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_hevc_e::transcoding</field>
    <field name="url">config_8cpp.html#aa23a83e150acc326cca9b5ea5d73579da2e7888a81451f1288996df77ccf7d4bc</field>
    <field name="keywords">transcoding config::amd::usage_hevc_e::transcoding transcoding config::amd::usage_hevc_e::transcoding</field>
    <field name="text">Transcoding preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_hevc_e::webcam</field>
    <field name="url">config_8cpp.html#aa23a83e150acc326cca9b5ea5d73579da86722fdb4bc3199d48c363a6f922a3c7</field>
    <field name="keywords">webcam config::amd::usage_hevc_e::webcam webcam config::amd::usage_hevc_e::webcam</field>
    <field name="text">Webcam preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_hevc_e::lowlatency</field>
    <field name="url">config_8cpp.html#aa23a83e150acc326cca9b5ea5d73579da9993f34c252aef6541037801d066e9b6</field>
    <field name="keywords">lowlatency config::amd::usage_hevc_e::lowlatency lowlatency config::amd::usage_hevc_e::lowlatency</field>
    <field name="text">Low latency preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_hevc_e::ultralowlatency</field>
    <field name="url">config_8cpp.html#aa23a83e150acc326cca9b5ea5d73579dab8f3dd1f430f86fb4a5e39f9c30ddecf</field>
    <field name="keywords">ultralowlatency config::amd::usage_hevc_e::ultralowlatency ultralowlatency config::amd::usage_hevc_e::ultralowlatency</field>
    <field name="text">Ultra low latency preset</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::usage_hevc_e::lowlatency_high_quality</field>
    <field name="url">config_8cpp.html#aa23a83e150acc326cca9b5ea5d73579dabcefcb39d267b37be5f159d9ffb1e105</field>
    <field name="keywords">lowlatency_high_quality config::amd::usage_hevc_e::lowlatency_high_quality lowlatency_high_quality config::amd::usage_hevc_e::lowlatency_high_quality</field>
    <field name="text">Low latency high quality preset</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::sunshine</field>
    <field name="url">config_8cpp.html#ab1574b9a185050000a067e2484eab328</field>
    <field name="keywords"></field>
    <field name="text">platf::appdata string platf::appdata string</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::amd::rc_av1_e</field>
    <field name="url">config_8cpp.html#ab5c20de968c42ee3e01b46a7359346d6</field>
    <field name="keywords">rc_av1_e config::amd::rc_av1_e config::amd</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_av1_e::vbr_peak</field>
    <field name="url">config_8cpp.html#ab5c20de968c42ee3e01b46a7359346d6a3fab1a1d2ec09921898d7c3cd4d294e4</field>
    <field name="keywords">vbr_peak config::amd::rc_av1_e::vbr_peak vbr_peak config::amd::rc_av1_e::vbr_peak</field>
    <field name="text">VBR with peak constraints</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_av1_e::vbr_latency</field>
    <field name="url">config_8cpp.html#ab5c20de968c42ee3e01b46a7359346d6a55d4a66b980e6c50a5e839234d2aaa04</field>
    <field name="keywords">vbr_latency config::amd::rc_av1_e::vbr_latency vbr_latency config::amd::rc_av1_e::vbr_latency</field>
    <field name="text">VBR with latency constraints</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_av1_e::cbr</field>
    <field name="url">config_8cpp.html#ab5c20de968c42ee3e01b46a7359346d6aa8186307f5bbc554b722505f23cfc81e</field>
    <field name="keywords">cbr config::amd::rc_av1_e::cbr cbr config::amd::rc_av1_e::cbr</field>
    <field name="text">CBR</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::rc_av1_e::cqp</field>
    <field name="url">config_8cpp.html#ab5c20de968c42ee3e01b46a7359346d6ad6acc9f1ba4b28b91ea9de99a0ee53d7</field>
    <field name="keywords">cqp config::amd::rc_av1_e::cqp cqp config::amd::rc_av1_e::cqp</field>
    <field name="text">CQP</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::vt::coder_e</field>
    <field name="url">config_8cpp.html#abc53e5f8dc3b20de48ecbe0ac2e431d8</field>
    <field name="keywords">coder_e config::vt::coder_e config::vt</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::vt::cavlc</field>
    <field name="url">config_8cpp.html#abc53e5f8dc3b20de48ecbe0ac2e431d8a958f868b0b7e9be22ef66baafa9036dd</field>
    <field name="keywords">cavlc config::vt::cavlc config::vt cavlc config::vt::cavlc config::vt</field>
    <field name="text">CAVLC</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::vt::_auto</field>
    <field name="url">config_8cpp.html#abc53e5f8dc3b20de48ecbe0ac2e431d8aa28cf013b8d9bac5ef1407a08c3a6196</field>
    <field name="keywords">_auto config::vt::_auto config::vt _auto config::vt::_auto config::vt</field>
    <field name="text">Auto</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::vt::cabac</field>
    <field name="url">config_8cpp.html#abc53e5f8dc3b20de48ecbe0ac2e431d8ab2561179ccf0ab52e91027eaa5bc1770</field>
    <field name="keywords">cabac config::vt::cabac config::vt cabac config::vt::cabac config::vt</field>
    <field name="text">CABAC</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">_CONVERT_</field>
    <field name="args">(x, y)</field>
    <field name="url">config_8cpp.html#ad2afcc5b10a2efa03cb3a58a18019297</field>
    <field name="keywords"></field>
    <field name="text">preset x sv y</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::audio</field>
    <field name="url">config_8cpp.html#ae5ea265684e81c400ecbe4f3aca58d9f</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::amd::coder_e</field>
    <field name="url">config_8cpp.html#ae63da1908e0e80c5a1d0e091a8ae029d</field>
    <field name="keywords">coder_e config::amd::coder_e config::amd</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::_auto</field>
    <field name="url">config_8cpp.html#ae63da1908e0e80c5a1d0e091a8ae029da675cc06f523d2b342157077bee56d724</field>
    <field name="keywords">_auto config::amd::_auto config::amd _auto config::amd::_auto config::amd</field>
    <field name="text">Auto</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::cabac</field>
    <field name="url">config_8cpp.html#ae63da1908e0e80c5a1d0e091a8ae029da9493942b0796de6ce1d927e123ef0854</field>
    <field name="keywords">cabac config::amd::cabac config::amd cabac config::amd::cabac config::amd</field>
    <field name="text">CABAC</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::amd::cavlc</field>
    <field name="url">config_8cpp.html#ae63da1908e0e80c5a1d0e091a8ae029dab877c18b60440649004bcfaf4a3b6883</field>
    <field name="keywords">cavlc config::amd::cavlc config::amd cavlc config::amd::cavlc config::amd</field>
    <field name="text">CAVLC</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">config.h</field>
    <field name="url">config_8h.html</field>
    <field name="keywords">config.h</field>
    <field name="text">Declarations for the configuration of Sunshine</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::flag::flag_e</field>
    <field name="url">config_8h.html#a716fd741caaeaeeeb7fa773447e12904</field>
    <field name="keywords">flag_e config::flag::flag_e config::flag</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::flag::UPNP</field>
    <field name="url">config_8h.html#a716fd741caaeaeeeb7fa773447e12904a2960fed71a8454ee4a56cfb87a01c6f3</field>
    <field name="keywords">UPNP config::flag::UPNP config::flag UPNP config::flag::UPNP config::flag</field>
    <field name="text">Try Universal Plug n Play</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::flag::FRESH_STATE</field>
    <field name="url">config_8h.html#a716fd741caaeaeeeb7fa773447e12904a3c7d83bd911af15ce49063dc2a90db35</field>
    <field name="keywords">FRESH_STATE config::flag::FRESH_STATE config::flag FRESH_STATE config::flag::FRESH_STATE config::flag</field>
    <field name="text">Do not load or save state</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::flag::FLAG_SIZE</field>
    <field name="url">config_8h.html#a716fd741caaeaeeeb7fa773447e12904a9278926ceeb75d6206f36c6dd03139a4</field>
    <field name="keywords">FLAG_SIZE config::flag::FLAG_SIZE config::flag FLAG_SIZE config::flag::FLAG_SIZE config::flag</field>
    <field name="text">Number of flags</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::flag::PIN_STDIN</field>
    <field name="url">config_8h.html#a716fd741caaeaeeeb7fa773447e12904ae4ccf2e23d4cbd0c2de0e12bf41dfee9</field>
    <field name="keywords">PIN_STDIN config::flag::PIN_STDIN config::flag PIN_STDIN config::flag::PIN_STDIN config::flag</field>
    <field name="text">Read PIN from stdin instead of http</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::flag::FORCE_VIDEO_HEADER_REPLACE</field>
    <field name="url">config_8h.html#a716fd741caaeaeeeb7fa773447e12904ae7572caaf3bdc31eeb47fc9e32d22695</field>
    <field name="keywords">FORCE_VIDEO_HEADER_REPLACE config::flag::FORCE_VIDEO_HEADER_REPLACE config::flag FORCE_VIDEO_HEADER_REPLACE config::flag::FORCE_VIDEO_HEADER_REPLACE config::flag</field>
    <field name="text">force replacing headers inside video data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::flag::CONST_PIN</field>
    <field name="url">config_8h.html#a716fd741caaeaeeeb7fa773447e12904af4ade852e0be071884a079f2ec0f4dd5</field>
    <field name="keywords">CONST_PIN config::flag::CONST_PIN config::flag CONST_PIN config::flag::CONST_PIN config::flag</field>
    <field name="text">Use pin</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">config std::unordered_map&lt;std::string, std::string&gt; modified_config_settings</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00022</field>
    <field name="keywords"></field>
    <field name="text">video_t qp hevc_mode av1_mode min_threads std::string sw_preset std::string sw_tune std::optional&lt;int&gt; svtav1_preset sw nvenc::nvenc_config nv nv_realtime_hags nv_opengl_vulkan_on_dxgi nv_sunshine_high_power_mode preset multipass h264_coder aq vbv_percentage_increase nv_legacy std::optional&lt;int&gt; qsv_preset std::optional&lt;int&gt; qsv_cavlc qsv_slow_hevc qsv std::optional&lt;int&gt; amd_usage_h264 std::optional&lt;int&gt; amd_usage_hevc std::optional&lt;int&gt; amd_usage_av1 std::optional&lt;int&gt; amd_rc_h264 std::optional&lt;int&gt; amd_rc_hevc std::optional&lt;int&gt; amd_rc_av1 std::optional&lt;int&gt; amd_enforce_hrd std::optional&lt;int&gt; amd_quality_h264 std::optional&lt;int&gt; amd_quality_hevc std::optional&lt;int&gt; amd_quality_av1 std::optional&lt;int&gt; amd_preanalysis std::optional&lt;int&gt; amd_vbaq amd_coder amd vt_allow_sw vt_require_sw vt_realtime vt_coder vt strict_rc_buffer vaapi std::string capture std::string encoder std::string adapter_name std::string output_name</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00088</field>
    <field name="keywords"></field>
    <field name="text">dd_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00089</field>
    <field name="keywords"></field>
    <field name="text">workarounds_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00090</field>
    <field name="keywords"></field>
    <field name="text">std::chrono::milliseconds hdr_toggle_delay</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00093</field>
    <field name="keywords"></field>
    <field name="text">config_option_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00094</field>
    <field name="keywords"></field>
    <field name="text">disabled</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00095</field>
    <field name="keywords"></field>
    <field name="text">verify_only</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00096</field>
    <field name="keywords"></field>
    <field name="text">ensure_active</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00097</field>
    <field name="keywords"></field>
    <field name="text">ensure_primary</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00098</field>
    <field name="keywords"></field>
    <field name="text">ensure_only_display</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00101</field>
    <field name="keywords"></field>
    <field name="text">resolution_option_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00102</field>
    <field name="keywords"></field>
    <field name="text">disabled</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00103</field>
    <field name="keywords"></field>
    <field name="text">automatic</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00104</field>
    <field name="keywords"></field>
    <field name="text">manual</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00107</field>
    <field name="keywords"></field>
    <field name="text">refresh_rate_option_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00108</field>
    <field name="keywords"></field>
    <field name="text">disabled</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00109</field>
    <field name="keywords"></field>
    <field name="text">automatic</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00110</field>
    <field name="keywords"></field>
    <field name="text">manual</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00113</field>
    <field name="keywords"></field>
    <field name="text">hdr_option_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00114</field>
    <field name="keywords"></field>
    <field name="text">disabled</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00115</field>
    <field name="keywords"></field>
    <field name="text">automatic</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00118</field>
    <field name="keywords"></field>
    <field name="text">mode_remapping_entry_t std::string requested_resolution std::string requested_fps std::string final_resolution std::string final_refresh_rate</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00125</field>
    <field name="keywords"></field>
    <field name="text">mode_remapping_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00126</field>
    <field name="keywords"></field>
    <field name="text">std::vector&lt;mode_remapping_entry_t&gt; mixed</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00127</field>
    <field name="keywords"></field>
    <field name="text">std::vector&lt;mode_remapping_entry_t&gt; resolution_only</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00128</field>
    <field name="keywords"></field>
    <field name="text">std::vector&lt;mode_remapping_entry_t&gt; refresh_rate_only config_option_e configuration_option resolution_option_e resolution_option</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00133</field>
    <field name="keywords"></field>
    <field name="text">std::string manual_resolution refresh_rate_option_e refresh_rate_option</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00135</field>
    <field name="keywords"></field>
    <field name="text">std::string manual_refresh_rate hdr_option_e hdr_option</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00137</field>
    <field name="keywords"></field>
    <field name="text">std::chrono::milliseconds config_revert_delay</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00138</field>
    <field name="keywords"></field>
    <field name="text">config_revert_on_disconnect mode_remapping_t mode_remapping workarounds_t wa dd min_fps_factor max_bitrate</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00147</field>
    <field name="keywords"></field>
    <field name="text">audio_t std::string sink std::string virtual_sink install_steam_drivers ENCRYPTION_MODE_NEVER ENCRYPTION_MODE_OPPORTUNISTIC ENCRYPTION_MODE_MANDATORY</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00157</field>
    <field name="keywords"></field>
    <field name="text">stream_t std::chrono::milliseconds ping_timeout std::string file_apps fec_percentage lan_encryption_mode wan_encryption_mode</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00169</field>
    <field name="keywords"></field>
    <field name="text">nvhttp_t std::string origin_web_ui_allowed std::string pkey std::string cert std::string sunshine_name std::string file_state std::string external_ip</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00184</field>
    <field name="keywords"></field>
    <field name="text">input_t std::unordered_map&lt;int, int&gt; keybindings std::chrono::milliseconds back_button_timeout std::chrono::milliseconds key_repeat_delay std::chrono::duration&lt;double&gt; key_repeat_period std::string gamepad ds4_back_as_touchpad_click motion_as_ds4 touchpad_as_ds4 keyboard mouse controller always_send_scancodes high_resolution_scrolling native_pen_touch flag</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00207</field>
    <field name="keywords"></field>
    <field name="text">flag_e std::size_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00208</field>
    <field name="keywords"></field>
    <field name="text">PIN_STDIN</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00209</field>
    <field name="keywords"></field>
    <field name="text">FRESH_STATE</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00210</field>
    <field name="keywords"></field>
    <field name="text">FORCE_VIDEO_HEADER_REPLACE</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00211</field>
    <field name="keywords"></field>
    <field name="text">UPNP</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00212</field>
    <field name="keywords"></field>
    <field name="text">CONST_PIN</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00213</field>
    <field name="keywords"></field>
    <field name="text">FLAG_SIZE</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00217</field>
    <field name="keywords"></field>
    <field name="text">prep_cmd_t prep_cmd_t std::string do_cmd std::string undo_cmd elevated do_cmd std::move do_cmd undo_cmd std::move undo_cmd elevated std::move elevated prep_cmd_t std::string do_cmd elevated do_cmd std::move do_cmd elevated std::move elevated std::string do_cmd std::string undo_cmd elevated</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00234</field>
    <field name="keywords"></field>
    <field name="text">sunshine_t std::string locale min_log_level std::bitset&lt;flag::FLAG_SIZE&gt; flags std::string credentials_file std::string username std::string password std::string salt std::string config_file</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">config.h</field>
    <field name="url">config_8h_source.html#l00246</field>
    <field name="keywords"></field>
    <field name="text">cmd_t std::string name argc argv cmd std::uint16_t port std::string address_family std::string log_file notify_pre_releases std::vector&lt;prep_cmd_t&gt; prep_cmds video_t video audio_t audio stream_t stream nvhttp_t nvhttp input_t input sunshine_t sunshine parse argc argv std::unordered_map&lt;std::string, std::string&gt; parse_config std::string_view file_content</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">confighttp.cpp</field>
    <field name="url">confighttp_8cpp.html</field>
    <field name="keywords">confighttp.cpp</field>
    <field name="text">Definitions for the Web UI Config HTTP server Authentication better handling of routes common to nvhttp cleanup</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getConfig</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a1c53ba67b5e03fb1ded99af21a9fe385</field>
    <field name="keywords">getConfig confighttp::getConfig confighttp</field>
    <field name="text">Get the configuration settings response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getWelcomePage</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a1f48783e5bc4e338c638d44cc5f47c4a</field>
    <field name="keywords">getWelcomePage confighttp::getWelcomePage confighttp</field>
    <field name="text">Get the welcome page response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::saveConfig</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a23912e4f105adcd92056dad911a394bb</field>
    <field name="keywords">saveConfig confighttp::saveConfig confighttp</field>
    <field name="text">Save the configuration settings response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format Attention It is recommended to ONLY save the config settings that differ from the default behavior</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::unpairAll</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a243550967291d3a81a1eeb774b9600b2</field>
    <field name="keywords">unpairAll confighttp::unpairAll confighttp</field>
    <field name="text">Unpair all clients response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::savePassword</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a2a3ac88eac9df25d760810b4bdb81162</field>
    <field name="keywords">savePassword confighttp::savePassword confighttp</field>
    <field name="text">Update existing credentials response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getConfigPage</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a2c8f191f0d2e9982768acb387098ed43</field>
    <field name="keywords">getConfigPage confighttp::getConfigPage confighttp</field>
    <field name="text">Get the configuration page response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getPinPage</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a30f919c1fabd9b8bf2da1eb05947509e</field>
    <field name="keywords">getPinPage confighttp::getPinPage confighttp</field>
    <field name="text">Get the PIN page response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::closeApp</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a4bb0dce538a7fff383278072244fd36d</field>
    <field name="keywords">closeApp confighttp::closeApp confighttp</field>
    <field name="text">Close the currently running application response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::print_req</field>
    <field name="args">(const req_https_t &amp;request)</field>
    <field name="url">confighttp_8cpp.html#a4e17683dbcb99411fd16eeaec3f9b5c4</field>
    <field name="keywords">print_req confighttp::print_req confighttp</field>
    <field name="text">Log the request details request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::send_response</field>
    <field name="args">(resp_https_t response, const nlohmann::json &amp;output_tree)</field>
    <field name="url">confighttp_8cpp.html#a6cc3769ddd96cdabfc1bf4f013638467</field>
    <field name="keywords">send_response confighttp::send_response confighttp</field>
    <field name="text">Send a response response The HTTP response object output_tree The JSON tree to send</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::savePin</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a717463e8c34599c99d04e350d49b2c56</field>
    <field name="keywords">savePin confighttp::savePin confighttp</field>
    <field name="text">Send a pin code to the host The pin is generated from the Moonlight client during the pairing process response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getSunshineLogoImage</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a7881da8e98e3c3c4616bfeecbf97f3c4</field>
    <field name="keywords">getSunshineLogoImage confighttp::getSunshineLogoImage confighttp</field>
    <field name="text">Get the Sunshine logo image response The HTTP response object request The HTTP request object combine function with getFaviconImage and possibly getNodeModules use mime_types map</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::not_found</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a7f46812c75105689ade2a5d9be2d85b4</field>
    <field name="keywords">not_found confighttp::not_found confighttp</field>
    <field name="text">Send a 4 0 4 Not Found response response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::authenticate</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a7f9ef3d90ef3bf30f1494fa84e3366ee</field>
    <field name="keywords">authenticate confighttp::authenticate confighttp</field>
    <field name="text">Authenticate the user response The HTTP response object request The HTTP request object True if the user is authenticated false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::saveApp</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a8b4896b162862f5fd0fa60f0245d5916</field>
    <field name="keywords">saveApp confighttp::saveApp confighttp</field>
    <field name="text">Save an application To save a new application the index must be 1 To update an existing application you must provide the current index of the application response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getLogs</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a92cfeb50c095168b95d11bd87adbc897</field>
    <field name="keywords">getLogs confighttp::getLogs confighttp</field>
    <field name="text">Get the logs from the log file response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getIndexPage</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a94ea2ed7061ca74aed72436f292a5baf</field>
    <field name="keywords">getIndexPage confighttp::getIndexPage confighttp</field>
    <field name="text">Get the index page response The HTTP response object request The HTTP request object combine these functions into a single function that accepts the page i.e</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::bad_request</field>
    <field name="args">(resp_https_t response, req_https_t request, const std::string &amp;error_message=&quot;Bad Request&quot;)</field>
    <field name="url">confighttp_8cpp.html#a94f43296f80a8dbdc0f69998cc50a001</field>
    <field name="keywords">bad_request confighttp::bad_request confighttp</field>
    <field name="text">Send a 4 0 0 Bad Request response response The HTTP response object request The HTTP request object error_message The error message to include in the response</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::unpair</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#a9fe3af21abfae9d4e9894f81c7ea6fbb</field>
    <field name="keywords">unpair confighttp::unpair confighttp</field>
    <field name="text">Unpair a client response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::uploadCover</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#aa73be0c6466891e8161d760c382b5a71</field>
    <field name="keywords">uploadCover confighttp::uploadCover confighttp</field>
    <field name="text">Upload a cover image response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getClientsPage</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#aa7950c8f1708c1526736b18188cc2375</field>
    <field name="keywords">getClientsPage confighttp::getClientsPage confighttp</field>
    <field name="text">Get the clients page response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getLocale</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#aa9d4546ed28d86b273bbbef489926871</field>
    <field name="keywords">getLocale confighttp::getLocale confighttp</field>
    <field name="text">Get the locale setting This endpoint does not require authentication response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getFaviconImage</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#ab2c06804e7e0892b29fa472ab662728a</field>
    <field name="keywords">getFaviconImage confighttp::getFaviconImage confighttp</field>
    <field name="text">Get the favicon image response The HTTP response object request The HTTP request object combine function with getSunshineLogoImage and possibly getNodeModules use mime_types map</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getTroubleshootingPage</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#abc91de441b841ff0becf540db1d32f6d</field>
    <field name="keywords">getTroubleshootingPage confighttp::getTroubleshootingPage confighttp</field>
    <field name="text">Get the troubleshooting page response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::send_redirect</field>
    <field name="args">(resp_https_t response, req_https_t request, const char *path)</field>
    <field name="url">confighttp_8cpp.html#abc92a804a05aa7b97fd739a458eae24e</field>
    <field name="keywords">send_redirect confighttp::send_redirect confighttp</field>
    <field name="text">Send a redirect response response The HTTP response object request The HTTP request object path The path to redirect to</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">confighttp::op_e</field>
    <field name="url">confighttp_8cpp.html#abed56e8beffd8d07ff836641de4974b8</field>
    <field name="keywords">op_e confighttp::op_e confighttp</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">confighttp::op_e::REMOVE</field>
    <field name="url">confighttp_8cpp.html#abed56e8beffd8d07ff836641de4974b8a78baf367c4626442174307cdf41c6538</field>
    <field name="keywords">REMOVE confighttp::op_e::REMOVE REMOVE confighttp::op_e::REMOVE</field>
    <field name="text">Remove client</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">confighttp::op_e::ADD</field>
    <field name="url">confighttp_8cpp.html#abed56e8beffd8d07ff836641de4974b8a9eeb52badb613229884838847294b90d</field>
    <field name="keywords">ADD confighttp::op_e::ADD ADD confighttp::op_e::ADD</field>
    <field name="text">Add client</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getClients</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#abf7b109cc5725d25efc82044eae9ec40</field>
    <field name="keywords">getClients confighttp::getClients confighttp</field>
    <field name="text">Get the list of paired clients response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::isChildPath</field>
    <field name="args">(fs::path const &amp;base, fs::path const &amp;query)</field>
    <field name="url">confighttp_8cpp.html#ac1ce3f16d9cfc08fb414fb36423bfd78</field>
    <field name="keywords">isChildPath confighttp::isChildPath confighttp</field>
    <field name="text">Check if a path is a child of another path base The base path query The path to check True if the path is a child of the base path false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getNodeModules</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#ac70f447d3ace53d4b62283fafa149570</field>
    <field name="keywords">getNodeModules confighttp::getNodeModules confighttp</field>
    <field name="text">Get an asset from the node_modules directory response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getAppsPage</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#acf0d5c8696b6eafe77498c49d3bca9af</field>
    <field name="keywords">getAppsPage confighttp::getAppsPage confighttp</field>
    <field name="text">Get the apps page response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::resetDisplayDevicePersistence</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#ad765afeede14b4623fbbd3dd7646a7d8</field>
    <field name="keywords">resetDisplayDevicePersistence confighttp::resetDisplayDevicePersistence confighttp</field>
    <field name="text">Reset the display device persistence response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::deleteApp</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#ae49f4d2502ad2797efdf780f33dfd977</field>
    <field name="keywords">deleteApp confighttp::deleteApp confighttp</field>
    <field name="text">Delete an application response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::send_unauthorized</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#ae764df83e0d4d859280ef81ac3e02385</field>
    <field name="keywords">send_unauthorized confighttp::send_unauthorized confighttp</field>
    <field name="text">Send a 4 0 1 Unauthorized response response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getPasswordPage</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#af0e40b03e93c2a51a04ef627e1f30752</field>
    <field name="keywords">getPasswordPage confighttp::getPasswordPage confighttp</field>
    <field name="text">Get the password page response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::getApps</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#af1a928b563d57cc0386970d73ecd80f9</field>
    <field name="keywords">getApps confighttp::getApps confighttp</field>
    <field name="text">Get the list of available applications response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">confighttp::restart</field>
    <field name="args">(resp_https_t response, req_https_t request)</field>
    <field name="url">confighttp_8cpp.html#af83529c6e82508706605946ce70c7c53</field>
    <field name="keywords">restart confighttp::restart confighttp</field>
    <field name="text">Restart Sunshine response The HTTP response object request The HTTP request object</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">confighttp.h</field>
    <field name="url">confighttp_8h.html</field>
    <field name="keywords">confighttp.h</field>
    <field name="text">Declarations for the Web UI Config HTTP server</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">mime_types</field>
    <field name="url">confighttp_8h.html#a3a8ba5f0b083e66af703d9a712c389b6</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">confighttp.h</field>
    <field name="url">confighttp_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">confighttp PORT_HTTPS start std::map&lt;std::string, std::string&gt; mime_types</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">crypto.cpp</field>
    <field name="url">crypto_8cpp.html</field>
    <field name="keywords">crypto.cpp</field>
    <field name="text">Definitions for cryptography functions</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">crypto::hash</field>
    <field name="args">(const std::string_view &amp;plaintext)</field>
    <field name="url">crypto_8cpp.html#a9b16e05955ed429ef3ee677d79b4fd15</field>
    <field name="keywords">hash crypto::hash crypto</field>
    <field name="text">Hashes the given plaintext using SHA-256 plaintext The SHA-256 hash of the plaintext Hashes the given plaintext using SHA-256 plaintext The SHA-256 hash of the plaintext</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">crypto.h</field>
    <field name="url">crypto_8h.html</field>
    <field name="keywords">crypto.h</field>
    <field name="text">Declarations for cryptography functions</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">crypto.h</field>
    <field name="url">crypto_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">crypto</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">crypto.h</field>
    <field name="url">crypto_8h_source.html#l00020</field>
    <field name="keywords"></field>
    <field name="text">creds_t std::string x509 std::string pkey md_ctx_destroy EVP_MD_CTX sha256_t std::array&lt;std::uint8_t, SHA256_DIGEST_LENGTH&gt; aes_t std::vector&lt;std::uint8_t&gt; x509_t util::safe_ptr&lt;X509, X509_free&gt; x509_store_t util::safe_ptr&lt;X509_STORE, X509_STORE_free&gt; x509_store_ctx_t util::safe_ptr&lt;X509_STORE_CTX, X509_STORE_CTX_free&gt; cipher_ctx_t util::safe_ptr&lt;EVP_CIPHER_CTX, EVP_CIPHER_CTX_free&gt; md_ctx_t util::safe_ptr&lt;EVP_MD_CTX, md_ctx_destroy&gt; bio_t util::safe_ptr&lt;BIO, BIO_free_all&gt; pkey_t util::safe_ptr&lt;EVP_PKEY, EVP_PKEY_free&gt; pkey_ctx_t util::safe_ptr&lt;EVP_PKEY_CTX, EVP_PKEY_CTX_free&gt; bignum_t util::safe_ptr&lt;BIGNUM, BN_free&gt; sha256_t hash std::string_view plaintext aes_t gen_aes_key std::array&lt;uint8_t, 16&gt; salt std::string_view pin x509_t x509 std::string_view x pkey_t pkey std::string_view k std::string pem x509_t x509 std::string pem pkey_t pkey std::vector&lt;uint8_t&gt; sign256 pkey_t pkey std::string_view data verify256 x509_t x509 std::string_view data std::string_view signature creds_t gen_creds std::string_view cn std::uint32_t key_bits std::string_view signature x509_t x std::string rand std::size_t bytes std::string rand_alphabet std::size_t bytes std::string_view alphabet std::string_view</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">crypto.h</field>
    <field name="url">crypto_8h_source.html#l00063</field>
    <field name="keywords"></field>
    <field name="text">cert_chain_t KITTY_DECL_CONSTR cert_chain_t add x509_t cert clear verify x509_t::element_type cert std::vector&lt;std::pair&lt;x509_t, x509_store_t&gt; _certs x509_store_ctx_t _cert_ctx cipher std::size_t tag_size std::size_t round_to_pkcs7_padded std::size_t size size</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">crypto.h</field>
    <field name="url">crypto_8h_source.html#l00085</field>
    <field name="keywords"></field>
    <field name="text">cipher_t cipher_ctx_t decrypt_ctx cipher_ctx_t encrypt_ctx aes_t key padding</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">crypto.h</field>
    <field name="url">crypto_8h_source.html#l00095</field>
    <field name="keywords"></field>
    <field name="text">ecb_t cipher_t ecb_t ecb_t ecb_t ecb_t operator= ecb_t ecb_t aes_t key padding encrypt std::string_view plaintext std::vector&lt;std::uint8_t&gt; cipher decrypt std::string_view cipher std::vector&lt;std::uint8_t&gt; plaintext</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">crypto.h</field>
    <field name="url">crypto_8h_source.html#l00107</field>
    <field name="keywords"></field>
    <field name="text">gcm_t cipher_t gcm_t gcm_t gcm_t gcm_t operator= gcm_t gcm_t crypto::aes_t key padding encrypt std::string_view plaintext std::uint8_t tag std::uint8_t ciphertext aes_t iv encrypt std::string_view plaintext std::uint8_t tagged_cipher aes_t iv decrypt std::string_view cipher std::vector&lt;std::uint8_t&gt; plaintext aes_t iv</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">crypto.h</field>
    <field name="url">crypto_8h_source.html#l00138</field>
    <field name="keywords"></field>
    <field name="text">cbc_t cipher_t cbc_t cbc_t cbc_t cbc_t operator= cbc_t cbc_t crypto::aes_t key padding encrypt std::string_view plaintext std::uint8_t cipher aes_t iv</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">cuda.cpp</field>
    <field name="url">cuda_8cpp.html</field>
    <field name="keywords">cuda.cpp</field>
    <field name="text">Definitions for CUDA encoding</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">SUNSHINE_STRINGVIEW</field>
    <field name="args">(x)</field>
    <field name="url">cuda_8cpp.html#a57ae6b7cb1a71b99100f8fc2a2206088</field>
    <field name="keywords"></field>
    <field name="text">SUNSHINE_STRINGVIEW_HELPER x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">cuda::open_drm_fd_for_cuda_device</field>
    <field name="args">(int index)</field>
    <field name="url">cuda_8cpp.html#a7c149ee78c7a49d1ca554beda414cdda</field>
    <field name="keywords">open_drm_fd_for_cuda_device cuda::open_drm_fd_for_cuda_device cuda</field>
    <field name="text">Opens the DRM device associated with the CUDA device index index CUDA device index to open File descriptor or 1 on failure</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">CU_CHECK</field>
    <field name="args">(x, y)</field>
    <field name="url">cuda_8cpp.html#a99060e1d573ec3481f8bc2d18b09fe42</field>
    <field name="keywords"></field>
    <field name="text">check x SUNSHINE_STRINGVIEW y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">cuda::make_avcodec_gl_encode_device</field>
    <field name="args">(int width, int height, int offset_x, int offset_y)</field>
    <field name="url">cuda_8cpp.html#adbcfa5fcff7760cc16599bbb865d91e9</field>
    <field name="keywords">make_avcodec_gl_encode_device cuda::make_avcodec_gl_encode_device cuda</field>
    <field name="text">Create a GL- CUDA encoding device for consuming captured dmabufs width Width of captured frames height Height of captured frames offset_x Offset of content in captured frame offset_y Offset of content in captured frame FFmpeg encoding device context</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">SUNSHINE_STRINGVIEW_HELPER</field>
    <field name="args">(x)</field>
    <field name="url">cuda_8cpp.html#ae399c43f4d48b04535ca661c3aa53fde</field>
    <field name="keywords"></field>
    <field name="text">x sv</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">CU_CHECK_IGNORE</field>
    <field name="args">(x, y)</field>
    <field name="url">cuda_8cpp.html#aea528042558f5a7b3abced39e9c1f9b6</field>
    <field name="keywords"></field>
    <field name="text">check x SUNSHINE_STRINGVIEW y</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">cuda.h</field>
    <field name="url">cuda_8h.html</field>
    <field name="keywords">cuda.h</field>
    <field name="text">Definitions for CUDA implementation</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">cuda.h</field>
    <field name="url">cuda_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">platf platf::avcodec_encode_device_t platf::img_t cuda nvfbc std::vector&lt;std::string&gt; display_names std::unique_ptr&lt;platf::avcodec_encode_device_t&gt; make_avcodec_encode_device width height vram std::unique_ptr&lt;platf::avcodec_encode_device_t&gt; cuda::make_avcodec_gl_encode_device width height offset_x offset_y init cudaArray cudaArray_t CUstream_st cudaStream_t cudaTextureObject_t __location__ device_builtin CUstream_st cudaStream_t __location__ device_builtin cudaTextureObject_t cuda freeCudaPtr_t operator() ptr freeCudaStream_t operator() cudaStream_t ptr ptr_t std::unique_ptr&lt;void, freeCudaPtr_t&gt; stream_t std::unique_ptr&lt;CUstream_st, freeCudaStream_t&gt; stream_t make_stream flags viewport_t width height offsetX offsetY tex_t std::optional&lt;tex_t&gt; make height pitch tex_t tex_t tex_t tex_t operator= tex_t other copy std::uint8_t src height pitch cudaArray_t array texture cudaTextureObject_t point cudaTextureObject_t linear texture sws_t sws_t sws_t in_width in_height out_width out_height pitch threadsPerBlock ptr_t color_matrix std::optional&lt;sws_t&gt; make in_width in_height out_width out_height pitch convert std::uint8_t Y std::uint8_t UV std::uint32_t pitchY std::uint32_t pitchUV cudaTextureObject_t texture stream_t::pointer stream convert std::uint8_t Y std::uint8_t UV std::uint32_t pitchY std::uint32_t pitchUV cudaTextureObject_t texture stream_t::pointer stream viewport_t viewport apply_colorspace video::sunshine_colorspace_t colorspace load_ram platf::img_t img cudaArray_t array ptr_t color_matrix threadsPerBlock viewport_t viewport scale</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">display.h</field>
    <field name="url">display_8h.html</field>
    <field name="keywords">display.h</field>
    <field name="text">Declarations for the Windows display backend</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">platf::dxgi format_str D3D11_CREATE_DEVICE_FLAGS Release T dxgi dxgi Release factory1_t util::safe_ptr&lt;IDXGIFactory1, Release&lt;IDXGIFactory1&gt; dxgi_t util::safe_ptr&lt;IDXGIDevice, Release&lt;IDXGIDevice&gt; dxgi1_t util::safe_ptr&lt;IDXGIDevice1, Release&lt;IDXGIDevice1&gt; device_t util::safe_ptr&lt;ID3D11Device, Release&lt;ID3D11Device&gt; device1_t util::safe_ptr&lt;ID3D11Device1, Release&lt;ID3D11Device1&gt; device_ctx_t util::safe_ptr&lt;ID3D11DeviceContext, Release&lt;ID3D11DeviceContext&gt; adapter_t util::safe_ptr&lt;IDXGIAdapter1, Release&lt;IDXGIAdapter1&gt; output_t util::safe_ptr&lt;IDXGIOutput, Release&lt;IDXGIOutput&gt; output1_t util::safe_ptr&lt;IDXGIOutput1, Release&lt;IDXGIOutput1&gt; output5_t util::safe_ptr&lt;IDXGIOutput5, Release&lt;IDXGIOutput5&gt; output6_t util::safe_ptr&lt;IDXGIOutput6, Release&lt;IDXGIOutput6&gt; dup_t util::safe_ptr&lt;IDXGIOutputDuplication, Release&lt;IDXGIOutputDuplication&gt; texture2d_t util::safe_ptr&lt;ID3D11Texture2D, Release&lt;ID3D11Texture2D&gt; texture1d_t util::safe_ptr&lt;ID3D11Texture1D, Release&lt;ID3D11Texture1D&gt; resource_t util::safe_ptr&lt;IDXGIResource, Release&lt;IDXGIResource&gt; resource1_t util::safe_ptr&lt;IDXGIResource1, Release&lt;IDXGIResource1&gt; multithread_t util::safe_ptr&lt;ID3D11Multithread, Release&lt;ID3D11Multithread&gt; vs_t util::safe_ptr&lt;ID3D11VertexShader, Release&lt;ID3D11VertexShader&gt; ps_t util::safe_ptr&lt;ID3D11PixelShader, Release&lt;ID3D11PixelShader&gt; blend_t util::safe_ptr&lt;ID3D11BlendState, Release&lt;ID3D11BlendState&gt; input_layout_t util::safe_ptr&lt;ID3D11InputLayout, Release&lt;ID3D11InputLayout&gt; render_target_t util::safe_ptr&lt;ID3D11RenderTargetView, Release&lt;ID3D11RenderTargetView&gt; shader_res_t util::safe_ptr&lt;ID3D11ShaderResourceView, Release&lt;ID3D11ShaderResourceView&gt; buf_t util::safe_ptr&lt;ID3D11Buffer, Release&lt;ID3D11Buffer&gt; raster_state_t util::safe_ptr&lt;ID3D11RasterizerState, Release&lt;ID3D11RasterizerState&gt; sampler_state_t util::safe_ptr&lt;ID3D11SamplerState, Release&lt;ID3D11SamplerState&gt; blob_t util::safe_ptr&lt;ID3DBlob, Release&lt;ID3DBlob&gt; depth_stencil_state_t util::safe_ptr&lt;ID3D11DepthStencilState, Release&lt;ID3D11DepthStencilState&gt; depth_stencil_view_t util::safe_ptr&lt;ID3D11DepthStencilView, Release&lt;ID3D11DepthStencilView&gt; keyed_mutex_t util::safe_ptr&lt;IDXGIKeyedMutex, Release&lt;IDXGIKeyedMutex&gt; video device_t util::safe_ptr&lt;ID3D11VideoDevice, Release&lt;ID3D11VideoDevice&gt; ctx_t util::safe_ptr&lt;ID3D11VideoContext, Release&lt;ID3D11VideoContext&gt; processor_t util::safe_ptr&lt;ID3D11VideoProcessor, Release&lt;ID3D11VideoProcessor&gt; processor_out_t util::safe_ptr&lt;ID3D11VideoProcessorOutputView, Release&lt;ID3D11VideoProcessorOutputView&gt; processor_in_t util::safe_ptr&lt;ID3D11VideoProcessorInputView, Release&lt;ID3D11VideoProcessorInputView&gt; processor_enum_t util::safe_ptr&lt;ID3D11VideoProcessorEnumerator, Release&lt;ID3D11VideoProcessorEnumerator&gt; hwdevice_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00076</field>
    <field name="keywords"></field>
    <field name="text">cursor_t std::vector&lt;std::uint8_t&gt; img_data DXGI_OUTDUPL_POINTER_SHAPE_INFO shape_info x y visible</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00084</field>
    <field name="keywords"></field>
    <field name="text">gpu_cursor_t gpu_cursor_t cursor_view set_pos LONG topleft_x LONG topleft_y LONG display_width LONG display_height DXGI_MODE_ROTATION display_rotation visible topleft_x topleft_x topleft_y topleft_y display_width display_width display_height display_height display_rotation display_rotation visible visible update_viewport set_texture LONG texture_width LONG texture_height texture2d_t texture texture std::move texture texture_width texture_width texture_height texture_height update_viewport update_viewport display_rotation DXGI_MODE_ROTATION_UNSPECIFIED DXGI_MODE_ROTATION_IDENTITY cursor_view TopLeftX topleft_x cursor_view TopLeftY topleft_y cursor_view Width texture_width cursor_view Height texture_height DXGI_MODE_ROTATION_ROTATE90 cursor_view TopLeftX topleft_y cursor_view TopLeftY display_width texture_width topleft_x cursor_view Width texture_height cursor_view Height texture_width DXGI_MODE_ROTATION_ROTATE180 cursor_view TopLeftX display_width texture_width topleft_x cursor_view TopLeftY display_height texture_height topleft_y cursor_view Width texture_width cursor_view Height texture_height DXGI_MODE_ROTATION_ROTATE270 cursor_view TopLeftX display_height texture_height topleft_y cursor_view TopLeftY topleft_x cursor_view Width texture_height cursor_view Height texture_width texture2d_t texture LONG texture_width LONG texture_height LONG topleft_x LONG topleft_y LONG display_width LONG display_height DXGI_MODE_ROTATION display_rotation shader_res_t input_res D3D11_VIEWPORT cursor_view visible</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00157</field>
    <field name="keywords"></field>
    <field name="text">display_base_t display_t init const ::video::config_t config std::string display_name capture_e capture push_captured_image_cb_t push_captured_image_cb pull_free_image_cb_t pull_free_image_cb cursor factory1_t factory adapter_t adapter output_t output device_t device device_ctx_t device_ctx DXGI_RATIONAL display_refresh_rate display_refresh_rate_rounded DXGI_MODE_ROTATION display_rotation DXGI_MODE_ROTATION_UNSPECIFIED width_before_rotation height_before_rotation client_frame_rate DXGI_FORMAT capture_format D3D_FEATURE_LEVEL feature_level std::unique_ptr&lt;high_precision_timer&gt; timer create_high_precision_timer</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00182</field>
    <field name="keywords"></field>
    <field name="text">_D3DKMT_SCHEDULINGPRIORITYCLASS</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00183</field>
    <field name="keywords"></field>
    <field name="text">D3DKMT_SCHEDULINGPRIORITYCLASS_IDLE</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00184</field>
    <field name="keywords"></field>
    <field name="text">D3DKMT_SCHEDULINGPRIORITYCLASS_BELOW_NORMAL</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00185</field>
    <field name="keywords"></field>
    <field name="text">D3DKMT_SCHEDULINGPRIORITYCLASS_NORMAL</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00186</field>
    <field name="keywords"></field>
    <field name="text">D3DKMT_SCHEDULINGPRIORITYCLASS_ABOVE_NORMAL</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00187</field>
    <field name="keywords"></field>
    <field name="text">D3DKMT_SCHEDULINGPRIORITYCLASS_HIGH</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00188</field>
    <field name="keywords"></field>
    <field name="text">D3DKMT_SCHEDULINGPRIORITYCLASS_REALTIME D3DKMT_SCHEDULINGPRIORITYCLASS UINT D3DKMT_HANDLE</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00193</field>
    <field name="keywords"></field>
    <field name="text">_D3DKMT_OPENADAPTERFROMLUID LUID AdapterLuid D3DKMT_HANDLE hAdapter D3DKMT_OPENADAPTERFROMLUID</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00198</field>
    <field name="keywords"></field>
    <field name="text">_D3DKMT_WDDM_2_7_CAPS UINT HwSchSupported UINT HwSchEnabled UINT HwSchEnabledByDefault UINT IndependentVidPnVSyncControl UINT Reserved UINT Value D3DKMT_WDDM_2_7_CAPS</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00213</field>
    <field name="keywords"></field>
    <field name="text">_D3DKMT_QUERYADAPTERINFO D3DKMT_HANDLE hAdapter UINT Type VOID pPrivateDriverData UINT PrivateDriverDataSize D3DKMT_QUERYADAPTERINFO UINT KMTQAITYPE_WDDM_2_7_CAPS</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00222</field>
    <field name="keywords"></field>
    <field name="text">_D3DKMT_CLOSEADAPTER D3DKMT_HANDLE hAdapter D3DKMT_CLOSEADAPTER NTSTATUS WINAPI PD3DKMTSetProcessSchedulingPriorityClass HANDLE D3DKMT_SCHEDULINGPRIORITYCLASS NTSTATUS WINAPI PD3DKMTOpenAdapterFromLuid D3DKMT_OPENADAPTERFROMLUID NTSTATUS WINAPI PD3DKMTQueryAdapterInfo D3DKMT_QUERYADAPTERINFO NTSTATUS WINAPI PD3DKMTCloseAdapter D3DKMT_CLOSEADAPTER is_hdr get_hdr_metadata SS_HDR_METADATA metadata dxgi_format_to_string DXGI_FORMAT format colorspace_to_string DXGI_COLOR_SPACE_TYPE type std::vector&lt;DXGI_FORMAT&gt; get_supported_capture_formats get_pixel_pitch capture_format DXGI_FORMAT_R16G16B16A16_FLOAT capture_e snapshot pull_free_image_cb_t pull_free_image_cb std::shared_ptr&lt;platf::img_t&gt; img_out std::chrono::milliseconds timeout cursor_visible capture_e release_snapshot complete_img img_t img dummy</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00251</field>
    <field name="keywords"></field>
    <field name="text">display_ram_t display_base_t std::shared_ptr&lt;img_t&gt; alloc_img dummy_img img_t img complete_img img_t img dummy std::vector&lt;DXGI_FORMAT&gt; get_supported_capture_formats std::unique_ptr&lt;avcodec_encode_device_t&gt; make_avcodec_encode_device pix_fmt_e pix_fmt D3D11_MAPPED_SUBRESOURCE img_info texture2d_t texture</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00267</field>
    <field name="keywords"></field>
    <field name="text">display_vram_t display_base_t std::enable_shared_from_this std::shared_ptr&lt;img_t&gt; alloc_img dummy_img img_t img_base complete_img img_t img_base dummy std::vector&lt;DXGI_FORMAT&gt; get_supported_capture_formats is_codec_supported std::string_view name const ::video::config_t config std::unique_ptr&lt;avcodec_encode_device_t&gt; make_avcodec_encode_device pix_fmt_e pix_fmt std::unique_ptr&lt;nvenc_encode_device_t&gt; make_nvenc_encode_device pix_fmt_e pix_fmt std::atomic&lt;uint32_t&gt; next_image_id</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00286</field>
    <field name="keywords"></field>
    <field name="text">duplication_t dup_t dup has_frame std::chrono::steady_clock::time_point last_protected_content_warning_time init display_base_t display const ::video::config_t config capture_e next_frame DXGI_OUTDUPL_FRAME_INFO frame_info std::chrono::milliseconds timeout resource_t::pointer res_p capture_e reset dup_t::pointer dup_p dup_t::pointer capture_e release_frame duplication_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00303</field>
    <field name="keywords"></field>
    <field name="text">display_ddup_ram_t display_ram_t init const ::video::config_t config std::string display_name capture_e snapshot pull_free_image_cb_t pull_free_image_cb std::shared_ptr&lt;platf::img_t&gt; img_out std::chrono::milliseconds timeout cursor_visible capture_e release_snapshot duplication_t dup cursor_t cursor</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00316</field>
    <field name="keywords"></field>
    <field name="text">display_ddup_vram_t display_vram_t init const ::video::config_t config std::string display_name capture_e snapshot pull_free_image_cb_t pull_free_image_cb std::shared_ptr&lt;platf::img_t&gt; img_out std::chrono::milliseconds timeout cursor_visible capture_e release_snapshot duplication_t dup sampler_state_t sampler_linear blend_t blend_alpha blend_t blend_invert blend_t blend_disable ps_t cursor_ps vs_t cursor_vs gpu_cursor_t cursor_alpha gpu_cursor_t cursor_xor texture2d_t old_surface_delayed_destruction std::chrono::steady_clock::time_point old_surface_timestamp std::variant&lt;std::monostate, texture2d_t, std::shared_ptr&lt;platf::img_t&gt; last_frame_variant</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00343</field>
    <field name="keywords"></field>
    <field name="text">wgc_capture_t winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice uwp_device winrt::Windows::Graphics::Capture::GraphicsCaptureItem item winrt::Windows::Graphics::Capture::Direct3D11CaptureFramePool frame_pool winrt::Windows::Graphics::Capture::GraphicsCaptureSession capture_session winrt::Windows::Graphics::Capture::Direct3D11CaptureFrame produced_frame consumed_frame SRWLOCK frame_lock SRWLOCK_INIT CONDITION_VARIABLE frame_present_cv on_frame_arrived winrt::Windows::Graphics::Capture::Direct3D11CaptureFramePool sender winrt::Windows::Foundation::IInspectable wgc_capture_t init display_base_t display const ::video::config_t config capture_e next_frame std::chrono::milliseconds timeout ID3D11Texture2D out uint64_t out_time capture_e release_frame set_cursor_visible</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00367</field>
    <field name="keywords"></field>
    <field name="text">display_wgc_ram_t display_ram_t wgc_capture_t dup init const ::video::config_t config std::string display_name capture_e snapshot pull_free_image_cb_t pull_free_image_cb std::shared_ptr&lt;platf::img_t&gt; img_out std::chrono::milliseconds timeout cursor_visible capture_e release_snapshot</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display.h</field>
    <field name="url">display_8h_source.html#l00379</field>
    <field name="keywords"></field>
    <field name="text">display_wgc_vram_t display_vram_t wgc_capture_t dup init const ::video::config_t config std::string display_name capture_e snapshot pull_free_image_cb_t pull_free_image_cb std::shared_ptr&lt;platf::img_t&gt; img_out std::chrono::milliseconds timeout cursor_visible capture_e release_snapshot</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">display.mm</field>
    <field name="url">display_8mm.html</field>
    <field name="keywords">display.mm</field>
    <field name="text">Definitions for display capture on macOS</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">display_base.cpp</field>
    <field name="url">display__base_8cpp.html</field>
    <field name="keywords">display_base.cpp</field>
    <field name="text">Definitions for the Windows display base code</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::NtGdiDdDDIGetCachedHybridQueryValueHook</field>
    <field name="args">(D3DKMT_GPU_PREFERENCE_QUERY_STATE *gpuPreference)</field>
    <field name="url">display__base_8cpp.html#a08ebb9095905bea34b2fba229efe942f</field>
    <field name="keywords">NtGdiDdDDIGetCachedHybridQueryValueHook platf::dxgi::NtGdiDdDDIGetCachedHybridQueryValueHook platf::dxgi</field>
    <field name="text">Hook for NtGdiDdDDIGetCachedHybridQueryValue() from win32u.dll gpuPreference A pointer to the location where the preference will be written Always STATUS_SUCCESS if valid arguments are provided</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::dxgi::test_dxgi_duplication</field>
    <field name="args">(adapter_t &amp;adapter, output_t &amp;output, bool enumeration_only)</field>
    <field name="url">display__base_8cpp.html#a7dcc9b98cb3ec611f2e57376b55134b0</field>
    <field name="keywords">test_dxgi_duplication platf::dxgi::test_dxgi_duplication platf::dxgi</field>
    <field name="text">Tests to determine if the Desktop Duplication API can capture the given output When testing for enumeration only we avoid resyncing the thread desktop adapter The DXGI adapter to use for capture output The DXGI output to capture enumeration_only Specifies whether this test is occurring for display enumeration</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">_D3DKMT_GPU_PREFERENCE_QUERY_STATE</field>
    <field name="url">display__base_8cpp.html#a93aaadd09fdeaf712c694b70a7987cba</field>
    <field name="keywords">_D3DKMT_GPU_PREFERENCE_QUERY_STATE</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">D3DKMT_GPU_PREFERENCE_STATE_UNSPECIFIED</field>
    <field name="url">display__base_8cpp.html#a93aaadd09fdeaf712c694b70a7987cbaa2cbadc2d4a22f12892a4c68c11ec2658</field>
    <field name="keywords">D3DKMT_GPU_PREFERENCE_STATE_UNSPECIFIED D3DKMT_GPU_PREFERENCE_STATE_UNSPECIFIED</field>
    <field name="text">A GPU preference isn t specified</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">D3DKMT_GPU_PREFERENCE_STATE_NOT_FOUND</field>
    <field name="url">display__base_8cpp.html#a93aaadd09fdeaf712c694b70a7987cbaa6cfd373db836fd717908ca8f82d6db2b</field>
    <field name="keywords">D3DKMT_GPU_PREFERENCE_STATE_NOT_FOUND D3DKMT_GPU_PREFERENCE_STATE_NOT_FOUND</field>
    <field name="text">A GPU preference isn t found</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">D3DKMT_GPU_PREFERENCE_STATE_HIGH_PERFORMANCE</field>
    <field name="url">display__base_8cpp.html#a93aaadd09fdeaf712c694b70a7987cbaa9a4415f1ee2cde72aff6bf5faee61153</field>
    <field name="keywords">D3DKMT_GPU_PREFERENCE_STATE_HIGH_PERFORMANCE D3DKMT_GPU_PREFERENCE_STATE_HIGH_PERFORMANCE</field>
    <field name="text">The highest performing GPU is preferred</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">D3DKMT_GPU_PREFERENCE_STATE_USER_SPECIFIED_GPU</field>
    <field name="url">display__base_8cpp.html#a93aaadd09fdeaf712c694b70a7987cbaadd9982aa226d4be62b0d00903fd19a0f</field>
    <field name="keywords">D3DKMT_GPU_PREFERENCE_STATE_USER_SPECIFIED_GPU D3DKMT_GPU_PREFERENCE_STATE_USER_SPECIFIED_GPU</field>
    <field name="text">A specific GPU is preferred</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">D3DKMT_GPU_PREFERENCE_STATE_MINIMUM_POWER</field>
    <field name="url">display__base_8cpp.html#a93aaadd09fdeaf712c694b70a7987cbaadff097c36e5568d3f9b6106bfa8e1bd0</field>
    <field name="keywords">D3DKMT_GPU_PREFERENCE_STATE_MINIMUM_POWER D3DKMT_GPU_PREFERENCE_STATE_MINIMUM_POWER</field>
    <field name="text">The minimum-powered GPU is preferred</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">D3DKMT_GPU_PREFERENCE_STATE_UNINITIALIZED</field>
    <field name="url">display__base_8cpp.html#a93aaadd09fdeaf712c694b70a7987cbaae207d37dcab2f44ee37f81338c158526</field>
    <field name="keywords">D3DKMT_GPU_PREFERENCE_STATE_UNINITIALIZED D3DKMT_GPU_PREFERENCE_STATE_UNINITIALIZED</field>
    <field name="text">The GPU preference isn t initialized</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">display_device.cpp</field>
    <field name="url">display__device_8cpp.html</field>
    <field name="keywords">display_device.cpp</field>
    <field name="text">Definitions for display device handling std::shared_ptr&lt;rtsp_stream::launch_session_t&gt; launch_session config::video_t video_config config::video configure_display video_config launch_session SingleDisplayConfiguration valid_config configure_display valid_config devices enumerate_devices config::video_t video_config config::video init_guard init video_config mapped_name_config map_output_name config::video output_name mapped_name_custom map_output_name std::shared_ptr&lt;rtsp_stream::launch_session_t&gt; launch_session config::video_t video_config config::video config parse_configuration video_config launch_session parsed_config std::get_if&lt;SingleDisplayConfiguration&gt; result parsed_config configure_display config result reset_persistence revert_configuration</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">display_device::parse_configuration</field>
    <field name="args">(const config::video_t &amp;video_config, const rtsp_stream::launch_session_t &amp;session)</field>
    <field name="url">display__device_8cpp.html#a13d7db8105180dedd47832acaf0fd8ac</field>
    <field name="keywords">parse_configuration display_device::parse_configuration display_device</field>
    <field name="text">Parse the user configuration and the session information video_config User s video related configuration session Session information Parsed single display configuration or a tag indicating that the parsing has failed or a tag indicating that the user does not want to perform any configuration Examples Parse the user configuration and the session information video_config User s video related configuration session Session information Parsed single display configuration or a tag indicating that the parsing has failed or a tag indicating that the user does not want to perform any configuration Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">display_device::revert_configuration</field>
    <field name="args">()</field>
    <field name="url">display__device_8cpp.html#a1be8d50acef1df106cfa5d79fa17c048</field>
    <field name="keywords">revert_configuration display_device::revert_configuration display_device</field>
    <field name="text">Revert the display configuration and restore the previous state In case the state could not be restored by default it will be retried again in 5 seconds repeating indefinitely until success or until persistence is reset Examples Revert the display configuration and restore the previous state In case the state could not be restored by default it will be retried again in 5 seconds repeating indefinitely until success or until persistence is reset Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">display_device::init</field>
    <field name="args">(const std::filesystem::path &amp;persistence_filepath, const config::video_t &amp;video_config)</field>
    <field name="url">display__device_8cpp.html#a1fde5866033facfcff45422ebacd05d7</field>
    <field name="keywords">init display_device::init display_device</field>
    <field name="text">Initialize the implementation and perform the initial state recovery if needed persistence_filepath File location for reading/saving persistent state video_config User s video related configuration A deinit_t instance that performs cleanup when destroyed Examples Initialize the implementation and perform the initial state recovery if needed persistence_filepath File location for reading/saving persistent state video_config User s video related configuration A deinit_t instance that performs cleanup when destroyed Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">display_device::configure_display</field>
    <field name="args">(const SingleDisplayConfiguration &amp;config)</field>
    <field name="url">display__device_8cpp.html#a327c6fb42eeeb82185bbc3af3cf20979</field>
    <field name="keywords">configure_display display_device::configure_display display_device</field>
    <field name="text">Configure the display device using the provided configuration In some cases configuring display can fail due to transient issues and we will keep trying every 5 seconds even if the stream has already started as there was no possibility to apply settings before the stream start Therefore there is no return value as we still want to continue with the stream so that the users can do something about it once they are connected Otherwise we might prevent users from logging in at all if we keep failing to apply configuration config Configuration for the display Examples Configure the display device using the provided configuration In some cases configuring display can fail due to transient issues and we will keep trying every 5 seconds even if the stream has already started as there was no possibility to apply settings before the stream start Therefore there is no return value as we still want to continue with the stream so that the users can do something about it once they are connected Otherwise we might prevent users from logging in at all if we keep failing to apply configuration config Configuration for the display Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">display_device::configure_display</field>
    <field name="args">(const config::video_t &amp;video_config, const rtsp_stream::launch_session_t &amp;session)</field>
    <field name="url">display__device_8cpp.html#a32ad14466b4ee7982d208efd29012354</field>
    <field name="keywords">configure_display display_device::configure_display display_device</field>
    <field name="text">Configure the display device based on the user configuration and the session information This is a convenience method for calling similar method of a different signature video_config User s video related configuration session Session information Examples Configure the display device based on the user configuration and the session information This is a convenience method for calling similar method of a different signature video_config User s video related configuration session Session information Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">display_device::enumerate_devices</field>
    <field name="args">()</field>
    <field name="url">display__device_8cpp.html#aa54ea423c6d3d3cce1c9f30a0935228d</field>
    <field name="keywords">enumerate_devices display_device::enumerate_devices display_device</field>
    <field name="text">Enumerate the available devices A list of devices Examples Enumerate the available devices A list of devices Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">display_device::reset_persistence</field>
    <field name="args">()</field>
    <field name="url">display__device_8cpp.html#abbe93253aa71514fa18accdb45ef1390</field>
    <field name="keywords">reset_persistence display_device::reset_persistence display_device</field>
    <field name="text">Reset the persistence and currently held initial display state This is normally used to get out of the state where the algorithm wants to restore the initial display state but it is no longer possible This could happen if the display is no longer available or the hardware was changed and the device ids no longer match The user then accepts that Sunshine is not able to restore the state and to do it manually True if persistence was reset false otherwise Whether the function succeeds or fails any of the scheduled from other methods will be stopped to not interfere with the user actions Examples Reset the persistence and currently held initial display state This is normally used to get out of the state where the algorithm wants to restore the initial display state but it is no longer possible This could happen if the display is no longer available or the hardware was changed and the device ids no longer match The user then accepts that Sunshine is not able to restore the state and to do it manually True if persistence was reset false otherwise Whether the function succeeds or fails any of the scheduled from other methods will be stopped to not interfere with the user actions Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">display_device::map_output_name</field>
    <field name="args">(const std::string &amp;output_name)</field>
    <field name="url">display__device_8cpp.html#acbec3c2e5a77f8d7906407110bcf5ff5</field>
    <field name="keywords">map_output_name display_device::map_output_name display_device</field>
    <field name="text">Map the output name to a specific display output_name The user-configurable output name Mapped display name or empty string if the output name could not be mapped Examples Map the output name to a specific display output_name The user-configurable output name Mapped display name or empty string if the output name could not be mapped Examples</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">display_device.h</field>
    <field name="url">display__device_8h.html</field>
    <field name="keywords">display_device.h</field>
    <field name="text">Declarations for display device handling std::shared_ptr&lt;rtsp_stream::launch_session_t&gt; launch_session config::video_t video_config config::video configure_display video_config launch_session SingleDisplayConfiguration valid_config configure_display valid_config devices enumerate_devices config::video_t video_config config::video init_guard init video_config mapped_name_config map_output_name config::video output_name mapped_name_custom map_output_name std::shared_ptr&lt;rtsp_stream::launch_session_t&gt; launch_session config::video_t video_config config::video config parse_configuration video_config launch_session parsed_config std::get_if&lt;SingleDisplayConfiguration&gt; result parsed_config configure_display config result reset_persistence revert_configuration</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display_device.h</field>
    <field name="url">display__device_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">platf platf::deinit_t config config::video_t rtsp_stream rtsp_stream::launch_session_t display_device nodiscard std::unique_ptr&lt;platf::deinit_t&gt; display_device::init std::filesystem::path persistence_filepath config::video_t video_config nodiscard std::string display_device::map_output_name std::string output_name display_device::configure_display config::video_t video_config rtsp_stream::launch_session_t session display_device::configure_display SingleDisplayConfiguration config display_device::revert_configuration nodiscard display_device::reset_persistence nodiscard EnumeratedDeviceList display_device::enumerate_devices</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display_device.h</field>
    <field name="url">display__device_8h_source.html#l00136</field>
    <field name="keywords"></field>
    <field name="text">failed_to_parse_tag_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">display_device.h</field>
    <field name="url">display__device_8h_source.html#l00141</field>
    <field name="keywords"></field>
    <field name="text">configuration_disabled_tag_t nodiscard std::variant&lt;failed_to_parse_tag_t, configuration_disabled_tag_t, SingleDisplayConfiguration&gt; parse_configuration config::video_t video_config rtsp_stream::launch_session_t session</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">display_ram.cpp</field>
    <field name="url">display__ram_8cpp.html</field>
    <field name="keywords">display_ram.cpp</field>
    <field name="text">Definitions for handling ram</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">display_vram.cpp</field>
    <field name="url">display__vram_8cpp.html</field>
    <field name="keywords">display_vram.cpp</field>
    <field name="text">Definitions for handling video ram</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">compile_pixel_shader_helper</field>
    <field name="args">(x)</field>
    <field name="url">display__vram_8cpp.html#a1d6f1670bcc604593b0d506fc55cd5d4</field>
    <field name="keywords"></field>
    <field name="text">x _hlsl compile_pixel_shader SUNSHINE_SHADERS_DIR x</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">create_pixel_shader_helper</field>
    <field name="args">(x, y)</field>
    <field name="url">display__vram_8cpp.html#a836176c9470b7b4c3fdb359e76ed3cb0</field>
    <field name="keywords"></field>
    <field name="text">FAILED status device CreatePixelShader x GetBufferPointer x GetBufferSize y error x util::log_hex status</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">compile_vertex_shader_helper</field>
    <field name="args">(x)</field>
    <field name="url">display__vram_8cpp.html#a83772907784882b4b31c0a78f6b9b98b</field>
    <field name="keywords"></field>
    <field name="text">x _hlsl compile_vertex_shader SUNSHINE_SHADERS_DIR x</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">create_vertex_shader_helper</field>
    <field name="args">(x, y)</field>
    <field name="url">display__vram_8cpp.html#ab3a2fa125fecd7e7ea1b2e5c4483e6aa</field>
    <field name="keywords"></field>
    <field name="text">FAILED status device CreateVertexShader x GetBufferPointer x GetBufferSize y error x util::log_hex status</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">display_wgc.cpp</field>
    <field name="url">display__wgc_8cpp.html</field>
    <field name="keywords">display_wgc.cpp</field>
    <field name="text">Definitions for WinRT Windows.Graphics.Capture API</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">driver_settings.cpp</field>
    <field name="url">driver__settings_8cpp.html</field>
    <field name="keywords">driver_settings.cpp</field>
    <field name="text">Definitions for nvidia driver settings</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">driver_settings.h</field>
    <field name="url">driver__settings_8h.html</field>
    <field name="keywords">driver_settings.h</field>
    <field name="text">Declarations for nvidia driver settings</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">driver_settings.h</field>
    <field name="url">driver__settings_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvprefs</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">driver_settings.h</field>
    <field name="url">driver__settings_8h_source.html#l00020</field>
    <field name="keywords"></field>
    <field name="text">driver_settings_t driver_settings_t init destroy load_settings save_settings restore_global_profile_to_undo undo_data_t undo_data check_and_modify_global_profile std::optional&lt;undo_data_t&gt; undo_data check_and_modify_application_profile modified NvDRSSessionHandle session_handle</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">entry_handler.cpp</field>
    <field name="url">entry__handler_8cpp.html</field>
    <field name="keywords">entry_handler.cpp</field>
    <field name="text">Definitions for entry handling functions launch_ui launch_ui_with_path</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">is_gamestream_enabled</field>
    <field name="args">()</field>
    <field name="url">entry__handler_8cpp.html#a39bf41a200ad1895d8d63a5eb5dce272</field>
    <field name="keywords">is_gamestream_enabled</field>
    <field name="text">Check if NVIDIA s GameStream software is running true if GameStream is enabled false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">log_publisher_data</field>
    <field name="args">()</field>
    <field name="url">entry__handler_8cpp.html#a4f63b41eac6c27a64a19bcf19480a17f</field>
    <field name="keywords">log_publisher_data</field>
    <field name="text">Log the publisher metadata provided from CMake</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">launch_ui_with_path</field>
    <field name="args">(std::string path)</field>
    <field name="url">entry__handler_8cpp.html#a5c66c6be8635c0105bf23adcd50ca9f8</field>
    <field name="keywords">launch_ui_with_path</field>
    <field name="text">Launch the Web UI at a specific endpoint Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">launch_ui</field>
    <field name="args">()</field>
    <field name="url">entry__handler_8cpp.html#aef839c87a542565d71844c2dd6fa12c1</field>
    <field name="keywords">launch_ui</field>
    <field name="text">Launch the Web UI Examples</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">entry_handler.h</field>
    <field name="url">entry__handler_8h.html</field>
    <field name="keywords">entry_handler.h</field>
    <field name="text">Declarations for entry handling functions launch_ui launch_ui_with_path</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">is_gamestream_enabled</field>
    <field name="args">()</field>
    <field name="url">entry__handler_8h.html#a39bf41a200ad1895d8d63a5eb5dce272</field>
    <field name="keywords">is_gamestream_enabled</field>
    <field name="text">Check if NVIDIA s GameStream software is running true if GameStream is enabled false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">log_publisher_data</field>
    <field name="args">()</field>
    <field name="url">entry__handler_8h.html#a4f63b41eac6c27a64a19bcf19480a17f</field>
    <field name="keywords">log_publisher_data</field>
    <field name="text">Log the publisher metadata provided from CMake</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">launch_ui_with_path</field>
    <field name="args">(std::string path)</field>
    <field name="url">entry__handler_8h.html#a5c66c6be8635c0105bf23adcd50ca9f8</field>
    <field name="keywords">launch_ui_with_path</field>
    <field name="text">Launch the Web UI at a specific endpoint Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">launch_ui</field>
    <field name="args">()</field>
    <field name="url">entry__handler_8h.html#aef839c87a542565d71844c2dd6fa12c1</field>
    <field name="keywords">launch_ui</field>
    <field name="text">Launch the Web UI Examples</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">entry_handler.h</field>
    <field name="url">entry__handler_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">launch_ui launch_ui_with_path std::string path args creds name argc argv help name version restore_nvprefs_undo lifetime argv std::atomic_int desired_exit_code exit_sunshine exit_code async debug_trap get_argv log_publisher_data is_gamestream_enabled service_ctrl is_service_running start_service wait_for_ui_ready</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">file_handler.cpp</field>
    <field name="url">file__handler_8cpp.html</field>
    <field name="keywords">file_handler.cpp</field>
    <field name="text">Definitions for file handling functions</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">file_handler.h</field>
    <field name="url">file__handler_8h.html</field>
    <field name="keywords">file_handler.h</field>
    <field name="text">Declarations for file handling functions</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">file_handler.h</field>
    <field name="url">file__handler_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">file_handler std::string get_parent_directory std::string path make_directory std::string path std::string read_file path write_file path std::string_view contents</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">globals.cpp</field>
    <field name="url">globals_8cpp.html</field>
    <field name="keywords">globals.cpp</field>
    <field name="text">Definitions for globally accessible variables and functions</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">task_pool</field>
    <field name="url">globals_8cpp.html#a13fbca386ee2f67e4a011aca224895f7</field>
    <field name="keywords">task_pool</field>
    <field name="text">A thread pool for processing tasks</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">nvprefs_instance</field>
    <field name="url">globals_8cpp.html#a5bcd785403dc9c5200477d7f32b00103</field>
    <field name="keywords">nvprefs_instance</field>
    <field name="text">A global singleton used for NVIDIA control panel modifications</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">display_cursor</field>
    <field name="url">globals_8cpp.html#abeb52d853aa3622d70b50c58c91dce71</field>
    <field name="keywords">display_cursor</field>
    <field name="text">A boolean flag to indicate whether the cursor should be displayed</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">globals.h</field>
    <field name="url">globals_8h.html</field>
    <field name="keywords">globals.h</field>
    <field name="text">Declarations for globally accessible variables and functions</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">task_pool</field>
    <field name="url">globals_8h.html#a13fbca386ee2f67e4a011aca224895f7</field>
    <field name="keywords">task_pool</field>
    <field name="text">A thread pool for processing tasks</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">nvprefs_instance</field>
    <field name="url">globals_8h.html#a5bcd785403dc9c5200477d7f32b00103</field>
    <field name="keywords">nvprefs_instance</field>
    <field name="text">A global singleton used for NVIDIA control panel modifications</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAIL</field>
    <field name="args">(x)</field>
    <field name="url">globals_8h.html#aa3ee7970e6b675d35d4268f7a2213f2d</field>
    <field name="keywords"></field>
    <field name="text">x std::string_view</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">display_cursor</field>
    <field name="url">globals_8h.html#abeb52d853aa3622d70b50c58c91dce71</field>
    <field name="keywords">display_cursor</field>
    <field name="text">A boolean flag to indicate whether the cursor should be displayed</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">globals.h</field>
    <field name="url">globals_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">thread_pool_util::ThreadPool task_pool display_cursor nvprefs::nvprefs_interface nvprefs_instance</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">globals.h</field>
    <field name="url">globals_8h_source.html#l00034</field>
    <field name="keywords"></field>
    <field name="text">mail safe::mail_t man MAIL shutdown MAIL broadcast_shutdown MAIL video_packets MAIL audio_packets MAIL switch_display MAIL touch_port MAIL idr MAIL invalidate_ref_frames MAIL gamepad_feedback MAIL hdr</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">graph_legend.dox</field>
    <field name="url">graph__legend_8dox.html</field>
    <field name="keywords"></field>
    <field name="text">Invisible Truncated Invisible Undocumented PublicBase Truncated Templ ProtectedBase PrivateBase Used Inherited PublicBase ProtectedBase PrivateBase Undocumented Templ Used m_usedClass</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">graphics.cpp</field>
    <field name="url">graphics_8cpp.html</field>
    <field name="keywords">graphics.cpp</field>
    <field name="text">Definitions for graphics related functions</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">fourcc_code</field>
    <field name="args">(a, b, c, d)</field>
    <field name="url">graphics_8cpp.html#aa22aaae0f0619113f80ec577f4cf7944</field>
    <field name="keywords"></field>
    <field name="text">std::uint32_t a std::uint32_t b std::uint32_t c std::uint32_t d</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">egl::create_blank</field>
    <field name="args">(platf::img_t &amp;img)</field>
    <field name="url">graphics_8cpp.html#ab6e56cd9bbb050e7d8c91a6f9d340750</field>
    <field name="keywords">create_blank egl::create_blank egl</field>
    <field name="text">Create a black RGB texture of the specified image size img The image to use for texture sizing The new RGB texture Create a black RGB texture of the specified image size img The image to use for texture sizing The new RGB texture</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">egl::create_target</field>
    <field name="args">(int width, int height, AVPixelFormat format)</field>
    <field name="url">graphics_8cpp.html#ac8247aa0b757f300b02245a8b57a721c</field>
    <field name="keywords">create_target egl::create_target egl</field>
    <field name="text">Create biplanar YUV textures to render into Creates biplanar YUV textures to render into width Width of the target frame height Height of the target frame format Format of the target frame The new RGB texture Create biplanar YUV textures to render into Creates biplanar YUV textures to render into width Width of the target frame height Height of the target frame format Format of the target frame The new RGB texture</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">fourcc_mod_code</field>
    <field name="args">(vendor, val)</field>
    <field name="url">graphics_8cpp.html#ae34909604573f5cdc407be4d8af1f1ab</field>
    <field name="keywords"></field>
    <field name="text">uint64_t vendor val</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">egl::surface_descriptor_to_egl_attribs</field>
    <field name="args">(const surface_descriptor_t &amp;surface)</field>
    <field name="url">graphics_8cpp.html#afd1f8568cacfa266ab9b07da71457269</field>
    <field name="keywords">surface_descriptor_to_egl_attribs egl::surface_descriptor_to_egl_attribs egl</field>
    <field name="text">Get EGL attributes for eglCreateImage() to import the provided surface surface The surface descriptor Vector of EGL attributes</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h.html</field>
    <field name="keywords">graphics.h</field>
    <field name="text">Declarations for graphics related functions</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">SUNSHINE_STRINGIFY_HELPER</field>
    <field name="args">(x)</field>
    <field name="url">graphics_8h.html#a13fad8fc990269f15f81de5d5d0c3b66</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">SUNSHINE_STRINGIFY</field>
    <field name="args">(x)</field>
    <field name="url">graphics_8h.html#a638fdce28e21b738aa074085174a3856</field>
    <field name="keywords"></field>
    <field name="text">SUNSHINE_STRINGIFY_HELPER x</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">gl_drain_errors_helper</field>
    <field name="args">(x)</field>
    <field name="url">graphics_8h.html#adfb310d7df92db570a9ff99cd911e005</field>
    <field name="keywords"></field>
    <field name="text">gl::drain_errors x</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">close __fd _XDisplay AVFrame free_frame AVFrame frame frame_t util::safe_ptr&lt;AVFrame, free_frame&gt; gl GladGLContext ctx drain_errors std::string_view prefix</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00041</field>
    <field name="keywords"></field>
    <field name="text">tex_t util::buffer_t util::buffer_t GLuint tex_t tex_t tex_t operator= tex_t tex_t make std::size_t count</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00053</field>
    <field name="keywords"></field>
    <field name="text">frame_buf_t util::buffer_t util::buffer_t GLuint frame_buf_t frame_buf_t frame_buf_t operator= frame_buf_t frame_buf_t make std::size_t count bind std::nullptr_t std::nullptr_t x fb ctx BindFramebuffer GL_FRAMEBUFFER fb ctx FramebufferTexture GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 x x bind It it_begin It it_end std::literals std::distance it_begin it_end size BOOST_LOG warning sv x std::for_each it_begin it_end tex ctx BindFramebuffer GL_FRAMEBUFFER x ctx BindTexture GL_TEXTURE_2D tex ctx FramebufferTexture GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 x tex x copy texture offset_x offset_y width height</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00100</field>
    <field name="keywords"></field>
    <field name="text">shader_t KITTY_USING_MOVE_T shader_internal_t GLuint std::numeric_limits&lt;GLuint&gt;::max el std::numeric_limits&lt;GLuint&gt;::max ctx DeleteShader el std::string err_str util::Either&lt;shader_t, std::string&gt; compile std::string_view source GLenum type GLuint handle shader_internal_t _shader</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00118</field>
    <field name="keywords"></field>
    <field name="text">buffer_t KITTY_USING_MOVE_T buffer_internal_t GLuint std::numeric_limits&lt;GLuint&gt;::max el std::numeric_limits&lt;GLuint&gt;::max ctx DeleteBuffers el buffer_t make util::buffer_t&lt;GLint&gt; offsets block std::string_view data GLuint handle block update std::string_view view std::size_t offset update std::string_view members std::size_t count std::size_t offset _block std::size_t _size util::buffer_t&lt;GLint&gt; _offsets buffer_internal_t _buffer</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00145</field>
    <field name="keywords"></field>
    <field name="text">program_t KITTY_USING_MOVE_T program_internal_t GLuint std::numeric_limits&lt;GLuint&gt;::max el std::numeric_limits&lt;GLuint&gt;::max ctx DeleteProgram el std::string err_str util::Either&lt;program_t, std::string&gt; link shader_t vert shader_t frag bind buffer_t buffer std::optional&lt;buffer_t&gt; uniform block std::pair&lt;const char *, std::string_view&gt; members std::size_t count GLuint handle program_internal_t _program gbm device void device_destroy_fn device gbm device fd device_destroy_fn device_destroy create_device_fn create_device gbm_t util::dyn_safe_ptr&lt;device, &amp;device_destroy&gt; init egl display_t util::dyn_safe_ptr_v2&lt;void, EGLBoolean, &amp;eglTerminate&gt;</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00185</field>
    <field name="keywords"></field>
    <field name="text">rgb_img_t display_t::pointer display EGLImage xrgb8 gl::tex_t tex</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00192</field>
    <field name="keywords"></field>
    <field name="text">nv12_img_t display_t::pointer display EGLImage r8 EGLImage bg88 gl::tex_t tex gl::frame_buf_t buf std::size_t num_fds std::array&lt;file_t, num_fds&gt; fds KITTY_USING_MOVE_T rgb_t rgb_img_t el xrgb8 eglDestroyImage el display el xrgb8 KITTY_USING_MOVE_T nv12_t egl::nv12_img_t el r8 eglDestroyImage el display el r8 el bg88 eglDestroyImage el display el bg88 KITTY_USING_MOVE_T ctx_t std::tuple&lt;display_t::pointer, EGLContext&gt; TUPLE_2D_REF disp ctx el ctx eglMakeCurrent disp EGL_NO_SURFACE EGL_NO_SURFACE EGL_NO_CONTEXT eglDestroyContext disp ctx</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00230</field>
    <field name="keywords"></field>
    <field name="text">surface_descriptor_t width height fds std::uint32_t fourcc std::uint64_t modifier std::uint32_t pitches std::uint32_t offsets display_t make_display std::variant&lt;gbm::gbm_t::pointer, wl_display *, _XDisplay *&gt; native_display std::optional&lt;ctx_t&gt; make_ctx display_t::pointer display std::optional&lt;rgb_t&gt; import_source display_t::pointer egl_display surface_descriptor_t xrgb rgb_t create_blank platf::img_t img std::optional&lt;nv12_t&gt; import_target display_t::pointer egl_display std::array&lt;file_t, nv12_img_t::num_fds&gt; fds surface_descriptor_t y surface_descriptor_t uv std::optional&lt;nv12_t&gt; create_target width height AVPixelFormat format</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00267</field>
    <field name="keywords"></field>
    <field name="text">cursor_t platf::img_t x y src_w src_h serial std::vector&lt;std::uint8_t&gt; buffer</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00278</field>
    <field name="keywords"></field>
    <field name="text">img_descriptor_t cursor_t img_descriptor_t reset reset x x x sd fds x close sd fds x sd fds x surface_descriptor_t sd std::uint64_t sequence</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">graphics.h</field>
    <field name="url">graphics_8h_source.html#l00300</field>
    <field name="keywords"></field>
    <field name="text">sws_t std::optional&lt;sws_t&gt; make in_width in_height out_width out_height gl::tex_t tex std::optional&lt;sws_t&gt; make in_width in_height out_width out_height AVPixelFormat format convert gl::frame_buf_t fb blank gl::frame_buf_t fb offsetX offsetY width height load_ram platf::img_t img load_vram img_descriptor_t img offset_x offset_y texture apply_colorspace video::sunshine_colorspace_t colorspace gl::tex_t tex gl::frame_buf_t cursor_framebuffer gl::frame_buf_t copy_framebuffer gl::program_t program gl::buffer_t color_matrix out_width out_height in_width in_height offsetX offsetY loaded_texture std::uint64_t serial fail</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">httpcommon.cpp</field>
    <field name="url">httpcommon_8cpp.html</field>
    <field name="keywords">httpcommon.cpp</field>
    <field name="text">Definitions for common HTTP</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">httpcommon.h</field>
    <field name="url">httpcommon_8h.html</field>
    <field name="keywords">httpcommon.h</field>
    <field name="text">Declarations for common HTTP</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">httpcommon.h</field>
    <field name="url">httpcommon_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">http init create_creds std::string pkey std::string cert save_user_creds std::string file std::string username std::string password run_our_mouth reload_user_creds std::string file download_file std::string url std::string file ssl_version CURL_SSLVERSION_TLSv1_2 std::string url_escape std::string url std::string url_get_host std::string url std::string unique_id net::net_e origin_web_ui_allowed</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Sunshine</field>
    <field name="url">index.html</field>
    <field name="keywords">Sunshine</field>
    <field name="text">Sunshine Self-hosted game stream host for Moonlight ℹ️ About Sunshine is a self-hosted game stream host for Moonlight Offering low latency cloud gaming server capabilities with support for AMD Intel and Nvidia GPUs for hardware encoding Software encoding is also available You can connect to Sunshine from any Moonlight client on a variety of devices A web UI is provided to allow configuration and client pairing from your favorite web browser Pair from the local server or any mobile device LizardByte has the full documentation hosted on Read the Docs Stable Beta 🖥️ System Requirements Warning These tables are a work in progress Do not purchase hardware based on this information Minimum Requirements Component Requirement GPU AMD VCE 1.0 or higher see obs-amd hardware support Intel Linux VAAPI-compatible see VAAPI hardware support Windows Skylake or newer with QuickSync encoding support Nvidia NVENC enabled cards see nvenc support matrix CPU AMD Ryzen 3 or higher Intel Core i3 or higher RAM 4 GB or more OS Windows 1 0 Windows Server does not support virtual gamepads macOS 1 3 Linux/Debian 1 2 bookworm Linux/Fedora 4 0 Linux/Ubuntu 22.04 jammy Network Host 5 GHz 802.11ac Client 5 GHz 802.11ac 4 k Suggestions Component Requirement GPU AMD Video Coding Engine 3.1 or higher Intel Linux HD Graphics 5 1 0 or higher Windows Skylake or newer with QuickSync encoding support Nvidia GeForce GTX 1 0 8 0 or higher CPU AMD Ryzen 5 or higher Intel Core i5 or higher Network Host CAT5e ethernet or better Client CAT5e ethernet or better HDR Suggestions Component Requirement GPU AMD Video Coding Engine 3.4 or higher Intel HD Graphics 7 3 0 or higher Nvidia Pascal-based GPU GTX 1 0 series or higher CPU AMD Ryzen 5 or higher Intel Core i5 or higher Network Host CAT5e ethernet or better Client CAT5e ethernet or better ❓ Support Our support methods are listed in our LizardByte Docs 💲 Sponsors and Supporters 👥 Contributors Thank you to all the contributors who have helped make Sunshine better! GitHub CrowdIn Previous Next Getting Started Sunshine Sunshine Self-hosted game stream host for Moonlight ℹ️ About Sunshine is a self-hosted game stream host for Moonlight Offering low latency cloud gaming server capabilities with support for AMD Intel and Nvidia GPUs for hardware encoding Software encoding is also available You can connect to Sunshine from any Moonlight client on a variety of devices A web UI is provided to allow configuration and client pairing from your favorite web browser Pair from the local server or any mobile device LizardByte has the full documentation hosted on Read the Docs Stable Beta 🖥️ System Requirements Warning These tables are a work in progress Do not purchase hardware based on this information Minimum Requirements Component Requirement GPU AMD VCE 1.0 or higher see obs-amd hardware support Intel Linux VAAPI-compatible see VAAPI hardware support Windows Skylake or newer with QuickSync encoding support Nvidia NVENC enabled cards see nvenc support matrix CPU AMD Ryzen 3 or higher Intel Core i3 or higher RAM 4 GB or more OS Windows 1 0 Windows Server does not support virtual gamepads macOS 1 3 Linux/Debian 1 2 bookworm Linux/Fedora 4 0 Linux/Ubuntu 22.04 jammy Network Host 5 GHz 802.11ac Client 5 GHz 802.11ac 4 k Suggestions Component Requirement GPU AMD Video Coding Engine 3.1 or higher Intel Linux HD Graphics 5 1 0 or higher Windows Skylake or newer with QuickSync encoding support Nvidia GeForce GTX 1 0 8 0 or higher CPU AMD Ryzen 5 or higher Intel Core i5 or higher Network Host CAT5e ethernet or better Client CAT5e ethernet or better HDR Suggestions Component Requirement GPU AMD Video Coding Engine 3.4 or higher Intel HD Graphics 7 3 0 or higher Nvidia Pascal-based GPU GTX 1 0 series or higher CPU AMD Ryzen 5 or higher Intel Core i5 or higher Network Host CAT5e ethernet or better Client CAT5e ethernet or better ❓ Support Our support methods are listed in our LizardByte Docs 💲 Sponsors and Supporters 👥 Contributors Thank you to all the contributors who have helped make Sunshine better! GitHub CrowdIn Previous Next Getting Started</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">input.cpp</field>
    <field name="url">input_8cpp.html</field>
    <field name="keywords">input.cpp</field>
    <field name="text">Definitions for gamepad keyboard and mouse input handling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::batch</field>
    <field name="args">(PSS_CONTROLLER_TOUCH_PACKET dest, PSS_CONTROLLER_TOUCH_PACKET src)</field>
    <field name="url">input_8cpp.html#a006df2de8f6938c65b63c623bdbe0393</field>
    <field name="keywords">batch input::batch input</field>
    <field name="text">Batch two controller touch messages dest The original packet to batch into src A later packet to attempt to batch The status of the batching operation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::batch</field>
    <field name="args">(PSS_PEN_PACKET dest, PSS_PEN_PACKET src)</field>
    <field name="url">input_8cpp.html#a0a7ea04eb710f4cd7416f8279a533227</field>
    <field name="keywords">batch input::batch input</field>
    <field name="text">Batch two pen messages dest The original packet to batch into src A later packet to attempt to batch The status of the batching operation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::print</field>
    <field name="args">(PSS_PEN_PACKET packet)</field>
    <field name="url">input_8cpp.html#a14a514864eab370e04ab5e7070b21c68</field>
    <field name="keywords">print input::print input</field>
    <field name="text">Prints a pen packet packet The pen packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::multiply_polar_by_cartesian_scalar</field>
    <field name="args">(float r, float angle, const std::pair&lt; float, float &gt; &amp;scalar)</field>
    <field name="url">input_8cpp.html#a1d21aa2a3fe500a8ce406e1fbd31413e</field>
    <field name="keywords">multiply_polar_by_cartesian_scalar input::multiply_polar_by_cartesian_scalar input</field>
    <field name="text">Multiply a polar coordinate pair by a cartesian scaling factor r The radial coordinate angle The angular coordinate radians scalar The scalar cartesian coordinate pair The scaled radial coordinate</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::client_to_touchport</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; &amp;input, const std::pair&lt; float, float &gt; &amp;val, const std::pair&lt; float, float &gt; &amp;size)</field>
    <field name="url">input_8cpp.html#a1f04a179250e28dd05b1d081ef036bbd</field>
    <field name="keywords">client_to_touchport input::client_to_touchport input</field>
    <field name="text">Converts client coordinates on the specified surface into screen coordinates input The input context val The cartesian coordinate pair to convert size The size of the client s surface containing the value The host-relative coordinate pair if a touchport is available</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::from_clamped_netfloat</field>
    <field name="args">(netfloat f, float min, float max)</field>
    <field name="url">input_8cpp.html#a266549c8fbaf0546cef80151a9c66e64</field>
    <field name="keywords">from_clamped_netfloat input::from_clamped_netfloat input</field>
    <field name="text">Convert a little-endian netfloat to a native endianness float and clamps it f Netfloat value min The minimium value for clamping max The maximum value for clamping Clamped native endianess float value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::batch</field>
    <field name="args">(PNV_MULTI_CONTROLLER_PACKET dest, PNV_MULTI_CONTROLLER_PACKET src)</field>
    <field name="url">input_8cpp.html#a29701503edc3533014721b4b866e274d</field>
    <field name="keywords">batch input::batch input</field>
    <field name="text">Batch two controller state messages dest The original packet to batch into src A later packet to attempt to batch The status of the batching operation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::print</field>
    <field name="args">(PSS_CONTROLLER_ARRIVAL_PACKET packet)</field>
    <field name="url">input_8cpp.html#a4a855a49e2f3382fea25521f01c353db</field>
    <field name="keywords">print input::print input</field>
    <field name="text">Prints a controller arrival packet packet The controller arrival packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::print</field>
    <field name="args">(PSS_CONTROLLER_BATTERY_PACKET packet)</field>
    <field name="url">input_8cpp.html#a549f1c84eb2f7c6d456cdf301ddad6d8</field>
    <field name="keywords">print input::print input</field>
    <field name="text">Prints a controller battery packet packet The controller battery packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::batch</field>
    <field name="args">(PNV_INPUT_HEADER dest, PNV_INPUT_HEADER src)</field>
    <field name="url">input_8cpp.html#a6287d3c8835014d7c30494f7ca45d866</field>
    <field name="keywords">batch input::batch input</field>
    <field name="text">Batch two input messages dest The original packet to batch into src A later packet to attempt to batch The status of the batching operation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::passthrough</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; &amp;input, PSS_TOUCH_PACKET packet)</field>
    <field name="url">input_8cpp.html#a6358d683b9a530f878aea6cb7f870f98</field>
    <field name="keywords">passthrough input::passthrough input</field>
    <field name="text">Called to pass a touch message to the platform backend input The input context pointer packet The touch packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::batch</field>
    <field name="args">(PSS_TOUCH_PACKET dest, PSS_TOUCH_PACKET src)</field>
    <field name="url">input_8cpp.html#a6543f32910395353a9c2b6e13d14d535</field>
    <field name="keywords">batch input::batch input</field>
    <field name="text">Batch two touch messages dest The original packet to batch into src A later packet to attempt to batch The status of the batching operation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::passthrough</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; &amp;input, PSS_CONTROLLER_BATTERY_PACKET packet)</field>
    <field name="url">input_8cpp.html#a6e928c0127c986c41cfc5ef5401efe56</field>
    <field name="keywords">passthrough input::passthrough input</field>
    <field name="text">Called to pass a controller battery message to the platform backend input The input context pointer packet The controller battery packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::passthrough</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; &amp;input, std::vector&lt; std::uint8_t &gt; &amp;&amp;input_data)</field>
    <field name="url">input_8cpp.html#a7e83c827f0e4577ae679589160a95f0e</field>
    <field name="keywords">passthrough input::passthrough input</field>
    <field name="text">Called on the control stream thread to queue an input message input The input context pointer input_data The input message Called on the control stream thread to queue an input message input The input context pointer input_data The input message</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::from_netfloat</field>
    <field name="args">(netfloat f)</field>
    <field name="url">input_8cpp.html#a8174e152222055a94ecfa71d7591ac60</field>
    <field name="keywords">from_netfloat input::from_netfloat input</field>
    <field name="text">Convert a little-endian netfloat to a native endianness float f Netfloat value The native endianness float value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::batch</field>
    <field name="args">(PSS_HSCROLL_PACKET dest, PSS_HSCROLL_PACKET src)</field>
    <field name="url">input_8cpp.html#a87724a1f73b79a5aca30ea4a9a0e804a</field>
    <field name="keywords">batch input::batch input</field>
    <field name="text">Batch two horizontal scroll messages dest The original packet to batch into src A later packet to attempt to batch The status of the batching operation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::batch</field>
    <field name="args">(PSS_CONTROLLER_MOTION_PACKET dest, PSS_CONTROLLER_MOTION_PACKET src)</field>
    <field name="url">input_8cpp.html#a877f8805dd390193ffbdf43ad08094ff</field>
    <field name="keywords">batch input::batch input</field>
    <field name="text">Batch two controller motion messages dest The original packet to batch into src A later packet to attempt to batch The status of the batching operation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::passthrough</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; &amp;input, PSS_CONTROLLER_TOUCH_PACKET packet)</field>
    <field name="url">input_8cpp.html#a8ff72c99ac8ba047baea7850391e3959</field>
    <field name="keywords">passthrough input::passthrough input</field>
    <field name="text">Called to pass a controller touch message to the platform backend input The input context pointer packet The controller touch packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::print</field>
    <field name="args">(PSS_TOUCH_PACKET packet)</field>
    <field name="url">input_8cpp.html#a95167f128d7a7d0670f2f41b92b27945</field>
    <field name="keywords">print input::print input</field>
    <field name="text">Prints a touch packet packet The touch packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::passthrough</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; &amp;input, PSS_HSCROLL_PACKET packet)</field>
    <field name="url">input_8cpp.html#a9eddd12a22e534559925fc36ce4cd51d</field>
    <field name="keywords">passthrough input::passthrough input</field>
    <field name="text">Called to pass a horizontal scroll message the platform backend input The input context pointer packet The scroll packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::update_shortcutFlags</field>
    <field name="args">(int *flags, short keyCode, bool release)</field>
    <field name="url">input_8cpp.html#aa2516be3a463094ee4c55b0aae2de2f1</field>
    <field name="keywords">update_shortcutFlags input::update_shortcutFlags input</field>
    <field name="text">Update flags for keyboard shortcut combo s</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::print</field>
    <field name="args">(PSS_CONTROLLER_TOUCH_PACKET packet)</field>
    <field name="url">input_8cpp.html#aa928670a9f878023ba9b8954aed56d0f</field>
    <field name="keywords">print input::print input</field>
    <field name="text">Prints a controller touch packet packet The controller touch packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::scale_client_contact_area</field>
    <field name="args">(const std::pair&lt; float, float &gt; &amp;val, uint16_t rotation, const std::pair&lt; float, float &gt; &amp;scalar)</field>
    <field name="url">input_8cpp.html#aad1a158f9b68a3e9fe1bda77d5163d21</field>
    <field name="keywords">scale_client_contact_area input::scale_client_contact_area input</field>
    <field name="text">Scale the ellipse axes according to the provided size val The major and minor axis pair rotation The rotation value from the touch/pen event scalar The scalar cartesian coordinate pair The major and minor axis pair Scale the ellipse axes according to the provided size val The major and minor axis pair rotation The rotation value from the touch/pen event scalar The scalar cartesian coordinate pair The major and minor axis pair</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::print</field>
    <field name="args">(PSS_CONTROLLER_MOTION_PACKET packet)</field>
    <field name="url">input_8cpp.html#ab60fda9d401cb6d2b2b5dc7677fcb85d</field>
    <field name="keywords">print input::print input</field>
    <field name="text">Prints a controller motion packet packet The controller motion packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::passthrough</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; &amp;input, PSS_CONTROLLER_ARRIVAL_PACKET packet)</field>
    <field name="url">input_8cpp.html#ab61807a1ffe676844425114c222e4aeb</field>
    <field name="keywords">passthrough input::passthrough input</field>
    <field name="text">Called to pass a controller arrival message to the platform backend input The input context pointer packet The controller arrival packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::batch</field>
    <field name="args">(PNV_REL_MOUSE_MOVE_PACKET dest, PNV_REL_MOUSE_MOVE_PACKET src)</field>
    <field name="url">input_8cpp.html#ab9528d585904167e1c4ab291af46d5ee</field>
    <field name="keywords">batch input::batch input</field>
    <field name="text">Batch two relative mouse messages dest The original packet to batch into src A later packet to attempt to batch The status of the batching operation</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">input::button_state_e</field>
    <field name="url">input_8cpp.html#abb88f2ec1e52eb1411618fe2dba71c42</field>
    <field name="keywords">button_state_e input::button_state_e input</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">input::button_state_e::NONE</field>
    <field name="url">input_8cpp.html#abb88f2ec1e52eb1411618fe2dba71c42ab50339a10e1de285ac99d4c3990b8693</field>
    <field name="keywords">NONE input::button_state_e::NONE NONE input::button_state_e::NONE</field>
    <field name="text">No button state</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">input::button_state_e::DOWN</field>
    <field name="url">input_8cpp.html#abb88f2ec1e52eb1411618fe2dba71c42ac4e0e4e3118472beeb2ae75827450f1f</field>
    <field name="keywords">DOWN input::button_state_e::DOWN DOWN input::button_state_e::DOWN</field>
    <field name="text">Button is down</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">input::button_state_e::UP</field>
    <field name="url">input_8cpp.html#abb88f2ec1e52eb1411618fe2dba71c42afbaedde498cdead4f2780217646e9ba1</field>
    <field name="keywords">UP input::button_state_e::UP UP input::button_state_e::UP</field>
    <field name="text">Button is up</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::passthrough_next_message</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; input)</field>
    <field name="url">input_8cpp.html#aca5debddd043eebbcee092fc2baf9e06</field>
    <field name="keywords">passthrough_next_message input::passthrough_next_message input</field>
    <field name="text">Called on a thread pool thread to process an input message input The input context pointer</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">input::batch_result_e</field>
    <field name="url">input_8cpp.html#acba8febd1e0c287e7f94b4058fc87e53</field>
    <field name="keywords">batch_result_e input::batch_result_e input</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">input::batch_result_e::terminate_batch</field>
    <field name="url">input_8cpp.html#acba8febd1e0c287e7f94b4058fc87e53a015d04616194bb2e0e2ab5092acd3d9a</field>
    <field name="keywords">terminate_batch input::batch_result_e::terminate_batch terminate_batch input::batch_result_e::terminate_batch</field>
    <field name="text">Stop trying to batch with this entry</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">input::batch_result_e::not_batchable</field>
    <field name="url">input_8cpp.html#acba8febd1e0c287e7f94b4058fc87e53a39df9acb132bb045629bed6d0de9dbd4</field>
    <field name="keywords">not_batchable input::batch_result_e::not_batchable not_batchable input::batch_result_e::not_batchable</field>
    <field name="text">Not eligible to batch but continue attempts to batch</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">input::batch_result_e::batched</field>
    <field name="url">input_8cpp.html#acba8febd1e0c287e7f94b4058fc87e53ad2f6520849a4f012d0af6bbd2854b0c7</field>
    <field name="keywords">batched input::batch_result_e::batched batched input::batch_result_e::batched</field>
    <field name="text">This entry was batched with the source entry</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::apply_shortcut</field>
    <field name="args">(short keyCode)</field>
    <field name="url">input_8cpp.html#acfc2bcc29812506c9fcaa7643c0e7fc8</field>
    <field name="keywords">apply_shortcut input::apply_shortcut input</field>
    <field name="text">Apply shortcut based on VKEY keyCode The VKEY code 0 if no shortcut applied 0 if shortcut applied</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::passthrough</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; &amp;input, PNV_SCROLL_PACKET packet)</field>
    <field name="url">input_8cpp.html#ad82f91d9e83cbcc56a969fb85bcba4a2</field>
    <field name="keywords">passthrough input::passthrough input</field>
    <field name="text">Called to pass a vertical scroll message the platform backend input The input context pointer packet The scroll packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::passthrough</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; &amp;input, PSS_PEN_PACKET packet)</field>
    <field name="url">input_8cpp.html#ae007439539023488e95c0fd5be290cff</field>
    <field name="keywords">passthrough input::passthrough input</field>
    <field name="text">Called to pass a pen message to the platform backend input The input context pointer packet The pen packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::passthrough</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; &amp;input, PNV_MOUSE_BUTTON_PACKET packet)</field>
    <field name="url">input_8cpp.html#ae72cdf307da7ea38aa58a614fe648b68</field>
    <field name="keywords">passthrough input::passthrough input</field>
    <field name="text">When Moonlight sends mouse input through absolute coordinates it s possible that BUTTON_RIGHT is pressed down immediately after releasing BUTTON_LEFT As a result Sunshine will left-click on hyperlinks in the browser before right-clicking This can be solved by delaying BUTTON_LEFT however any delay on input is undesirable during gaming As a compromise Sunshine will only put delays on BUTTON_LEFT when absolute mouse coordinates have been sent Try to make sure BUTTON_RIGHT gets called before BUTTON_LEFT is released input- mouse_left_button_timeout can only be nullptr when the last mouse coordinates were absolute</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::passthrough</field>
    <field name="args">(std::shared_ptr&lt; input_t &gt; &amp;input, PSS_CONTROLLER_MOTION_PACKET packet)</field>
    <field name="url">input_8cpp.html#af3b2f0bb464c376f7634397f695811cd</field>
    <field name="keywords">passthrough input::passthrough input</field>
    <field name="text">Called to pass a controller motion message to the platform backend input The input context pointer packet The controller motion packet</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::batch</field>
    <field name="args">(PNV_SCROLL_PACKET dest, PNV_SCROLL_PACKET src)</field>
    <field name="url">input_8cpp.html#af826a1070be3edf54a2ef5a4de707517</field>
    <field name="keywords">batch input::batch input</field>
    <field name="text">Batch two vertical scroll messages dest The original packet to batch into src A later packet to attempt to batch The status of the batching operation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">input::batch</field>
    <field name="args">(PNV_ABS_MOUSE_MOVE_PACKET dest, PNV_ABS_MOUSE_MOVE_PACKET src)</field>
    <field name="url">input_8cpp.html#af95d8d56f1fe634e87df5896538af322</field>
    <field name="keywords">batch input::batch input</field>
    <field name="text">Batch two absolute mouse messages dest The original packet to batch into src A later packet to attempt to batch The status of the batching operation</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">input.h</field>
    <field name="url">input_8h.html</field>
    <field name="keywords">input.h</field>
    <field name="text">Declarations for gamepad keyboard and mouse input handling</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">input.h</field>
    <field name="url">input_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">input input::input_t print input reset std::shared_ptr&lt;input_t&gt; input passthrough std::shared_ptr&lt;input_t&gt; input std::vector&lt;std::uint8_t&gt; input_data nodiscard std::unique_ptr&lt;platf::deinit_t&gt; init probe_gamepads std::shared_ptr&lt;input_t&gt; alloc safe::mail_t mail</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">input.h</field>
    <field name="url">input_8h_source.html#l00027</field>
    <field name="keywords"></field>
    <field name="text">touch_port_t platf::touch_port_t env_width env_height client_offsetX client_offsetY scalar_inv bool width height env_width env_height std::pair&lt;float, float&gt; scale_client_contact_area std::pair&lt;float, float&gt; val uint16_t rotation std::pair&lt;float, float&gt; scalar</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino.cpp</field>
    <field name="url">inputtino_8cpp.html</field>
    <field name="keywords">inputtino.cpp</field>
    <field name="text">Definitions for the inputtino Linux input handling x y get_mouse_loc input</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino_common.h</field>
    <field name="url">inputtino__common_8h.html</field>
    <field name="keywords">inputtino_common.h</field>
    <field name="text">Declarations for inputtino common input handling</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_common.h</field>
    <field name="url">inputtino__common_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">std::literals platf joypads_t std::variant&lt;inputtino::XboxOneJoypad, inputtino::SwitchJoypad, inputtino::PS5Joypad&gt;</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_common.h</field>
    <field name="url">inputtino__common_8h_source.html#l00024</field>
    <field name="keywords"></field>
    <field name="text">joypad_state std::unique_ptr&lt;joypads_t&gt; joypad gamepad_feedback_msg_t last_rumble gamepad_feedback_msg_t last_rgb_led</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_common.h</field>
    <field name="url">inputtino__common_8h_source.html#l00030</field>
    <field name="keywords"></field>
    <field name="text">input_raw_t input_raw_t mouse inputtino::Mouse::create name vendor_id product_id version keyboard inputtino::Keyboard::create name vendor_id product_id version gamepads MAX_GAMEPADS mouse BOOST_LOG warning mouse getErrorMessage keyboard BOOST_LOG warning keyboard getErrorMessage inputtino::Result&lt;inputtino::Mouse&gt; mouse inputtino::Result&lt;inputtino::Keyboard&gt; keyboard</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_common.h</field>
    <field name="url">inputtino__common_8h_source.html#l00063</field>
    <field name="keywords"></field>
    <field name="text">std::vector&lt;std::shared_ptr&lt;joypad_state&gt; gamepads</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_common.h</field>
    <field name="url">inputtino__common_8h_source.html#l00066</field>
    <field name="keywords"></field>
    <field name="text">client_input_raw_t client_input_t client_input_raw_t input_t input touch inputtino::TouchScreen::create name vendor_id product_id version pen inputtino::PenTablet::create name vendor_id product_id version global input_raw_t input get touch BOOST_LOG warning touch getErrorMessage pen BOOST_LOG warning pen getErrorMessage input_raw_t global inputtino::Result&lt;inputtino::TouchScreen&gt; touch inputtino::Result&lt;inputtino::PenTablet&gt; pen deg2rad degree degree M_PI</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino_gamepad.cpp</field>
    <field name="url">inputtino__gamepad_8cpp.html</field>
    <field name="keywords">inputtino_gamepad.cpp</field>
    <field name="text">Definitions for inputtino gamepad input handling</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::gamepad::GamepadStatus</field>
    <field name="url">inputtino__gamepad_8cpp.html#af4264f54e5cee87b78b635f9f6188c40</field>
    <field name="keywords">GamepadStatus platf::gamepad::GamepadStatus platf::gamepad</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad::XINPUT_NOT_AVAILABLE</field>
    <field name="url">inputtino__gamepad_8cpp.html#af4264f54e5cee87b78b635f9f6188c40a8a8befa7b808d2bc29e6cfa2e67a772f</field>
    <field name="keywords">XINPUT_NOT_AVAILABLE platf::gamepad::XINPUT_NOT_AVAILABLE platf::gamepad XINPUT_NOT_AVAILABLE platf::gamepad::XINPUT_NOT_AVAILABLE platf::gamepad</field>
    <field name="text">XINPUT is not available</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad::GAMEPAD_STATUS</field>
    <field name="url">inputtino__gamepad_8cpp.html#af4264f54e5cee87b78b635f9f6188c40ae415bd7f38767ba4a46971b3c69cc686</field>
    <field name="keywords">GAMEPAD_STATUS platf::gamepad::GAMEPAD_STATUS platf::gamepad GAMEPAD_STATUS platf::gamepad::GAMEPAD_STATUS platf::gamepad</field>
    <field name="text">Helper to indicate the number of status</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad::UHID_NOT_AVAILABLE</field>
    <field name="url">inputtino__gamepad_8cpp.html#af4264f54e5cee87b78b635f9f6188c40ae8351daf426d11eccec10ae79a8b6fec</field>
    <field name="keywords">UHID_NOT_AVAILABLE platf::gamepad::UHID_NOT_AVAILABLE platf::gamepad UHID_NOT_AVAILABLE platf::gamepad::UHID_NOT_AVAILABLE platf::gamepad</field>
    <field name="text">UHID is not available</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad::UINPUT_NOT_AVAILABLE</field>
    <field name="url">inputtino__gamepad_8cpp.html#af4264f54e5cee87b78b635f9f6188c40aedc344e177927d8265915935364d2e3a</field>
    <field name="keywords">UINPUT_NOT_AVAILABLE platf::gamepad::UINPUT_NOT_AVAILABLE platf::gamepad UINPUT_NOT_AVAILABLE platf::gamepad::UINPUT_NOT_AVAILABLE platf::gamepad</field>
    <field name="text">UINPUT is not available</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino_gamepad.h</field>
    <field name="url">inputtino__gamepad_8h.html</field>
    <field name="keywords">inputtino_gamepad.h</field>
    <field name="text">Declarations for inputtino gamepad input handling</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::gamepad::ControllerType</field>
    <field name="url">inputtino__gamepad_8h.html#a0aa3f0d4cda85adf87dcd1a74ab045cf</field>
    <field name="keywords">ControllerType platf::gamepad::ControllerType platf::gamepad</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad::XboxOneWired</field>
    <field name="url">inputtino__gamepad_8h.html#a0aa3f0d4cda85adf87dcd1a74ab045cfaefc7977dab8a1ab14276c6d86b19ce16</field>
    <field name="keywords">XboxOneWired platf::gamepad::XboxOneWired platf::gamepad XboxOneWired platf::gamepad::XboxOneWired platf::gamepad</field>
    <field name="text">Xbox One Wired Controller</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad::DualSenseWired</field>
    <field name="url">inputtino__gamepad_8h.html#a0aa3f0d4cda85adf87dcd1a74ab045cfaf1e31e96332ac48a76a56589fa12e1c1</field>
    <field name="keywords">DualSenseWired platf::gamepad::DualSenseWired platf::gamepad DualSenseWired platf::gamepad::DualSenseWired platf::gamepad</field>
    <field name="text">DualSense Wired Controller</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::gamepad::SwitchProWired</field>
    <field name="url">inputtino__gamepad_8h.html#a0aa3f0d4cda85adf87dcd1a74ab045cfaf6f69f243d848004b56cf88852cb4d21</field>
    <field name="keywords">SwitchProWired platf::gamepad::SwitchProWired platf::gamepad SwitchProWired platf::gamepad::SwitchProWired platf::gamepad</field>
    <field name="text">Switch Pro Wired Controller</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_gamepad.h</field>
    <field name="url">inputtino__gamepad_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">std::literals platf::gamepad</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_gamepad.h</field>
    <field name="url">inputtino__gamepad_8h_source.html#l00020</field>
    <field name="keywords"></field>
    <field name="text">ControllerType</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_gamepad.h</field>
    <field name="url">inputtino__gamepad_8h_source.html#l00021</field>
    <field name="keywords"></field>
    <field name="text">XboxOneWired</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_gamepad.h</field>
    <field name="url">inputtino__gamepad_8h_source.html#l00022</field>
    <field name="keywords"></field>
    <field name="text">DualSenseWired</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_gamepad.h</field>
    <field name="url">inputtino__gamepad_8h_source.html#l00023</field>
    <field name="keywords"></field>
    <field name="text">SwitchProWired alloc input_raw_t raw gamepad_id_t gamepad_arrival_t metadata feedback_queue_t feedback_queue free input_raw_t raw nr update input_raw_t raw nr gamepad_state_t gamepad_state touch input_raw_t raw gamepad_touch_t touch motion input_raw_t raw gamepad_motion_t motion battery input_raw_t raw gamepad_battery_t battery std::vector&lt;supported_gamepad_t&gt; supported_gamepads input_t input</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino_keyboard.cpp</field>
    <field name="url">inputtino__keyboard_8cpp.html</field>
    <field name="keywords">inputtino_keyboard.cpp</field>
    <field name="text">Definitions for inputtino keyboard input handling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::keyboard::to_hex</field>
    <field name="args">(const std::basic_string&lt; char32_t &gt; &amp;str)</field>
    <field name="url">inputtino__keyboard_8cpp.html#a653050a45f1610a8b841de7d14dfe0f3</field>
    <field name="keywords">to_hex platf::keyboard::to_hex platf::keyboard</field>
    <field name="text">Takes an UTF-32 encoded string and returns a hex string representation of the bytes uppercase ex 👱 see UTF encoding at adapted from</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino_keyboard.h</field>
    <field name="url">inputtino__keyboard_8h.html</field>
    <field name="keywords">inputtino_keyboard.h</field>
    <field name="text">Declarations for inputtino keyboard input handling</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_keyboard.h</field>
    <field name="url">inputtino__keyboard_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">std::literals platf::keyboard update input_raw_t raw uint16_t modcode release uint8_t flags unicode input_raw_t raw utf8 size</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino_mouse.cpp</field>
    <field name="url">inputtino__mouse_8cpp.html</field>
    <field name="keywords">inputtino_mouse.cpp</field>
    <field name="text">Definitions for inputtino mouse input handling</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino_mouse.h</field>
    <field name="url">inputtino__mouse_8h.html</field>
    <field name="keywords">inputtino_mouse.h</field>
    <field name="text">Declarations for inputtino mouse input handling</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_mouse.h</field>
    <field name="url">inputtino__mouse_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">std::literals platf::mouse move input_raw_t raw deltaX deltaY move_abs input_raw_t raw touch_port_t touch_port x y button input_raw_t raw button release scroll input_raw_t raw high_res_distance hscroll input_raw_t raw high_res_distance util::point_t get_location input_raw_t raw</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino_pen.cpp</field>
    <field name="url">inputtino__pen_8cpp.html</field>
    <field name="keywords">inputtino_pen.cpp</field>
    <field name="text">Definitions for inputtino pen input handling</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino_pen.h</field>
    <field name="url">inputtino__pen_8h.html</field>
    <field name="keywords">inputtino_pen.h</field>
    <field name="text">Declarations for inputtino pen input handling</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_pen.h</field>
    <field name="url">inputtino__pen_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">std::literals platf::pen update client_input_raw_t raw touch_port_t touch_port pen_input_t pen</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino_touch.cpp</field>
    <field name="url">inputtino__touch_8cpp.html</field>
    <field name="keywords">inputtino_touch.cpp</field>
    <field name="text">Definitions for inputtino touch input handling</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">inputtino_touch.h</field>
    <field name="url">inputtino__touch_8h.html</field>
    <field name="keywords">inputtino_touch.h</field>
    <field name="text">Declarations for inputtino touch input handling</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">inputtino_touch.h</field>
    <field name="url">inputtino__touch_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">std::literals platf::touch update client_input_raw_t raw touch_port_t touch_port touch_input_t touch</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">AVAudio</field>
    <field name="url">interfaceAVAudio.html</field>
    <field name="keywords">AVAudio</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">AVVideo</field>
    <field name="url">interfaceAVVideo.html</field>
    <field name="keywords">AVVideo</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">keylayout.h</field>
    <field name="url">keylayout_8h.html</field>
    <field name="keywords">keylayout.h</field>
    <field name="text">Keyboard layout mapping for scancode translation</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">keylayout.h</field>
    <field name="url">keylayout_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">platf std::array&lt;std::uint8_t, std::numeric_limits&lt;std::uint8_t&gt;::max VK_TO_SCANCODE_MAP</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">kmsgrab.cpp</field>
    <field name="url">kmsgrab_8cpp.html</field>
    <field name="keywords">kmsgrab.cpp</field>
    <field name="text">Definitions for KMS screen capture</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">_CONVERT</field>
    <field name="args">(x, y)</field>
    <field name="url">kmsgrab_8cpp.html#a600984f774bccf3a6885efb8e869fdad</field>
    <field name="keywords"></field>
    <field name="text">x DRM_MODE_CONNECTOR_ y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::correlate_to_wayland</field>
    <field name="args">(std::vector&lt; kms::card_descriptor_t &gt; &amp;cds)</field>
    <field name="url">kmsgrab_8cpp.html#a667ff867c3a34ba1c7e3b98f467c4268</field>
    <field name="keywords">correlate_to_wayland platf::correlate_to_wayland platf</field>
    <field name="text">On Wayland it s not possible to determine the position of the monitor on the desktop with KMS Wayland does allow applications to query attached monitors on the desktop however the naming scheme is not standardized across implementations As a result correlating the KMS output to the wayland outputs is guess work at best But it s necessary for absolute mouse coordinates to work This is an ugly hack</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">misc.cpp</field>
    <field name="url">linux_2misc_8cpp.html</field>
    <field name="keywords">misc.cpp</field>
    <field name="text">Miscellaneous definitions for Linux</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::run_command</field>
    <field name="args">(bool elevated, bool interactive, const std::string &amp;cmd, boost::filesystem::path &amp;working_dir, const bp::environment &amp;env, FILE *file, std::error_code &amp;ec, bp::group *group)</field>
    <field name="url">linux_2misc_8cpp.html#a5d2544e4e425c501adbc4a2cc0ced119</field>
    <field name="keywords">run_command platf::run_command platf</field>
    <field name="text">Run a command on the users profile Launches a child process as the user using the current user s environment and a specific working directory elevated Specify whether to elevate the process interactive Specify whether this will run in a window or hidden cmd The command to run working_dir The working directory for the new process env The environment variables to use for the new process file A file object to redirect the child process s output to may be nullptr ec An error code set to indicate any errors that occur during the launch process group A pointer to a bp::group object to which the new process should belong may be nullptr A bp::child object representing the new process or an empty bp::child object if the launch fails Run a command on the users profile Launches a child process as the user using the current user s environment and a specific working directory elevated Specify whether to elevate the process interactive Specify whether this will run in a window or hidden cmd The command to run working_dir The working directory for the new process env The environment variables to use for the new process file A file object to redirect the child process s output to may be nullptr ec An error code set to indicate any errors that occur during the launch process group A pointer to a bp::group object to which the new process should belong may be nullptr A bp::child object representing the new process or an empty bp::child object if the launch fails Run a command on the users profile Launches a child process as the user using the current user s environment and a specific working directory elevated Specify whether to elevate the process interactive Specify whether this will run in a window or hidden cmd The command to run working_dir The working directory for the new process env The environment variables to use for the new process file A file object to redirect the child process s output to may be nullptr ec An error code set to indicate any errors that occur during the launch process group A pointer to a bp::group object to which the new process should belong may be nullptr A bp::child object representing the new process or an empty bp::child object if the launch fails</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">platf::source::source_e</field>
    <field name="url">linux_2misc_8cpp.html#a716f1a9bd8d07133d9f212e776aa2a1d</field>
    <field name="keywords">source_e platf::source::source_e platf::source</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::source::WAYLAND</field>
    <field name="url">linux_2misc_8cpp.html#a716f1a9bd8d07133d9f212e776aa2a1da2bbed4bc55c143df4f504bdf217456c0</field>
    <field name="keywords">WAYLAND platf::source::WAYLAND platf::source WAYLAND platf::source::WAYLAND platf::source</field>
    <field name="text">Wayland</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">platf::source::MAX_FLAGS</field>
    <field name="url">linux_2misc_8cpp.html#a716f1a9bd8d07133d9f212e776aa2a1daaf298205963ef34d9c71eca25288325b</field>
    <field name="keywords">MAX_FLAGS platf::source::MAX_FLAGS platf::source MAX_FLAGS platf::source::MAX_FLAGS platf::source</field>
    <field name="text">The maximum number of flags</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">misc.h</field>
    <field name="url">linux_2misc_8h.html</field>
    <field name="keywords">misc.h</field>
    <field name="text">Miscellaneous declarations for Linux</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">window_system_e</field>
    <field name="url">linux_2misc_8h.html#ae2fcf4cf6cb3c46f5bc4f8ff047963d7</field>
    <field name="keywords">window_system_e</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">window_system_e::WAYLAND</field>
    <field name="url">linux_2misc_8h.html#ae2fcf4cf6cb3c46f5bc4f8ff047963d7a53a3bc62607b5863dd83a3d4cbcdafc2</field>
    <field name="keywords">WAYLAND window_system_e::WAYLAND WAYLAND window_system_e::WAYLAND</field>
    <field name="text">Wayland</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">window_system_e::NONE</field>
    <field name="url">linux_2misc_8h.html#ae2fcf4cf6cb3c46f5bc4f8ff047963d7ab50339a10e1de285ac99d4c3990b8693</field>
    <field name="keywords">NONE window_system_e::NONE NONE window_system_e::NONE</field>
    <field name="text">No window system</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">window_system_e::X11</field>
    <field name="url">linux_2misc_8h.html#ae2fcf4cf6cb3c46f5bc4f8ff047963d7ad21ab1ce30c9c7735c0591317f50ab85</field>
    <field name="keywords">X11 window_system_e::X11 X11 window_system_e::X11</field>
    <field name="text">X11</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">misc.h</field>
    <field name="url">linux_2misc_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KITTY_USING_MOVE_T file_t el close el</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">misc.h</field>
    <field name="url">linux_2misc_8h_source.html#l00020</field>
    <field name="keywords"></field>
    <field name="text">window_system_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">misc.h</field>
    <field name="url">linux_2misc_8h_source.html#l00021</field>
    <field name="keywords"></field>
    <field name="text">NONE</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">misc.h</field>
    <field name="url">linux_2misc_8h_source.html#l00022</field>
    <field name="keywords"></field>
    <field name="text">X11</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">misc.h</field>
    <field name="url">linux_2misc_8h_source.html#l00023</field>
    <field name="keywords"></field>
    <field name="text">WAYLAND window_system_e window_system dyn void apiproc void load handle std::vector std::tuple&lt;apiproc *, const char *&gt; funcs strict handle std::vector&lt;const char *&gt; libs</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">publish.cpp</field>
    <field name="url">linux_2publish_8cpp.html</field>
    <field name="keywords">publish.cpp</field>
    <field name="text">Definitions for publishing services on Linux Adapted from</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">avahi::proto</field>
    <field name="url">linux_2publish_8cpp.html#a234f5bd32cf7c7137d0824480916522e</field>
    <field name="keywords">proto avahi::proto avahi</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PROTO_INET6</field>
    <field name="url">linux_2publish_8cpp.html#a234f5bd32cf7c7137d0824480916522ea17bffe5a2fc23627cc72694e3aaac927</field>
    <field name="keywords">PROTO_INET6 avahi::PROTO_INET6 avahi PROTO_INET6 avahi::PROTO_INET6 avahi</field>
    <field name="text">IPv6</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PROTO_INET</field>
    <field name="url">linux_2publish_8cpp.html#a234f5bd32cf7c7137d0824480916522ea96c2cdfb360aa70c55caec9559a96f08</field>
    <field name="keywords">PROTO_INET avahi::PROTO_INET avahi PROTO_INET avahi::PROTO_INET avahi</field>
    <field name="text">IPv4</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PROTO_UNSPEC</field>
    <field name="url">linux_2publish_8cpp.html#a234f5bd32cf7c7137d0824480916522eacf36d994dcb129790a4fc28ee0c2a770</field>
    <field name="keywords">PROTO_UNSPEC avahi::PROTO_UNSPEC avahi PROTO_UNSPEC avahi::PROTO_UNSPEC avahi</field>
    <field name="text">Unspecified/all protocol(s)</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">avahi::ServerState</field>
    <field name="url">linux_2publish_8cpp.html#a407a20280509c14ad7f52660452fb1b0</field>
    <field name="keywords">ServerState avahi::ServerState avahi</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::SERVER_INVALID</field>
    <field name="url">linux_2publish_8cpp.html#a407a20280509c14ad7f52660452fb1b0a6970618277814dd8b03f615509a0cfca</field>
    <field name="keywords">SERVER_INVALID avahi::SERVER_INVALID avahi SERVER_INVALID avahi::SERVER_INVALID avahi</field>
    <field name="text">Invalid state initial</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::SERVER_FAILURE</field>
    <field name="url">linux_2publish_8cpp.html#a407a20280509c14ad7f52660452fb1b0a6b70a7592e86d510f79c2b93e244c7d2</field>
    <field name="keywords">SERVER_FAILURE avahi::SERVER_FAILURE avahi SERVER_FAILURE avahi::SERVER_FAILURE avahi</field>
    <field name="text">Some fatal failure happened the server is unable to proceed</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::SERVER_COLLISION</field>
    <field name="url">linux_2publish_8cpp.html#a407a20280509c14ad7f52660452fb1b0a868ae578fa0dc3d4615843a8ca55ae60</field>
    <field name="keywords">SERVER_COLLISION avahi::SERVER_COLLISION avahi SERVER_COLLISION avahi::SERVER_COLLISION avahi</field>
    <field name="text">There is a collision with a host RR All host RRs have been withdrawn the user should set a new host name via avahi_server_set_host_name()</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::SERVER_REGISTERING</field>
    <field name="url">linux_2publish_8cpp.html#a407a20280509c14ad7f52660452fb1b0ab6925663a360093cbde826aceebf3736</field>
    <field name="keywords">SERVER_REGISTERING avahi::SERVER_REGISTERING avahi SERVER_REGISTERING avahi::SERVER_REGISTERING avahi</field>
    <field name="text">Host RRs are being registered</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::SERVER_RUNNING</field>
    <field name="url">linux_2publish_8cpp.html#a407a20280509c14ad7f52660452fb1b0abbf50f57d394f0c7857444cda535c8a3</field>
    <field name="keywords">SERVER_RUNNING avahi::SERVER_RUNNING avahi SERVER_RUNNING avahi::SERVER_RUNNING avahi</field>
    <field name="text">All host RRs have been established</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">avahi::ClientState</field>
    <field name="url">linux_2publish_8cpp.html#a5b7933943075d04cbbb3d180148ea865</field>
    <field name="keywords">ClientState avahi::ClientState avahi</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::CLIENT_S_COLLISION</field>
    <field name="url">linux_2publish_8cpp.html#a5b7933943075d04cbbb3d180148ea865a0f6e1368904861bfa27ca3bd347766bb</field>
    <field name="keywords">CLIENT_S_COLLISION avahi::CLIENT_S_COLLISION avahi CLIENT_S_COLLISION avahi::CLIENT_S_COLLISION avahi</field>
    <field name="text">Server state COLLISION</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::CLIENT_FAILURE</field>
    <field name="url">linux_2publish_8cpp.html#a5b7933943075d04cbbb3d180148ea865ab5e48af87dc6f3ffcc29dc77617c391e</field>
    <field name="keywords">CLIENT_FAILURE avahi::CLIENT_FAILURE avahi CLIENT_FAILURE avahi::CLIENT_FAILURE avahi</field>
    <field name="text">Some kind of error happened on the client side</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::CLIENT_CONNECTING</field>
    <field name="url">linux_2publish_8cpp.html#a5b7933943075d04cbbb3d180148ea865ade7cc5393a97dd0a5a75602b802fd23f</field>
    <field name="keywords">CLIENT_CONNECTING avahi::CLIENT_CONNECTING avahi CLIENT_CONNECTING avahi::CLIENT_CONNECTING avahi</field>
    <field name="text">We re still connecting This state is only entered when AVAHI_CLIENT_NO_FAIL has been passed to avahi_client_new() and the daemon is not yet available</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::CLIENT_S_REGISTERING</field>
    <field name="url">linux_2publish_8cpp.html#a5b7933943075d04cbbb3d180148ea865af51b86361c3c360dfb43424414041f4b</field>
    <field name="keywords">CLIENT_S_REGISTERING avahi::CLIENT_S_REGISTERING avahi CLIENT_S_REGISTERING avahi::CLIENT_S_REGISTERING avahi</field>
    <field name="text">Server state REGISTERING</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::CLIENT_S_RUNNING</field>
    <field name="url">linux_2publish_8cpp.html#a5b7933943075d04cbbb3d180148ea865afbbe16701bff3f39ce462fa653eada96</field>
    <field name="keywords">CLIENT_S_RUNNING avahi::CLIENT_S_RUNNING avahi CLIENT_S_RUNNING avahi::CLIENT_S_RUNNING avahi</field>
    <field name="text">Server state RUNNING</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">avahi::ClientFlags</field>
    <field name="url">linux_2publish_8cpp.html#a7b9ec3c03e05d854125e8c9ac914531b</field>
    <field name="keywords">ClientFlags avahi::ClientFlags avahi</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::CLIENT_IGNORE_USER_CONFIG</field>
    <field name="url">linux_2publish_8cpp.html#a7b9ec3c03e05d854125e8c9ac914531ba3d76db753061ea04e718708753ae2a0e</field>
    <field name="keywords">CLIENT_IGNORE_USER_CONFIG avahi::CLIENT_IGNORE_USER_CONFIG avahi CLIENT_IGNORE_USER_CONFIG avahi::CLIENT_IGNORE_USER_CONFIG avahi</field>
    <field name="text">Don t read user configuration</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::CLIENT_NO_FAIL</field>
    <field name="url">linux_2publish_8cpp.html#a7b9ec3c03e05d854125e8c9ac914531ba44adc1335ff7eb8dc9e1426eefb8ba6f</field>
    <field name="keywords">CLIENT_NO_FAIL avahi::CLIENT_NO_FAIL avahi CLIENT_NO_FAIL avahi::CLIENT_NO_FAIL avahi</field>
    <field name="text">Don t fail if the daemon is not available when avahi_client_new() is called instead enter CLIENT_CONNECTING state and wait for the daemon to appear</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">avahi::PublishFlags</field>
    <field name="url">linux_2publish_8cpp.html#ab7e0c098482e6a9109930362983d55c2</field>
    <field name="keywords">PublishFlags avahi::PublishFlags avahi</field>
    <field name="text">Flags for publishing functions</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PUBLISH_NO_REVERSE</field>
    <field name="url">linux_2publish_8cpp.html#ab7e0c098482e6a9109930362983d55c2a2b702e77d1bdd4d75c109562afc9445d</field>
    <field name="keywords">PUBLISH_NO_REVERSE avahi::PUBLISH_NO_REVERSE avahi PUBLISH_NO_REVERSE avahi::PUBLISH_NO_REVERSE avahi</field>
    <field name="text">For address records don t create a reverse PTR entry</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PUBLISH_UPDATE</field>
    <field name="url">linux_2publish_8cpp.html#ab7e0c098482e6a9109930362983d55c2a53b99be6aed086f44ecada40f4a877da</field>
    <field name="keywords">PUBLISH_UPDATE avahi::PUBLISH_UPDATE avahi PUBLISH_UPDATE avahi::PUBLISH_UPDATE avahi</field>
    <field name="text">Update existing records instead of adding new ones</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PUBLISH_NO_COOKIE</field>
    <field name="url">linux_2publish_8cpp.html#ab7e0c098482e6a9109930362983d55c2a54c7bbfc83040b76adf3874cc4744773</field>
    <field name="keywords">PUBLISH_NO_COOKIE avahi::PUBLISH_NO_COOKIE avahi PUBLISH_NO_COOKIE avahi::PUBLISH_NO_COOKIE avahi</field>
    <field name="text">For service records do not implicitly add the local service cookie to TXT data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PUBLISH_NO_PROBE</field>
    <field name="url">linux_2publish_8cpp.html#ab7e0c098482e6a9109930362983d55c2a8a2db9cb09073f61f23e80d99d814bb7</field>
    <field name="keywords">PUBLISH_NO_PROBE avahi::PUBLISH_NO_PROBE avahi PUBLISH_NO_PROBE avahi::PUBLISH_NO_PROBE avahi</field>
    <field name="text">For raw records Though the RRset is intended to be unique no probes shall be sent</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PUBLISH_ALLOW_MULTIPLE</field>
    <field name="url">linux_2publish_8cpp.html#ab7e0c098482e6a9109930362983d55c2a9307a356eed6410e7fc6cc4244eb62fd</field>
    <field name="keywords">PUBLISH_ALLOW_MULTIPLE avahi::PUBLISH_ALLOW_MULTIPLE avahi PUBLISH_ALLOW_MULTIPLE avahi::PUBLISH_ALLOW_MULTIPLE avahi</field>
    <field name="text">For raw records Allow multiple local records of this type even if they are intended to be unique</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PUBLISH_UNIQUE</field>
    <field name="url">linux_2publish_8cpp.html#ab7e0c098482e6a9109930362983d55c2aaaf05a03162ced933ba72c409fba442f</field>
    <field name="keywords">PUBLISH_UNIQUE avahi::PUBLISH_UNIQUE avahi PUBLISH_UNIQUE avahi::PUBLISH_UNIQUE avahi</field>
    <field name="text">For raw records The RRset is intended to be unique</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PUBLISH_USE_WIDE_AREA</field>
    <field name="url">linux_2publish_8cpp.html#ab7e0c098482e6a9109930362983d55c2ab23914e6f5d519c4ff72058cfa6ea9f7</field>
    <field name="keywords">PUBLISH_USE_WIDE_AREA avahi::PUBLISH_USE_WIDE_AREA avahi PUBLISH_USE_WIDE_AREA avahi::PUBLISH_USE_WIDE_AREA avahi</field>
    <field name="text">Register the record using wide area DNS i.e unicast DNS update</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PUBLISH_USE_MULTICAST</field>
    <field name="url">linux_2publish_8cpp.html#ab7e0c098482e6a9109930362983d55c2ad1a254b71f77f0c06c6d39410eb53d21</field>
    <field name="keywords">PUBLISH_USE_MULTICAST avahi::PUBLISH_USE_MULTICAST avahi PUBLISH_USE_MULTICAST avahi::PUBLISH_USE_MULTICAST avahi</field>
    <field name="text">Register the record using multicast DNS</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::PUBLISH_NO_ANNOUNCE</field>
    <field name="url">linux_2publish_8cpp.html#ab7e0c098482e6a9109930362983d55c2af520cc2565c9763eceb54b3ee61d124b</field>
    <field name="keywords">PUBLISH_NO_ANNOUNCE avahi::PUBLISH_NO_ANNOUNCE avahi PUBLISH_NO_ANNOUNCE avahi::PUBLISH_NO_ANNOUNCE avahi</field>
    <field name="text">For raw records Do not announce this RR to other hosts</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">avahi::EntryGroupState</field>
    <field name="url">linux_2publish_8cpp.html#acb7575efbdd3e359d75d2347186cddac</field>
    <field name="keywords">EntryGroupState avahi::EntryGroupState avahi</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ENTRY_GROUP_COLLISION</field>
    <field name="url">linux_2publish_8cpp.html#acb7575efbdd3e359d75d2347186cddaca01f0440c0f50204076954f370cb86017</field>
    <field name="keywords">ENTRY_GROUP_COLLISION avahi::ENTRY_GROUP_COLLISION avahi ENTRY_GROUP_COLLISION avahi::ENTRY_GROUP_COLLISION avahi</field>
    <field name="text">A name collision for one of the entries in the group has been detected the entries have been withdrawn</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ENTRY_GROUP_UNCOMMITED</field>
    <field name="url">linux_2publish_8cpp.html#acb7575efbdd3e359d75d2347186cddaca62326f9c04414cd5e1bc6de73cb3b2ca</field>
    <field name="keywords">ENTRY_GROUP_UNCOMMITED avahi::ENTRY_GROUP_UNCOMMITED avahi ENTRY_GROUP_UNCOMMITED avahi::ENTRY_GROUP_UNCOMMITED avahi</field>
    <field name="text">The group has not yet been committed the user must still call avahi_entry_group_commit()</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ENTRY_GROUP_ESTABLISHED</field>
    <field name="url">linux_2publish_8cpp.html#acb7575efbdd3e359d75d2347186cddaca8eadb0d6bb2ccf0ad5e35239f4e66a4f</field>
    <field name="keywords">ENTRY_GROUP_ESTABLISHED avahi::ENTRY_GROUP_ESTABLISHED avahi ENTRY_GROUP_ESTABLISHED avahi::ENTRY_GROUP_ESTABLISHED avahi</field>
    <field name="text">The entries have successfully been established</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ENTRY_GROUP_FAILURE</field>
    <field name="url">linux_2publish_8cpp.html#acb7575efbdd3e359d75d2347186cddacaa643d0f580dbb40d64daadff494e9ece</field>
    <field name="keywords">ENTRY_GROUP_FAILURE avahi::ENTRY_GROUP_FAILURE avahi ENTRY_GROUP_FAILURE avahi::ENTRY_GROUP_FAILURE avahi</field>
    <field name="text">Some kind of failure happened the entries have been withdrawn</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ENTRY_GROUP_REGISTERING</field>
    <field name="url">linux_2publish_8cpp.html#acb7575efbdd3e359d75d2347186cddacaf7a31c21079206cb9e3d5b6159a1408b</field>
    <field name="keywords">ENTRY_GROUP_REGISTERING avahi::ENTRY_GROUP_REGISTERING avahi ENTRY_GROUP_REGISTERING avahi::ENTRY_GROUP_REGISTERING avahi</field>
    <field name="text">The entries of the group are currently being registered</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">avahi::err_e</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67b</field>
    <field name="keywords">err_e avahi::err_e avahi</field>
    <field name="text">Error codes used by avahi</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DNS_SERVFAIL</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba03e0d9c6c319aab217db47f45e1edc73</field>
    <field name="keywords">ERR_DNS_SERVFAIL avahi::ERR_DNS_SERVFAIL avahi ERR_DNS_SERVFAIL avahi::ERR_DNS_SERVFAIL avahi</field>
    <field name="text">DNS Error Server Failure</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_DNS_TYPE</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba0b240d00369475fc7cce5eea8f9c5054</field>
    <field name="keywords">ERR_INVALID_DNS_TYPE avahi::ERR_INVALID_DNS_TYPE avahi ERR_INVALID_DNS_TYPE avahi::ERR_INVALID_DNS_TYPE avahi</field>
    <field name="text">Invalid DNS type</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_CONFIG</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba1458016aeb567860ae6344a7a5026e10</field>
    <field name="keywords">ERR_INVALID_CONFIG avahi::ERR_INVALID_CONFIG avahi ERR_INVALID_CONFIG avahi::ERR_INVALID_CONFIG avahi</field>
    <field name="text">Configuration error</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_KEY</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba16253cbdd19665b2e11f90177ac63327</field>
    <field name="keywords">ERR_INVALID_KEY avahi::ERR_INVALID_KEY avahi ERR_INVALID_KEY avahi::ERR_INVALID_KEY avahi</field>
    <field name="text">Invalid key</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DNS_YXRRSET</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba21035b35a6db94d51b0724269caa9cae</field>
    <field name="keywords">ERR_DNS_YXRRSET avahi::ERR_DNS_YXRRSET avahi ERR_DNS_YXRRSET avahi::ERR_DNS_YXRRSET avahi</field>
    <field name="text">TODO</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::OK</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba22a58beb6cd996a0d646cdad3d4757a7</field>
    <field name="keywords">OK avahi::OK avahi OK avahi::OK avahi</field>
    <field name="text">OK</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_HOST_NAME</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba28aa1b2490d4f79e39dba08b4114e75a</field>
    <field name="keywords">ERR_INVALID_HOST_NAME avahi::ERR_INVALID_HOST_NAME avahi ERR_INVALID_HOST_NAME avahi::ERR_INVALID_HOST_NAME avahi</field>
    <field name="text">Invalid host name</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_NO_DAEMON</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba2976a3585b45878f07d71121d6eb6062</field>
    <field name="keywords">ERR_NO_DAEMON avahi::ERR_NO_DAEMON avahi ERR_NO_DAEMON avahi::ERR_NO_DAEMON avahi</field>
    <field name="text">Daemon not running</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_NOT_FOUND</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba2b331720baf55776db84c91cef52ca83</field>
    <field name="keywords">ERR_NOT_FOUND avahi::ERR_NOT_FOUND avahi ERR_NOT_FOUND avahi::ERR_NOT_FOUND avahi</field>
    <field name="text">Not found</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_NOT_PERMITTED</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba2be347ed167709bb130e175eea920afb</field>
    <field name="keywords">ERR_NOT_PERMITTED avahi::ERR_NOT_PERMITTED avahi ERR_NOT_PERMITTED avahi::ERR_NOT_PERMITTED avahi</field>
    <field name="text">Operation not permitted</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_SERVICE_NAME</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba2ddbd95978aceb70088e3ecca07f38f3</field>
    <field name="keywords">ERR_INVALID_SERVICE_NAME avahi::ERR_INVALID_SERVICE_NAME avahi ERR_INVALID_SERVICE_NAME avahi::ERR_INVALID_SERVICE_NAME avahi</field>
    <field name="text">Invalid service name</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_NOT_SUPPORTED</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba39d44c97b20af42b5017cb868be5de73</field>
    <field name="keywords">ERR_NOT_SUPPORTED avahi::ERR_NOT_SUPPORTED avahi ERR_NOT_SUPPORTED avahi::ERR_NOT_SUPPORTED avahi</field>
    <field name="text">Not supported</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DNS_NXDOMAIN</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba441f76a84e6034ca516a1302af04ad80</field>
    <field name="keywords">ERR_DNS_NXDOMAIN avahi::ERR_DNS_NXDOMAIN avahi ERR_DNS_NXDOMAIN avahi::ERR_DNS_NXDOMAIN avahi</field>
    <field name="text">DNS Error No such domain</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_OBJECT</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba4922706a3edc1db9e22af0ca90796c81</field>
    <field name="keywords">ERR_INVALID_OBJECT avahi::ERR_INVALID_OBJECT avahi ERR_INVALID_OBJECT avahi::ERR_INVALID_OBJECT avahi</field>
    <field name="text">The object passed to this function was invalid</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_NO_NETWORK</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba4ee2f891463cfc213a5e1b5dec93f925</field>
    <field name="keywords">ERR_NO_NETWORK avahi::ERR_NO_NETWORK avahi ERR_NO_NETWORK avahi::ERR_NO_NETWORK avahi</field>
    <field name="text">No suitable network protocol available</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DISCONNECTED</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba4f5037ce0393f7bd6e59b4f8ef2eda68</field>
    <field name="keywords">ERR_DISCONNECTED avahi::ERR_DISCONNECTED avahi ERR_DISCONNECTED avahi::ERR_DISCONNECTED avahi</field>
    <field name="text">Daemon connection failed</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_IS_PATTERN</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba5260a9a0f30415b22ed9ebb80f277e3c</field>
    <field name="keywords">ERR_IS_PATTERN avahi::ERR_IS_PATTERN avahi ERR_IS_PATTERN avahi::ERR_IS_PATTERN avahi</field>
    <field name="text">RR key is pattern</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_ACCESS_DENIED</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba5828b92a0f76d94525f1208fbe6107b2</field>
    <field name="keywords">ERR_ACCESS_DENIED avahi::ERR_ACCESS_DENIED avahi ERR_ACCESS_DENIED avahi::ERR_ACCESS_DENIED avahi</field>
    <field name="text">Access denied</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DNS_NOTAUTH</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba58c223ac69dba1c831252480c872080f</field>
    <field name="keywords">ERR_DNS_NOTAUTH avahi::ERR_DNS_NOTAUTH avahi ERR_DNS_NOTAUTH avahi::ERR_DNS_NOTAUTH avahi</field>
    <field name="text">DNS Error Not authorized</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DNS_NOTZONE</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba64965c17f800b915cade8f12bf463659</field>
    <field name="keywords">ERR_DNS_NOTZONE avahi::ERR_DNS_NOTZONE avahi ERR_DNS_NOTZONE avahi::ERR_DNS_NOTZONE avahi</field>
    <field name="text">TODO</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_OS</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba6b212aafe0d3748286f3b6d432c8507d</field>
    <field name="keywords">ERR_OS avahi::ERR_OS avahi ERR_OS avahi::ERR_OS avahi</field>
    <field name="text">OS error</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_TIMEOUT</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba72602cba8b5f2113ef996019b54a77ce</field>
    <field name="keywords">ERR_TIMEOUT avahi::ERR_TIMEOUT avahi ERR_TIMEOUT avahi::ERR_TIMEOUT avahi</field>
    <field name="text">Timeout reached</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_RDATA</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba78848daf7266e0070c539c7d55d20c14</field>
    <field name="keywords">ERR_INVALID_RDATA avahi::ERR_INVALID_RDATA avahi ERR_INVALID_RDATA avahi::ERR_INVALID_RDATA avahi</field>
    <field name="text">Invalid RDATA</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_DOMAIN_NAME</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba799e6d56b6cb3dee99fed1cbbc947dea</field>
    <field name="keywords">ERR_INVALID_DOMAIN_NAME avahi::ERR_INVALID_DOMAIN_NAME avahi ERR_INVALID_DOMAIN_NAME avahi::ERR_INVALID_DOMAIN_NAME avahi</field>
    <field name="text">Invalid domain name</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DNS_YXDOMAIN</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba83233c059ba479dfbe8d7876694f0750</field>
    <field name="keywords">ERR_DNS_YXDOMAIN avahi::ERR_DNS_YXDOMAIN avahi ERR_DNS_YXDOMAIN avahi::ERR_DNS_YXDOMAIN avahi</field>
    <field name="text">TODO</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_INTERFACE</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba84b70cc48368a5a7850d977d3e0b3060</field>
    <field name="keywords">ERR_INVALID_INTERFACE avahi::ERR_INVALID_INTERFACE avahi ERR_INVALID_INTERFACE avahi::ERR_INVALID_INTERFACE avahi</field>
    <field name="text">Invalid interface</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_PORT</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba92c6bf4e20d367c6acabc1b4047bec23</field>
    <field name="keywords">ERR_INVALID_PORT avahi::ERR_INVALID_PORT avahi ERR_INVALID_PORT avahi::ERR_INVALID_PORT avahi</field>
    <field name="text">Invalid port number</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_ADDRESS</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67ba96a208bffdb931d9859e318ecac25d31</field>
    <field name="keywords">ERR_INVALID_ADDRESS avahi::ERR_INVALID_ADDRESS avahi ERR_INVALID_ADDRESS avahi::ERR_INVALID_ADDRESS avahi</field>
    <field name="text">Invalid address</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_NO_MEMORY</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67baa74909866b7d73974a63df482d25b6ef</field>
    <field name="keywords">ERR_NO_MEMORY avahi::ERR_NO_MEMORY avahi ERR_NO_MEMORY avahi::ERR_NO_MEMORY avahi</field>
    <field name="text">Memory exhausted</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_OPERATION</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67baa77cdcbcdaa3343ebe030fb3bafdd21f</field>
    <field name="keywords">ERR_INVALID_OPERATION avahi::ERR_INVALID_OPERATION avahi ERR_INVALID_OPERATION avahi::ERR_INVALID_OPERATION avahi</field>
    <field name="text">Invalid operation</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_MAX</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67baa89479dd3e70735f7c89a9e9035445bd</field>
    <field name="keywords">ERR_MAX avahi::ERR_MAX avahi ERR_MAX avahi::ERR_MAX avahi</field>
    <field name="text">TODO</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_IS_EMPTY</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67baad5cd8841d493fe83ab715677e17fbbf</field>
    <field name="keywords">ERR_IS_EMPTY avahi::ERR_IS_EMPTY avahi ERR_IS_EMPTY avahi::ERR_IS_EMPTY avahi</field>
    <field name="text">Is empty</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_SERVICE_SUBTYPE</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bab139a962d25c7d366ff26c72a61d9c16</field>
    <field name="keywords">ERR_INVALID_SERVICE_SUBTYPE avahi::ERR_INVALID_SERVICE_SUBTYPE avahi ERR_INVALID_SERVICE_SUBTYPE avahi::ERR_INVALID_SERVICE_SUBTYPE avahi</field>
    <field name="text">Invalid service subtype</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_BAD_STATE</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bab13a6bd5098ec10b2c4158521b8ff6ed</field>
    <field name="keywords">ERR_BAD_STATE avahi::ERR_BAD_STATE avahi ERR_BAD_STATE avahi::ERR_BAD_STATE avahi</field>
    <field name="text">Object was in a bad state</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_ARGUMENT</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67babb0ec00fedf39af278f4b31de744b7af</field>
    <field name="keywords">ERR_INVALID_ARGUMENT avahi::ERR_INVALID_ARGUMENT avahi ERR_INVALID_ARGUMENT avahi::ERR_INVALID_ARGUMENT avahi</field>
    <field name="text">Invalid argument</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DBUS_ERROR</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67babb85fb809286b264600dc6c5de06045a</field>
    <field name="keywords">ERR_DBUS_ERROR avahi::ERR_DBUS_ERROR avahi ERR_DBUS_ERROR avahi::ERR_DBUS_ERROR avahi</field>
    <field name="text">An unexpected D-Bus error occurred</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DNS_NXRRSET</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67babcb597535e777aa393fb3c9970dc2674</field>
    <field name="keywords">ERR_DNS_NXRRSET avahi::ERR_DNS_NXRRSET avahi ERR_DNS_NXRRSET avahi::ERR_DNS_NXRRSET avahi</field>
    <field name="text">TODO</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_TOO_MANY_CLIENTS</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67babdce7b7bd396a24520b2942553d682dd</field>
    <field name="keywords">ERR_TOO_MANY_CLIENTS avahi::ERR_TOO_MANY_CLIENTS avahi ERR_TOO_MANY_CLIENTS avahi::ERR_TOO_MANY_CLIENTS avahi</field>
    <field name="text">Too many clients</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_TOO_MANY_ENTRIES</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67babe20ae192d1b48039dbb61f01b00fac0</field>
    <field name="keywords">ERR_TOO_MANY_ENTRIES avahi::ERR_TOO_MANY_ENTRIES avahi ERR_TOO_MANY_ENTRIES avahi::ERR_TOO_MANY_ENTRIES avahi</field>
    <field name="text">Too many entries</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_PACKET</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67babf2ca4934dfcb1886fbb0d1a23559905</field>
    <field name="keywords">ERR_INVALID_PACKET avahi::ERR_INVALID_PACKET avahi ERR_INVALID_PACKET avahi::ERR_INVALID_PACKET avahi</field>
    <field name="text">Invalid packet</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_VERSION_MISMATCH</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bac309d70e0c2b87c5da0df2da0a2ba87e</field>
    <field name="keywords">ERR_VERSION_MISMATCH avahi::ERR_VERSION_MISMATCH avahi ERR_VERSION_MISMATCH avahi::ERR_VERSION_MISMATCH avahi</field>
    <field name="text">Version mismatch</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_DNS_ERROR</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bac4ec62aa7152ea5f055b13e99655bc7c</field>
    <field name="keywords">ERR_INVALID_DNS_ERROR avahi::ERR_INVALID_DNS_ERROR avahi ERR_INVALID_DNS_ERROR avahi::ERR_INVALID_DNS_ERROR avahi</field>
    <field name="text">Invalid DNS return code</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_TTL</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bacd623c86c05c669a96d65e2781f87d2c</field>
    <field name="keywords">ERR_INVALID_TTL avahi::ERR_INVALID_TTL avahi ERR_INVALID_TTL avahi::ERR_INVALID_TTL avahi</field>
    <field name="text">Invalid DNS TTL</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_DNS_CLASS</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bacecd33a378e90aa9710697bda5182814</field>
    <field name="keywords">ERR_INVALID_DNS_CLASS avahi::ERR_INVALID_DNS_CLASS avahi ERR_INVALID_DNS_CLASS avahi::ERR_INVALID_DNS_CLASS avahi</field>
    <field name="text">Invalid DNS class</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_SERVICE_TYPE</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bad0f5c09a3eb2b2b25968d6236e2e9b34</field>
    <field name="keywords">ERR_INVALID_SERVICE_TYPE avahi::ERR_INVALID_SERVICE_TYPE avahi ERR_INVALID_SERVICE_TYPE avahi::ERR_INVALID_SERVICE_TYPE avahi</field>
    <field name="text">Invalid service type</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_NO_CHANGE</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bada9a816f9dc85d45d75b970ae043ee2c</field>
    <field name="keywords">ERR_NO_CHANGE avahi::ERR_NO_CHANGE avahi ERR_NO_CHANGE avahi::ERR_NO_CHANGE avahi</field>
    <field name="text">The requested operation is invalid because it is redundant</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DNS_NOTIMP</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67badcf02219000a845cc20a75a641e10c4a</field>
    <field name="keywords">ERR_DNS_NOTIMP avahi::ERR_DNS_NOTIMP avahi ERR_DNS_NOTIMP avahi::ERR_DNS_NOTIMP avahi</field>
    <field name="text">DNS Error Not implemented</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_FAILURE</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bae1f1cf23a932874fcf9a0a59285d9632</field>
    <field name="keywords">ERR_FAILURE avahi::ERR_FAILURE avahi ERR_FAILURE avahi::ERR_FAILURE avahi</field>
    <field name="text">Generic error code</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_COLLISION</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bae3e06c025408fb665026f8ae72a8521e</field>
    <field name="keywords">ERR_COLLISION avahi::ERR_COLLISION avahi ERR_COLLISION avahi::ERR_COLLISION avahi</field>
    <field name="text">Name collision</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_FLAGS</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bae58bc87a167f831fbbe39c6802bd4172</field>
    <field name="keywords">ERR_INVALID_FLAGS avahi::ERR_INVALID_FLAGS avahi ERR_INVALID_FLAGS avahi::ERR_INVALID_FLAGS avahi</field>
    <field name="text">Invalid flags</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_PROTOCOL</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bae759cdd2c98a67ea9545f9efa3cbd68a</field>
    <field name="keywords">ERR_INVALID_PROTOCOL avahi::ERR_INVALID_PROTOCOL avahi ERR_INVALID_PROTOCOL avahi::ERR_INVALID_PROTOCOL avahi</field>
    <field name="text">Invalid protocol</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DNS_FORMERR</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bae9078860497847cc0006998b6dd4b498</field>
    <field name="keywords">ERR_DNS_FORMERR avahi::ERR_DNS_FORMERR avahi ERR_DNS_FORMERR avahi::ERR_DNS_FORMERR avahi</field>
    <field name="text">DNS Error Form error</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_INVALID_RECORD</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67baeeeed29a5927ee748072681a9a0d8cff</field>
    <field name="keywords">ERR_INVALID_RECORD avahi::ERR_INVALID_RECORD avahi ERR_INVALID_RECORD avahi::ERR_INVALID_RECORD avahi</field>
    <field name="text">Invalid RR</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_DNS_REFUSED</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67baf81c199f96b0dc9ef4dcc1e64c7f9ffa</field>
    <field name="keywords">ERR_DNS_REFUSED avahi::ERR_DNS_REFUSED avahi ERR_DNS_REFUSED avahi::ERR_DNS_REFUSED avahi</field>
    <field name="text">DNS Error Operation refused</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">avahi::ERR_TOO_MANY_OBJECTS</field>
    <field name="url">linux_2publish_8cpp.html#af959615235fc19c57c64b9589a02b67bafadd0f5f0b9de41e9e8aa9e80eda5b73</field>
    <field name="keywords">ERR_TOO_MANY_OBJECTS avahi::ERR_TOO_MANY_OBJECTS avahi ERR_TOO_MANY_OBJECTS avahi::ERR_TOO_MANY_OBJECTS avahi</field>
    <field name="text">Too many objects</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">logging.cpp</field>
    <field name="url">logging_8cpp.html</field>
    <field name="keywords">logging.cpp</field>
    <field name="text">Definitions for logging related functions</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">logging.h</field>
    <field name="url">logging_8h.html</field>
    <field name="keywords">logging.h</field>
    <field name="text">Declarations for logging related functions</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">logging.h</field>
    <field name="url">logging_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">text_sink boost::log::sinks::asynchronous_sink&lt;boost::log::sinks::text_ostream_backend&gt; boost::log::sources::severity_logger&lt;int&gt; verbose boost::log::sources::severity_logger&lt;int&gt; debug boost::log::sources::severity_logger&lt;int&gt; info boost::log::sources::severity_logger&lt;int&gt; warning boost::log::sources::severity_logger&lt;int&gt; error boost::log::sources::severity_logger&lt;int&gt; fatal boost::log::sources::severity_logger&lt;int&gt; tests logging</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">logging.h</field>
    <field name="url">logging_8h_source.html#l00030</field>
    <field name="keywords"></field>
    <field name="text">deinit_t deinit formatter boost::log::record_view view boost::log::formatting_ostream os nodiscard std::unique_ptr&lt;deinit_t&gt; init min_log_level std::string log_file setup_av_logging min_log_level setup_libdisplaydevice_logging min_log_level log_flush print_help name</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">logging.h</field>
    <field name="url">logging_8h_source.html#l00102</field>
    <field name="keywords"></field>
    <field name="text">min_max_avg_periodic_logger min_max_avg_periodic_logger boost::log::sources::severity_logger&lt;int&gt; severity std::string_view message std::string_view units std::chrono::seconds interval_in_seconds std::chrono::seconds severity severity message message units units interval interval_in_seconds enabled config::sunshine min_log_level severity default_severity collect_and_log T value enabled print_info T min_value T max_value avg_value f stat_trackers::two_digits_after_decimal std::is_floating_point_v&lt;T&gt; BOOST_LOG severity get message f min_value units f max_value units f avg_value units BOOST_LOG severity get message min_value units max_value units f avg_value units tracker collect_and_callback_on_interval value print_info interval collect_and_log std::function T func enabled collect_and_log func reset enabled tracker reset is_enabled enabled std::reference_wrapper&lt;boost::log::sources::severity_logger&lt;int&gt; severity std::string message std::string units std::chrono::seconds interval enabled stat_trackers::min_max_avg_tracker&lt;T&gt; tracker</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">logging.h</field>
    <field name="url">logging_8h_source.html#l00166</field>
    <field name="keywords"></field>
    <field name="text">time_delta_periodic_logger time_delta_periodic_logger boost::log::sources::severity_logger&lt;int&gt; severity std::string_view message std::chrono::seconds interval_in_seconds std::chrono::seconds logger severity message interval_in_seconds first_point std::chrono::steady_clock::time_point point logger is_enabled point1 point first_point_now logger is_enabled first_point std::chrono::steady_clock::now second_point_and_log std::chrono::steady_clock::time_point point logger is_enabled logger collect_and_log std::chrono::duration&lt;double, std::milli&gt; point point1 count second_point_now_and_log logger is_enabled second_point_and_log std::chrono::steady_clock::now reset logger is_enabled logger reset is_enabled logger is_enabled std::chrono::steady_clock::time_point point1 std::chrono::steady_clock::now min_max_avg_periodic_logger&lt;double&gt; logger std::string bracket std::string input std::wstring bracket std::wstring input</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">misc.h</field>
    <field name="url">macos_2misc_8h.html</field>
    <field name="keywords">misc.h</field>
    <field name="text">Miscellaneous declarations for macOS platform</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">misc.h</field>
    <field name="url">macos_2misc_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">platf is_screen_capture_allowed dyn void apiproc load handle std::vector std::tuple&lt;apiproc *, const char *&gt; funcs strict handle std::vector&lt;const char *&gt; libs</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">publish.cpp</field>
    <field name="url">macos_2publish_8cpp.html</field>
    <field name="keywords">publish.cpp</field>
    <field name="text">Definitions for publishing services on macOS</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">main.cpp</field>
    <field name="url">main_8cpp.html</field>
    <field name="keywords">main.cpp</field>
    <field name="text">Definitions for the main entry point for Sunshine main args</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">main</field>
    <field name="args">(int argc, char *argv[])</field>
    <field name="url">main_8cpp.html#a0ddf1224851353fc92bfbff6f499fa97</field>
    <field name="keywords">main</field>
    <field name="text">Main application entry point argc The number of arguments argv The arguments Examples</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">cmd_to_func</field>
    <field name="url">main_8cpp.html#a8d64453a1a1e836dcc0577b944caa907</field>
    <field name="keywords"></field>
    <field name="text">sv name argc argv args::creds name argc argv sv name argc argv args::help name sv name argc argv args::version sv name argc argv args::restore_nvprefs_undo</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">main.h</field>
    <field name="url">main_8h.html</field>
    <field name="keywords">main.h</field>
    <field name="text">Declarations for the main entry point for Sunshine main args</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">main</field>
    <field name="args">(int argc, char *argv[])</field>
    <field name="url">main_8h.html#a0ddf1224851353fc92bfbff6f499fa97</field>
    <field name="keywords">main</field>
    <field name="text">Main application entry point argc The number of arguments argv The arguments Examples</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">main.h</field>
    <field name="url">main_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">main argc argv</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Docker</field>
    <field name="url">md_DOCKER__README.html</field>
    <field name="keywords">Docker</field>
    <field name="text">Docker Important note Starting with v0.18.0 tag names have changed You may no longer use latest master vX.X.X Build your own containers This image provides a method for you to easily use the latest Sunshine release in your own docker projects It is not intended to use as a standalone container at this point and should be considered experimental SUNSHINE_VERSION latest master vX.X.X commit hash SUNSHINE_OS Sunshine images are available with the following tag suffixes based on their respective base images archlinux debian-bookworm ubuntu-22.04 ubuntu-24.04 Tags You must combine the SUNSHINE_VERSION and SUNSHINE_OS to determine the tag to pull The format should be SUNSHINE_VERSION SUNSHINE_OS For example latest-ubuntu-24.04 See all our available tags on docker hub or ghcr for more info Where used This is a list of docker projects using Sunshine Something missing Let us know about it! Games on Whales Port and Volume mappings Examples are below of the required mappings The configuration file will be saved to in the container Using docker run Create and run the container substitute your values Using docker-compose Create a docker-compose.yml file with the following contents substitute your values Using podman run Create and run the container substitute your values Parameters You must substitute the values with your own settings Parameters are split into two halves separated by a colon The left side represents the host and the right side the container Example p external internal This shows the port mapping from internal to external of the container Therefore p 4 7 9 9 0 4 7 9 9 0 would expose port 4 7 9 9 0 from inside the container to be accessible from the host s IP on port 4 7 9 9 0 e.g host_ip 4 7 9 9 0 The internal port must be 4 7 9 9 0 but the external port may be changed e.g p 8 0 8 0 4 7 9 9 0 All the ports listed in the docker run and docker-compose examples are required Parameter Function Example Value Required p port 4 7 9 9 0 Web UI Port 4 7 9 9 0 True v path to data Volume mapping True e PUID uid User ID 1 0 0 1 False e PGID gid Group ID 1 0 0 1 False e TZ timezone Lookup TZ value America/New_York False For additional configuration it is recommended to reference the Games on Whales sunshine config User Group Identifiers: When using data volumes v flags permissions issues can arise between the host OS and the container To avoid this issue you can specify the user PUID and group PGID Ensure the data volume directory on the host is owned by the same user you specify In this instance PUID 1 0 0 1 and PGID 1 0 0 1 To find yours use id user as below If you want to change the PUID or PGID after the image has been built it will require rebuilding the image Supported Architectures Specifying lizardbyte/sunshine latest- SUNSHINE_OS or ghcr.io latest- SUNSHINE_OS should retrieve the correct image for your architecture The architectures supported by these images are shown in the table below tag suffix amd64/x86_64 arm64/aarch64 archlinux ✅ ❌ debian-bookworm ✅ ✅ ubuntu-22.04 ✅ ✅ ubuntu-24.04 ✅ ✅ Previous Next Changelog Third-Party Packages ARG SUNSHINE_VERSION latest ARG SUNSHINE_OS ubuntu FROM lizardbyte sunshine $ SUNSHINE_VERSION $ SUNSHINE_OS ENTRYPOINT steam sunshine</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">API</field>
    <field name="url">md_docs_2api.html</field>
    <field name="keywords">API</field>
    <field name="text">API Sunshine has a RESTful API which can be used to interact with the service Unless otherwise specified authentication is required for all API calls You can authenticate using basic authentication with the admin username and password GET Get the list of available applications response The HTTP response object request The HTTP request object POST Save an application To save a new application the index must be 1 To update an existing application you must provide the current index of the application response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format POST Close the currently running application response The HTTP response object request The HTTP request object DELETE index Delete an application response The HTTP response object request The HTTP request object GET Get the list of paired clients response The HTTP response object request The HTTP request object POST Unpair a client response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format POST Unpair all clients response The HTTP response object request The HTTP request object GET Get the configuration settings response The HTTP response object request The HTTP request object GET Get the locale setting This endpoint does not require authentication response The HTTP response object request The HTTP request object POST Save the configuration settings response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format Attention It is recommended to ONLY save the config settings that differ from the default behavior POST Upload a cover image response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format GET Get the logs from the log file response The HTTP response object request The HTTP request object POST Update existing credentials response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format POST Send a pin code to the host The pin is generated from the Moonlight client during the pairing process response The HTTP response object request The HTTP request object The body for the post request should be JSON serialized in the following format POST Reset the display device persistence response The HTTP response object request The HTTP request object POST Restart Sunshine response The HTTP response object request The HTTP request object Previous Next Performance Tuning Troubleshooting</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">App Examples</field>
    <field name="url">md_docs_2app__examples.html</field>
    <field name="keywords">App Examples</field>
    <field name="text">App Examples Since not all applications behave the same we decided to create some examples to help you get started adding games and applications to Sunshine Attention Throughout these examples any fields not shown are left blank You can enhance your experience by adding an image or a log file via the Output field Note When a working directory is not specified it defaults to the folder where the target application resides Common Examples Desktop Field Value Application Name Image Steam Big Picture Note Steam is launched as a detached command because Steam starts with a process that self updates itself and the original process is killed Linux Field Value Application Name Detached Commands Image macOS Field Value Application Name Detached Commands Image Windows Field Value Application Name Detached Commands Image Epic Game Store game Note Using URI method will be the most consistent between various games URI Windows Field Value Application Name Commands Binary w/ working directory Windows Field Value Application Name Command Working Directory Binary w/o working directory Windows Field Value Application Name Command Steam game Note Using URI method will be the most consistent between various games URI Linux Field Value Application Name Detached Commands macOS Field Value Application Name Detached Commands Windows Field Value Application Name Detached Commands Binary w/ working directory Linux Field Value Application Name Command Working Directory macOS Field Value Application Name Command Working Directory Windows Field Value Application Name Command Working Directory Binary w/o working directory Linux Field Value Application Name Command macOS Field Value Application Name Command Windows Field Value Application Name Command Prep Commands Changing Resolution and Refresh Rate Linux X11 Prep Step Command Do Undo Hint The above only works if the xrandr mode already exists You will need to create new modes to stream to macOS and iOS devices since they use non-standard resolutions You can update the Do command to this The set-custom-res.sh will have this content Wayland Prep Step Command Do Undo Hint wlr-xrandr only works with wlroots-based compositors Gnome Wayland X11 Prep Step Command Do Undo The commands above are valid for an X11 session but won t work for Wayland In that case xrandr must be replaced by gnome-randr.py This script is intended as a drop-in replacement with the same syntax It can be saved in and needs to be made executable KDE Plasma Wayland X11 Prep Step Command Do Undo Attention The names of your displays will differ between X11 and Wayland Be sure to use the correct name depending on your session manager e.g On X11 the monitor may be called HDMI-A-0 but on Wayland it may be called HDMI-A-1 Hint Replace HDMI-A-1 with the display name of the monitor you would like to use for Moonlight You can list the monitors available to you with These will also give you the supported display properties for each monitor You can select them either by hard-coding their corresponding number e.g kscreen-doctor output.HDMI or using the above do command to fetch the resolution requested by your Moonlight client which has a chance of not being supported by your monitor NVIDIA Prep Step Command Do Undo macOS displayplacer Note This example uses the displayplacer tool to change the resolution This tool can be installed following instructions in their GitHub repository Prep Step Command Do Undo Windows Sunshine has built-in support for changing the resolution and refresh rate on Windows If you prefer to use a third-party tool you can use QRes as an example QRes Note This example uses the QRes tool to change the resolution and refresh rate This tool can be downloaded from their SourceForge repository Prep Step Command Do Undo Additional Considerations Linux Flatpak Attention Because Flatpak packages run in a sandboxed environment and do not normally have access to the host the Flatpak of Sunshine requires commands to be prefixed with flatpak-spawn host Windows Elevating Commands Windows If you ve installed Sunshine as a service default you can specify if a command should be elevated with administrative privileges Simply enable the elevated option in the WEB UI or add it to the JSON configuration This is an option for both prep-cmd and regular commands and will launch the process with the current user without a UAC prompt Example Previous Next Configuration Guides</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Building</field>
    <field name="url">md_docs_2building.html</field>
    <field name="keywords">Building</field>
    <field name="text">Building Sunshine binaries are built using CMake and requires cmake 3.25 Building Locally Dependencies Linux Dependencies vary depending on the distribution You can reference our linux_build.sh script for a list of dependencies we use in Debian-based and Fedora-based distributions Please submit a PR if you would like to extend the script to support other distributions CUDA Toolkit Sunshine requires CUDA Toolkit for NVFBC capture There are two caveats to CUDA The version installed depends on the version of GCC The version of CUDA you use will determine compatibility with various GPU generations At the time of writing the recommended version to use is CUDA 8 See CUDA compatibility for more info Tip To install older versions select the appropriate run file based on your desired CUDA version and architecture according to CUDA Toolkit Archive macOS You can either use Homebrew or MacPorts to install dependencies Homebrew If there are issues with an SSL header that is not found Intel bash ln s Apple Silicon bash ln s MacPorts Windows First you need to install MSYS2 then startup and execute the following commands Update all packages Install dependencies Clone Ensure git is installed on your system then clone the repository using the following command Build Available build options can be found in options.cmake Package Linux deb bash cpack G DEB config cmake rpm bash cpack G RPM config cmake macOS DragNDrop bash cpack G DragNDrop config cmake Windows Installer bash cpack G NSIS config cmake Portable bash cpack G ZIP config cmake Remote Build It may be beneficial to build remotely in some cases This will enable easier building on different operating systems Fork the project Activate workflows Trigger the CI workflow manually Download the artifacts/binaries from the workflow run summary Previous Next Troubleshooting Contributing</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Changelog</field>
    <field name="url">md_docs_2changelog.html</field>
    <field name="keywords">Changelog</field>
    <field name="text">Changelog Previous Next Getting Started Docker</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Configuration</field>
    <field name="url">md_docs_2configuration.html</field>
    <field name="keywords">Configuration</field>
    <field name="text">Configuration Host authority Sunshine will work with the default settings for most users In some cases you may want to configure Sunshine further The default location for the configuration file is listed below You can use another location if you choose by passing in the full configuration file path as the first argument when you start Sunshine Example The default location of the apps.json is the same as the configuration file You can use a custom location by modifying the configuration file Default Config Directory OS Location Docker Linux macOS Windows Although it is recommended to use the configuration UI it is possible manually configure Sunshine by editing the conf file in a text editor Use the examples as reference General locale Description The locale used for Sunshine s user interface Default Example Choices bg Bulgarian de German en English en_GB English UK en_US English United States es Spanish fr French it Italian ja Japanese ko Korean pl Polish pt Portuguese pt_BR Portuguese Brazilian ru Russian sv Swedish tr Turkish uk Ukranian zh Chinese Simplified sunshine_name Description The name displayed by Moonlight Default PC hostname Example min_log_level Description The minimum log level printed to standard out Default Example Choices verbose All logging message Attention This may negatively affect streaming performance debug Debug log messages and higher Attention This may negatively affect streaming performance info Informational log messages and higher warning Warning log messages and higher error Error log messages and higher fatal Only fatal log messages none No log messages global_prep_cmd Description A list of commands to be run before/after all applications If any of the prep-commands fail starting the application is aborted Default Example notify_pre_releases Description Whether to be notified of new pre-release versions of Sunshine Default Example Input controller Description Whether to allow controller input from the client Default Example gamepad Description The type of gamepad to emulate on the host Default Example Choices ds4 DualShock 4 controller PS4 Note This option applies to Windows only ds5 DualShock 5 controller PS5 Note This option applies to Linux only switch Switch Pro controller Note This option applies to Linux only x360 Xbox 3 6 0 controller Note This option applies to Windows only xone Xbox One controller Note This option applies to Linux only ds4_back_as_touchpad_click Description Allow Select/Back inputs to also trigger DS4 touchpad click Useful for clients looking to emulate touchpad click on Xinput devices Hint Only applies when gamepad is set to ds4 manually Unused in other gamepad modes Default Example motion_as_ds4 Description If a client reports that a connected gamepad has motion sensor support emulate it on the host as a DS4 controller When disabled motion sensors will not be taken into account during gamepad type selection Hint Only applies when gamepad is set to auto Default Example touchpad_as_ds4 Description If a client reports that a connected gamepad has a touchpad emulate it on the host as a DS4 controller When disabled touchpad presence will not be taken into account during gamepad type selection Hint Only applies when gamepad is set to auto Default Example back_button_timeout Description If the Back/Select button is held down for the specified number of milliseconds a Home/Guide button press is emulated Tip If back_button_timeout 0 then the Home/Guide button will not be emulated Default Example keyboard Description Whether to allow keyboard input from the client Default Example key_repeat_delay Description The initial delay in milliseconds before repeating keys Controls how fast keys will repeat themselves Default Example key_repeat_frequency Description How often keys repeat every second Tip This configurable option supports decimals Default Example always_send_scancodes Description Sending scancodes enhances compatibility with games and apps but may result in incorrect keyboard input from certain clients that aren t using a US English keyboard layout Enable if keyboard input is not working at all in certain applications Disable if keys on the client are generating the wrong input on the host Caution Applies to Windows only Default Example key_rightalt_to_key_win Description It may be possible that you cannot send the Windows Key from Moonlight directly In those cases it may be useful to make Sunshine think the Right Alt key is the Windows key Default Example mouse Description Whether to allow mouse input from the client Default Example high_resolution_scrolling Description When enabled Sunshine will pass through high resolution scroll events from Moonlight clients This can be useful to disable for older applications that scroll too fast with high resolution scroll events Default Example native_pen_touch Description When enabled Sunshine will pass through native pen/touch events from Moonlight clients This can be useful to disable for older applications without native pen/touch support Default Example keybindings Description Sometimes it may be useful to map keybindings Wayland won t allow clients to capture the Win Key for example Tip See virtual key codes Hint keybindings needs to have a multiple of two elements Note This option is not available in the UI A PR would be welcome Default Example Audio/Video audio_sink Description The name of the audio sink used for audio loopback Tip To find the name of the audio sink follow these instructions pulseaudio pipewire Sunshine can only access microphones on macOS due to system limitations To stream system audio use Soundflower or BlackHole Enter the following command in command prompt or PowerShell If you have multiple audio devices with identical names use the Device ID instead Attention If you want to mute the host speakers use virtual_sink instead Default Sunshine will select the default audio device Example Linux Example macOS Example Windows virtual_sink Description The audio device that s virtual like Steam Streaming Speakers This allows Sunshine to stream audio while muting the speakers Tip See audio_sink Tip These are some options for virtual sound devices Stream Streaming Speakers Linux macOS Windows Steam must be installed Enable install_steam_audio_drivers or use Steam Remote Play at least once to install the drivers Virtual Audio Cable macOS Windows Default n/a Example install_steam_audio_drivers Description Installs the Steam Streaming Speakers driver if Steam is installed to support surround sound and muting host audio Note This option is only supported on Windows Default Example adapter_name Description Select the video card you want to stream Tip To find the appropriate values follow these instructions Linux VA-API Unlike with and nvenc it doesn t matter if video encoding is done on a different GPU To be supported by Sunshine it needs to have at the very minimum VAProfileH264High VAEntrypointEncSlice Enter the following command in command prompt or PowerShell For hybrid graphics systems DXGI reports the outputs are connected to whichever graphics adapter that the application is configured to use so it s not a reliable indicator of how the display is physically connected Default Sunshine will select the default video card Example Linux Example Windows output_name Description Select the display number you want to stream Tip To find the appropriate values follow these instructions During Sunshine startup you should see the list of detected displays You need to use the id value inside the parenthesis e.g 1 During Sunshine startup you should see the list of detected displays You need to use the id value inside the parenthesis e.g 3 During Sunshine startup you should see the list of detected displays You need to use the device_id value Default Sunshine will select the default display Example Linux Example macOS Example Windows dd_configuration_option Description Perform mandatory verification and additional configuration for the display device Note Applies to Windows only Default Example Choices disabled Perform no additional configuration disables all dd_ configuration options verify_only Verify that display is active only this is a mandatory step without any extra steps to verify display state ensure_active Activate the display if it s currently inactive ensure_primary Activate the display if it s currently inactive and make it primary ensure_only_display Activate the display if it s currently inactive and disable all others dd_resolution_option Description Perform additional resolution configuration for the display device Note must be enabled in Moonlight for this option to work Note Applies to Windows only Default Example Choices disabled Perform no additional configuration auto Change resolution to the requested resolution from the client manual Change resolution to the user specified one set via dd_manual_resolution dd_manual_resolution Description Specify manual resolution to be used Note dd_resolution_option must be set to manual Note Applies to Windows only Default n/a Example dd_refresh_rate_option Description Perform additional refresh rate configuration for the display device Note Applies to Windows only Default Example Choices disabled Perform no additional configuration auto Change refresh rate to the requested FPS value from the client manual Change refresh rate to the user specified one set via dd_manual_refresh_rate dd_manual_refresh_rate Description Specify manual refresh rate to be used Note dd_refresh_rate_option must be set to manual Note Applies to Windows only Default n/a Example dd_hdr_option Description Perform additional HDR configuration for the display device Note Applies to Windows only Default Example Choices disabled Perform no additional configuration auto Change HDR to the requested state from the client if the display supports it dd_wa_hdr_toggle_delay Description When using virtual display device VDD for streaming it might incorrectly display HDR color Sunshine can try to mitigate this issue by turning HDR off and then on again If the value is set to 0 the workaround is disabled default If the value is between 0 and 3 0 0 0 milliseconds Sunshine will turn off HDR wait for the specified amount of time and then turn HDR on again The recommended delay time is around 5 0 0 milliseconds in most cases DO NOT use this workaround unless you actually have issues with HDR as it directly impacts stream start time! Note This option works independently of dd_hdr_option Note Applies to Windows only Default Example dd_config_revert_delay Description Additional delay in milliseconds to wait before reverting configuration when the app has been closed or the last session terminated Main purpose is to provide a smoother transition when quickly switching between apps Note Applies to Windows only Default Example dd_config_revert_on_disconnect Description When enabled display configuration is reverted upon disconnect of all clients instead of app close or last session termination This can be useful for returning to physical usage of the host machine without closing the active app Warning Some applications may not function properly when display configuration is changed while active Note Applies to Windows only Default Example dd_mode_remapping Description Remap the requested resolution and FPS to another display mode Depending on the dd_resolution_option and dd_refresh_rate_option values the following mapping groups are available mixed both options are set to auto resolution_only only dd_resolution_option is set to auto refresh_rate_only only dd_refresh_rate_option is set to auto For each of those groups a list of fields can be configured to perform remapping requested_resolution resolution that needs to be matched in order to use this remapping entry requested_fps FPS that needs to be matched in order to use this remapping entry final_resolution resolution value to be used if the entry was matched final_refresh_rate refresh rate value to be used if the entry was matched If requested_* field is left empty it will match everything If final_* field is left empty the original value will not be remapped and either a requested manual or current value is used However at least one final_* must be set otherwise the entry is considered invalid Note must be enabled on client side for ANY entry with resolution field to be considered Note First entry to be matched in the list is the one that will be used Tip requested_resolution and final_resolution can be omitted for refresh_rate_only group Tip requested_fps and final_refresh_rate can be omitted for resolution_only group Note Applies to Windows only Default Example max_bitrate Description The maximum bitrate in Kbps that Sunshine will encode the stream at If set to 0 it will always use the bitrate requested by Moonlight Default Example min_fps_factor Description Sunshine will use this factor to calculate the minimum time between frames Increasing this value may help when streaming mostly static content Warning Higher values will consume more bandwidth Default Range 1 3 Example Network upnp Description Sunshine will attempt to open ports for streaming over the internet Default Example address_family Description Set the address family that Sunshine will use Default Example Choices ipv4 IPv4 only both IPv4+IPv6 port Description Set the family of ports used by Sunshine Changing this value will offset other ports as shown in config UI Default Range 1 0 2 9 6 5 5 1 4 Example origin_web_ui_allowed Description The origin of the remote endpoint address that is not denied for HTTPS Web UI Default Example Choices pc Only localhost may access the web ui lan Only LAN devices may access the web ui wan Anyone may access the web ui external_ip Description If no external IP address is given Sunshine will attempt to automatically detect external ip-address Default Automatic Example lan_encryption_mode Description This determines when encryption will be used when streaming over your local network Warning Encryption can reduce streaming performance particularly on less powerful hosts and clients Default Example Choices 0 encryption will not be used 1 encryption will be used if the client supports it 2 encryption is mandatory and unencrypted connections are rejected wan_encryption_mode Description This determines when encryption will be used when streaming over the Internet Warning Encryption can reduce streaming performance particularly on less powerful hosts and clients Default Example Choices 0 encryption will not be used 1 encryption will be used if the client supports it 2 encryption is mandatory and unencrypted connections are rejected ping_timeout Description How long to wait in milliseconds for data from Moonlight before shutting down the stream Default Example Config Files file_apps Description The application configuration file path The file contains a JSON formatted list of applications that can be started by Moonlight Default Example credentials_file Description The file where user credentials for the UI are stored Default Example log_path Description The path where the Sunshine log is stored Default Example pkey Description The private key used for the web UI and Moonlight client pairing For best compatibility this should be an RSA-2048 private key Warning Not all Moonlight clients support ECDSA keys or RSA key lengths other than 2 0 4 8 bits Default Example cert Description The certificate used for the web UI and Moonlight client pairing For best compatibility this should have an RSA-2048 public key Warning Not all Moonlight clients support ECDSA keys or RSA key lengths other than 2 0 4 8 bits Default Example file_state Description The file where current state of Sunshine is stored Default Example Advanced fec_percentage Description Percentage of error correcting packets per data packet in each video frame Warning Higher values can correct for more network packet loss but at the cost of increasing bandwidth usage Default Range 1 2 5 5 Example qp Description Quantization Parameter Some devices don t support Constant Bit Rate For those devices QP is used instead Warning Higher value means more compression but less quality Default Example min_threads Description Minimum number of CPU threads used for encoding Note Increasing the value slightly reduces encoding efficiency but the tradeoff is usually worth it to gain the use of more CPU cores for encoding The ideal value is the lowest value that can reliably encode at your desired streaming settings on your hardware Default Example hevc_mode Description Allows the client to request HEVC Main or HEVC Main10 video streams Warning HEVC is more CPU-intensive to encode so enabling this may reduce performance when using software encoding Default Example Choices 0 advertise support for HEVC based on encoder capabilities recommended 1 do not advertise support for HEVC 2 advertise support for HEVC Main profile 3 advertise support for HEVC Main and Main10 HDR profiles av1_mode Description Allows the client to request AV1 Main 8 bit or 1 0 bit video streams Warning AV1 is more CPU-intensive to encode so enabling this may reduce performance when using software encoding Default Example Choices 0 advertise support for AV1 based on encoder capabilities recommended 1 do not advertise support for AV1 2 advertise support for AV1 Main 8 bit profile 3 advertise support for AV1 Main 8 bit and 1 0 bit HDR profiles capture Description Force specific screen capture method Default Automatic Sunshine will use the first capture method available in the order of the table above Example Choices nvfbc Use NVIDIA Frame Buffer Capture to capture direct to GPU memory This is usually the fastest method for NVIDIA cards NvFBC does not have native Wayland support and does not work with XWayland Note Applies to Linux only wlr Capture for wlroots based Wayland compositors via DMA-BUF Note Applies to Linux only kms DRM/KMS screen capture from the kernel This requires that Sunshine has cap_sys_admin capability Note Applies to Linux only x11 Uses XCB This is the slowest and most CPU intensive so should be avoided if possible Note Applies to Linux only ddx Use DirectX Desktop Duplication API to capture the display This is well-supported on Windows machines Note Applies to Windows only wgc beta feature Use Windows.Graphics.Capture to capture the display Note Applies to Windows only Attention This capture method is not compatible with the Sunshine service encoder Description Force a specific encoder Default Sunshine will use the first encoder that is available Example Choices nvenc For NVIDIA graphics cards quicksync For Intel graphics cards amdvce For AMD graphics cards vaapi Use Linux VA-API AMD Intel software Encoding occurs on the CPU NVIDIA NVENC Encoder nvenc_preset Description NVENC encoder performance preset Higher numbers improve compression quality at given bitrate at the cost of increased encoding latency Recommended to change only when limited by network or decoder otherwise similar effect can be accomplished by increasing bitrate Note This option only applies when using NVENC encoder Default Example Choices 1 P1 fastest 2 P2 3 P3 4 P4 5 P5 6 P6 7 P7 slowest nvenc_twopass Description Enable two-pass mode in NVENC encoder This allows to detect more motion vectors better distribute bitrate across the frame and more strictly adhere to bitrate limits Disabling it is not recommended since this can lead to occasional bitrate overshoot and subsequent packet loss Note This option only applies when using NVENC encoder Default Example Choices disabled One pass fastest quarter_res Two passes first pass at quarter resolution faster full_res Two passes first pass at full resolution slower nvenc_spatial_aq Description Assign higher QP values to flat regions of the video Recommended to enable when streaming at lower bitrates Note This option only applies when using NVENC encoder Warning Enabling this option may reduce performance Default Example nvenc_vbv_increase Description Single-frame VBV/HRD percentage increase By default Sunshine uses single-frame VBV/HRD which means any encoded video frame size is not expected to exceed requested bitrate divided by requested frame rate Relaxing this restriction can be beneficial and act as low-latency variable bitrate but may also lead to packet loss if the network doesn t have buffer headroom to handle bitrate spikes Maximum accepted value is 4 0 0 which corresponds to 5 x increased encoded video frame upper size limit Note This option only applies when using NVENC encoder Warning Can lead to network packet loss Default Range 0 4 0 0 Example nvenc_realtime_hags Description Use realtime gpu scheduling priority in NVENC when hardware accelerated gpu scheduling HAGS is enabled in Windows Currently NVIDIA drivers may freeze in encoder when HAGS is enabled realtime priority is used and VRAM utilization is close to maximum Disabling this option lowers the priority to high sidestepping the freeze at the cost of reduced capture performance when the GPU is heavily loaded Note This option only applies when using NVENC encoder Note Applies to Windows only Default Example nvenc_latency_over_power Description Adaptive P-State algorithm which NVIDIA drivers employ doesn t work well with low latency streaming so Sunshine requests high power mode explicitly Note This option only applies when using NVENC encoder Warning Disabling this is not recommended since this can lead to significantly increased encoding latency Note Applies to Windows only Default Example nvenc_opengl_vulkan_on_dxgi Description Sunshine can t capture fullscreen OpenGL and Vulkan programs at full frame rate unless they present on top of DXGI With this option enabled Sunshine changes global Vulkan/OpenGL present method to This is system-wide setting that is reverted on Sunshine program exit Note This option only applies when using NVENC encoder Note Applies to Windows only Default Example nvenc_h264_cavlc Description Prefer CAVLC entropy coding over CABAC in H.264 when using NVENC CAVLC is outdated and needs around 1 0 more bitrate for same quality but provides slightly faster decoding when using software decoder Note This option only applies when using H.264 format with the NVENC encoder Default Example Intel QuickSync Encoder qsv_preset Description The encoder preset to use Note This option only applies when using quicksync encoder Default Example Choices veryfast fastest lowest quality faster faster lower quality fast fast low quality medium medium default slow slow good quality slower slower better quality veryslow slowest best quality qsv_coder Description The entropy encoding to use Note This option only applies when using H.264 with the quicksync encoder Default Example Choices auto let ffmpeg decide cabac context adaptive binary arithmetic coding higher quality cavlc context adaptive variable-length coding faster decode qsv_slow_hevc Description This options enables use of HEVC on older Intel GPUs that only support low power encoding for H.264 Note This option only applies when using quicksync encoder Caution Streaming performance may be significantly reduced when this option is enabled Default Example AMD AMF Encoder amd_usage Description The encoder usage profile is used to set the base set of encoding parameters Note This option only applies when using amdvce encoder Note The other AMF options that follow will override a subset of the settings applied by your usage profile but there are hidden parameters set in usage profiles that cannot be overridden elsewhere Default Example Choices transcoding transcoding slowest webcam webcam slow lowlatency_high_quality low latency high quality fast lowlatency low latency faster ultralowlatency ultra low latency fastest amd_rc Description The encoder rate control Note This option only applies when using amdvce encoder Warning The vbr_latency option generally works best but some bitrate overshoots may still occur Enabling HRD allows all bitrate based rate controls to better constrain peak bitrate but may result in encoding artifacts depending on your card Default Example Choices cqp constant qp mode cbr constant bitrate vbr_latency variable bitrate latency constrained vbr_peak variable bitrate peak constrained amd_enforce_hrd Description Enable Hypothetical Reference Decoder HRD enforcement to help constrain the target bitrate Note This option only applies when using amdvce encoder Warning HRD is known to cause encoding artifacts or negatively affect encoding quality on certain cards Default Example amd_quality Description The quality profile controls the tradeoff between speed and quality of encoding Note This option only applies when using amdvce encoder Default Example Choices speed prefer speed balanced balanced quality prefer quality amd_preanalysis Description Preanalysis can increase encoding quality at the cost of latency Note This option only applies when using amdvce encoder Default Example amd_vbaq Description Variance Based Adaptive Quantization VBAQ can increase subjective visual quality by prioritizing allocation of more bits to smooth areas compared to more textured areas Note This option only applies when using amdvce encoder Default Example amd_coder Description The entropy encoding to use Note This option only applies when using H.264 with the amdvce encoder Default Example Choices auto let ffmpeg decide cabac context adaptive binary arithmetic coding faster decode cavlc context adaptive variable-length coding higher quality VideoToolbox Encoder vt_coder Description The entropy encoding to use Note This option only applies when using macOS Default Example Choices auto let ffmpeg decide cabac context adaptive binary arithmetic coding faster decode cavlc context adaptive variable-length coding higher quality vt_software Description Force Video Toolbox to use software encoding Note This option only applies when using macOS Default Example Choices auto let ffmpeg decide disabled disable software encoding allowed allow software encoding forced force software encoding vt_realtime Description Realtime encoding Note This option only applies when using macOS Warning Disabling realtime encoding might result in a delayed frame encoding or frame drop Default Example VA-API Encoder vaapi_strict_rc_buffer Description Enabling this option can avoid dropped frames over the network during scene changes but video quality may be reduced during motion Note This option only applies for H.264 and HEVC when using VA-API encoder on AMD GPUs Default Example Software Encoder sw_preset Description The encoder preset to use Note This option only applies when using software encoder Note From FFmpeg A preset is a collection of options that will provide a certain encoding speed to compression ratio A slower preset will provide better compression compression is quality per filesize This means that for example if you target a certain file size or constant bit rate you will achieve better quality with a slower preset Similarly for constant quality encoding you will simply save bitrate by choosing a slower preset Use the slowest preset that you have patience for Default Example Choices ultrafast fastest superfast veryfast faster fast medium slow slower veryslow slowest sw_tune Description The tuning preset to use Note This option only applies when using software encoder Note From FFmpeg You can optionally use tune to change settings based upon the specifics of your input Default Example Choices film use for high quality movie content lowers deblocking animation good for cartoons uses higher deblocking and more reference frames grain preserves the grain structure in old grainy film material stillimage good for slideshow-like content fastdecode allows faster decoding by disabling certain filters zerolatency good for fast encoding and low-latency streaming Previous Next Legal App Examples</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Contributing</field>
    <field name="url">md_docs_2contributing.html</field>
    <field name="keywords">Contributing</field>
    <field name="text">Contributing Read our contribution guide in our organization level docs Recommended Tools Tool Description CLion Recommended IDE for C++ development Free licenses available for open source developers through the JetBrains Open Source Program Project Patterns Web UI The Web UI uses Vite as its build system The HTML pages used by the Web UI are found in EJS is used as a templating system for the pages check template_header.html and template_header_main.html The Style System is provided by Bootstrap The JS framework used by the more interactive pages is Vus.js Building CMake bash cmake B build G Ninja S target web-ui ninja C build web-ui Manual bash npm run dev Localization Sunshine and related LizardByte projects are being localized into various languages The default language is en English Community We are looking for language coordinators to help approve translations The goal is to have the bars above filled with green! If you are interesting please reach out to us on our Discord server CrowdIn The translations occur on CrowdIn Anyone is free to contribute to the localization there Translation Basics The brand names LizardByte and Sunshine should never be translated Other brand names should never be translated Examples include AMD Intel and NVIDIA CrowdIn Integration How does it work When a change is made to Sunshine source code a workflow generates new translation templates that get pushed to CrowdIn automatically When translations are updated on CrowdIn a push gets made to the l10n_master branch and a PR is made against the master branch Once the PR is merged all updated translations are part of the project and will be included in the next release Extraction Web UI Sunshine uses Vue I18n for localizing the UI The following is a simple example of how to use it Add the string to the json file in English The json keys should be sorted alphabetically You can use jsonabc to sort the keys Due to the integration with Crowdin it is important to only add strings to the en.json file and to not modify any other language files After the PR is merged the translations can take place on CrowdIn Once the translations are complete a PR will be made to merge the translations into Sunshine Use the string in the Vue component More formatting examples can be found in the Vue I18n guide C++ There should be minimal cases where strings need to be extracted from C++ source code however it may be necessary in some situations For example the system tray icon could be localized as it is user interfacing Wrap the string to be extracted in a function as shown More examples can be found in the documentation for boost locale The below is for information only Contributors should never include manually updated template files or manually compiled language files in Pull Requests Strings are automatically extracted from the code to the locale/sunshine.po template file The generated file is used by CrowdIn to generate language specific template files The file is generated using the github/workflows/localize.yml workflow and is run on any push event into the master branch Jobs are only run if any of the following paths are modified When testing locally it may be desirable to manually extract initialize update and compile strings Python is required for this along with the python dependencies in the txt file Additionally xgettext must be installed Extract initialize and update Compile Due to the integration with CrowdIn it is important to not include any extracted or compiled files in Pull Requests The files are automatically generated and updated by the workflow Once the PR is merged the translations can take place on CrowdIn Once the translations are complete a PR will be made to merge the translations into Sunshine Testing Clang Format Source code is tested against the clang-format file for linting errors The workflow file responsible for clang format testing is github/workflows/cpp-clang-format-lint.yml Option 1 Option 2 will modify files Unit Testing Sunshine uses Google Test for unit testing Google Test is included in the repo as a submodule The test sources are located in the directory The tests need to be compiled into an executable and then run The tests are built using the normal build process but can be disabled by setting the BUILD_TESTS CMake option to OFF To run the tests execute the following command To see all available options run the tests with the help flag See the googletest FAQ for more information on how to use Google Test We use gcovr to generate code coverage reports and Codecov to analyze the reports for all PRs and commits Codecov will fail a PR if the total coverage is reduced too much or if not enough of the diff is covered by tests In some cases the code cannot be covered when running the tests inside of GitHub runners For example any test that needs access to the GPU will not be able to run In these cases the coverage can be omitted by adding comments to the code See the gcovr documentation for more information Even if your changes cannot be covered in the CI we still encourage you to write the tests for them This will allow maintainers to run the tests locally Previous Next Building Source Code std::string msg boost::locale::translate</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">GameStream Migration</field>
    <field name="url">md_docs_2gamestream__migration.html</field>
    <field name="keywords">GameStream Migration</field>
    <field name="text">GameStream Migration Nvidia announced that their GameStream service for Nvidia Games clients will be discontinued in February 2 0 2 3 Luckily Sunshine performance is now equal to or better than Nvidia GameStream Migration We have developed a simple migration tool to help you migrate your GameStream games and apps to Sunshine automatically Please check out our GSMS project if you re interested in an automated migration option GSMS offers the ability to migrate your custom and auto-detected games and apps The working directory command and image are all set in Sunshine s apps.json file The box-art image is also copied to a specified directory Internet Streaming If you are using the Moonlight Internet Hosting Tool you can remove it from your system when you migrate to Sunshine To stream over the Internet with Sunshine and a UPnP-capable router enable the UPnP option in the Sunshine Web UI Note Running Sunshine together with versions of the Moonlight Internet Hosting Tool prior to v5.6 will cause UPnP port forwarding to become unreliable Either uninstall the tool entirely or update it to v5.6 or later Limitations Sunshine does have some limitations as compared to Nvidia GameStream Automatic game/application list Changing game settings automatically to optimize streaming Previous Next Third-party Packages Legal</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Getting Started</field>
    <field name="url">md_docs_2getting__started.html</field>
    <field name="keywords">Getting Started</field>
    <field name="text">Getting Started The recommended method for running Sunshine is to use the binaries included in the latest release unless otherwise specified Pre-releases are also available These should be considered beta and release artifacts may be missing when merging changes on a faster cadence Binaries Binaries of Sunshine are created for each release They are available for Linux macOS and Windows Binaries can be found in the latest release Tip Some third party packages also exist See Third Party Packages for more information No support will be provided for third party packages! Install Docker Warning The Docker images are not recommended for most users Docker images are available on Dockerhub.io and ghcr.io See Docker for more information Linux CUDA Compatibility CUDA is used for NVFBC capture Tip See CUDA GPUS to cross-reference Compute Capability to your GPU The table below applies to packages provided by LizardByte If you use an official LizardByte package then you do not need to install CUDA CUDA Compatibility CUDA Version Min Driver CUDA Compute Capabilities Package 11.8.0 450.80.02 3 5 5 0 5 2 6 0 6 1 6 2 7 0 7 2 7 5 8 0 8 6 8 7 8 9 9 0 sunshine.AppImage sunshine-ubuntu-22.04 arch deb sunshine-ubuntu-24.04 arch deb 12.0.0 525.60.13 5 0 5 2 6 0 6 1 6 2 7 0 7 2 7 5 8 0 8 6 8 7 8 9 9 0 sunshine-debian-bookworm- arch deb 12.5.1 sunshine.pkg.tar.zst 12.6.2 560.35.03 sunshine_ arch flatpak Sunshine copr Fedora 4 0 12.8.1 570.124.06 Sunshine copr Fedora 4 2 AppImage Caution Use distro-specific packages instead of the AppImage if they are available According to AppImageLint the supported distro matrix of the AppImage is below ✖ Debian bullseye ✔ Debian bookworm ✔ Debian trixie ✔ Debian sid ✔ Ubuntu noble ✔ Ubuntu jammy ✖ Ubuntu focal ✖ Ubuntu bionic ✖ Ubuntu xenial ✖ Ubuntu trusty ✖ CentOS 7 Install Download sunshine.AppImage into your home directory Open terminal and run the following command Run Uninstall ArchLinux Warning We do not provide support for any AUR packages Install Prebuilt Packages Follow the instructions at LizardByte s pacman-repo to add the repository Then run the following command Install PKGBUILD Archive Open terminal and run the following command Uninstall Debian/Ubuntu Install Download sunshine- distro distro-version arch deb and run the following command Note The distro-version is the version of the distro we built the package on The arch is the architecture of your operating system Tip You can double-click the deb file to see details about the package and begin installation Uninstall Fedora Tip The package name is case-sensitive Install Enable copr repository or Install the package Uninstall Flatpak Caution Use distro-specific packages instead of the Flatpak if they are available Using this package requires that you have Flatpak installed Download local option Download sunshine_ arch flatpak and run the following command Note Replace arch with your system architecture Install system level Flathub Local Install user level Flathub Local Additional installation required Run with NVFBC capture X11 Only Run with KMS capture Wayland X11 Uninstall Homebrew Important The Homebrew package is experimental on Linux This package requires that you have Homebrew installed Install Uninstall macOS Important Sunshine on macOS is experimental Gamepads do not work Homebrew This package requires that you have Homebrew installed Install Uninstall Tip For beta you can replace sunshine with sunshine-beta in the above commands Windows Installer recommended Download and install sunshine-windows-installer.exe Attention You should carefully select or unselect the options you want to install Do not blindly install or enable features To uninstall find Sunshine in the list here and select from the overflow menu Different versions of Windows may provide slightly different steps for uninstall Standalone lite version Warning By using this package instead of the installer performance will be reduced This package is not recommended for most users No support will be provided! Download and extract sunshine-windows-portable.zip Open command prompt as administrator Firewall rules Install Uninstall Virtual Gamepad Support Install Uninstall Windows service Install Uninstall Initial Setup After installation some initial setup is required Linux KMS Capture Warning Capture of most Wayland-based desktop environments will fail unless this step is performed Note cap_sys_admin may as well be root except you don t need to be root to run the program This is necessary to allow Sunshine to use KMS capture Enable X11 Capture For X11 capture to work you may need to disable the capabilities that were set for KMS capture Service Start once Start on boot macOS The first time you start Sunshine you will be asked to grant access to screen recording and your microphone Sunshine can only access microphones on macOS due to system limitations To stream system audio use Soundflower or BlackHole Note Command Keys are not forwarded by Moonlight Right Option-Key is mapped to CMD-Key Caution Gamepads are not currently supported Usage Basic usage If Sunshine is not installed/running as a service then start Sunshine with the following command unless a start command is listed in the specified package install instructions above Note A service is a process that runs in the background This is the default when installing Sunshine from the Windows installer Running multiple instances of Sunshine is not advised Specify config file Note You do not need to specify a config file If no config file is entered the default location will be used Attention The configuration file specified will be created if it doesn t exist Start Sunshine over SSH Linux/X11 Assuming you are already logged into the host you can use this command If you are logged into the host with only a tty teletypewriter you can use startx to start the X server prior to executing Sunshine You nay need to add sleep between startx and sunshine to allow more time for the display to be ready Tip You could also utilize the bash_profile or bashrc files to set up the DISPLAY variable See also See Remote SSH Headless Setup on how to set up a headless streaming server without autologin and dummy plugs X11 NVidia GPUs Configuration Sunshine is configured via the web ui which is available on https://localhost:47990 by default You may replace localhost with your internal ip address Attention Ignore any warning given by your browser about This is due to the SSL certificate being self-signed Caution If running for the first time make sure to note the username and password that you created Add games and applications Adjust any configuration settings as needed In Moonlight you may need to add the PC manually When Moonlight requests for you insert the pin Login to the web ui Go to in the Navbar Type in your PIN and press Enter you should get a Success Message In Moonlight select one of the Applications listed Arguments To get a list of available arguments run the following command General AppImage Flatpak Shortcuts All shortcuts start with Ctrl+Alt+Shift just like Moonlight Ctrl+Alt+Shift+N Hide/Unhide the cursor This may be useful for Remote Desktop Mode for Moonlight Ctrl+Alt+Shift+F1/F12 Switch to different monitor for Streaming Application List Applications should be configured via the web UI A basic understanding of working directories and commands is required You can use Environment variables in place of values HOME will be replaced by the value of HOME will be replaced by e.g HOME will be become HOME env Adds or overwrites Environment variables for the commands/applications run by Sunshine This can only be changed by modifying the apps.json file directly Considerations On Windows Sunshine uses the Desktop Duplication API which only supports capturing from the GPU used for display If you want to capture and encode on the eGPU connect a display or HDMI dummy display dongle to it and run the games on that display When an application is started if there is an application already running it will be terminated If any of the prep-commands fail starting the application is aborted When the application has been shutdown the stream shuts down as well For example if you attempt to run steam as a cmd instead of detached the stream will immediately fail This is due to the method in which the steam process is executed Other applications may behave similarly This does not apply to detached applications The app works the same as any other application except it has no commands It does not start an application instead it simply starts a stream If you removed it and would like to get it back just add a new application with the name and as the image path For the Linux flatpak you must prepend commands with flatpak-spawn host HDR Support Streaming HDR content is officially supported on Windows hosts and experimentally supported for Linux hosts General HDR support information and requirements HDR must be activated in the host OS which may require an HDR-capable display or EDID emulator dongle connected to your host PC You must also enable the HDR option in your Moonlight client settings otherwise the stream will be SDR and probably overexposed if your host is HDR A good HDR experience relies on proper HDR display calibration both in the OS and in game HDR calibration can differ significantly between client and host displays You may also need to tune the brightness slider or HDR calibration options in game to the different HDR brightness capabilities of your client s display Some GPUs video encoders can produce lower image quality or encoding performance when streaming in HDR compared to SDR Additional information Windows HDR streaming is supported for Intel AMD and NVIDIA GPUs that support encoding HEVC Main 1 0 or AV1 1 0 bit profiles We recommend calibrating the display by streaming the Windows HDR Calibration app to your client device and saving an HDR calibration profile to use while streaming Older games that use NVIDIA-specific NVAPI HDR rather than native Windows HDR support may not display properly in HDR Linux HDR streaming is supported for Intel and AMD GPUs that support encoding HEVC Main 1 0 or AV1 1 0 bit profiles using VAAPI The KMS capture backend is required for HDR capture Other capture methods like NvFBC or X11 do not support HDR You will need a desktop environment with a compositor that supports HDR rendering such as Gamescope or KDE Plasma 6 See also Arch wiki on HDR Support for Linux and Reddit Guide for HDR Support for AMD GPUs Tutorials and Guides Tutorial videos are available here Guides are available here Community! Tutorials and Guides are community generated Want to contribute Reach out to us on our discord server Previous Next Overview Changelog</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Guides</field>
    <field name="url">md_docs_2guides.html</field>
    <field name="keywords">Guides</field>
    <field name="text">Guides Community A collection of guides written by the community is available on our blog Feel free to contribute your own tips and trips by making a PR to LizardByte.github.io Previous Next App Examples Performance Tuning</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Legal</field>
    <field name="url">md_docs_2legal.html</field>
    <field name="keywords">Legal</field>
    <field name="text">Legal Attention This documentation is for informational purposes only and is not intended as legal advice If you have any legal questions or concerns about using Sunshine we recommend consulting with a lawyer Sunshine is licensed under the GPL-3.0 license which allows for free use and modification of the software The full text of the license can be reviewed here Commercial Use Sunshine can be used in commercial applications without any limitations This means that businesses and organizations can use Sunshine to create and sell products or services without needing to seek permission or pay a fee However it is important to note that the GPL-3.0 license does not grant any rights to distribute or sell the encoders contained within Sunshine If you plan to sell access to Sunshine as part of their distribution you are responsible for obtaining the necessary licenses to do so This may include obtaining a license from the Motion Picture Experts Group MPEG-LA and/or any other necessary licensing requirements In summary while Sunshine is free to use it is the user s responsibility to ensure compliance with all applicable licensing requirements when redistributing the software as part of a commercial offering If you have any questions or concerns about using Sunshine in a commercial setting we recommend consulting with a lawyer Previous Next Gamestream Migration Configuration</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Performance Tuning</field>
    <field name="url">md_docs_2performance__tuning.html</field>
    <field name="keywords">Performance Tuning</field>
    <field name="text">Performance Tuning In addition to the options available in the Configuration section there are a few additional system options that can be used to help improve the performance of Sunshine AMD In Windows enabling Enhanced Sync in AMD s settings may help reduce the latency by an additional frame This applies to amfenc and libx264 NVIDIA Enabling Fast Sync in Nvidia settings may help reduce latency Previous Next Guides API</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Third-Party Packages</field>
    <field name="url">md_docs_2third__party__packages.html</field>
    <field name="keywords">Third-Party Packages</field>
    <field name="text">Third-Party Packages Danger These packages are not maintained by LizardByte Use at your own risk Chocolatey nixpkgs Scoop Solus Previous Next Docker Gamestream Migration</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Troubleshooting</field>
    <field name="url">md_docs_2troubleshooting.html</field>
    <field name="keywords">Troubleshooting</field>
    <field name="text">Troubleshooting General Forgotten Credentials If you forgot your credentials to the web UI try this General bash sunshine creds new-username new-password AppImage bash AppImage creds new-username new-password Flatpak bash flatpak run command sunshine dev.lizardbyte.app.Sunshine creds new-username new-password Don t forget to replace new-username and new-password with your new credentials Do not include the curly braces Unusual Mouse Behavior If you experience unusual mouse behavior try attaching a physical mouse to the Sunshine host Web UI Access Can t access the web UI Check firewall rules Controller works on Steam but not in games One trick might be to change Steam settings and check or uncheck the configuration to support Xbox/Playstation controllers and leave only support for Generic controllers Also if you have many controllers already directly connected to the host it might help to disable them so that the Sunshine provided controller connected to the guest is the one In Linux this can be accomplished on USB devices by finding the device in and writing 0 to the authorized file Network performance test For real-time game streaming the most important characteristic of the network path between server and client is not pure bandwidth but rather stability and consistency low latency with low variance minimal or no packet loss The network can be tested using the multi-platform tool iPerf3 On the Sunshine host iperf3 is started in server mode On the client device iperf3 is asked to perform a 6 0 second UDP test in reverse direction from server to client at a given bitrate e.g 5 0 Mbps Watch the output on the client for packet loss and jitter values Both should be very low Ideally packet loss remains less than 5 and jitter below 1 ms For Android clients use PingMaster For iOS clients use HE.NET Network Tools If you are testing a remote connection over the internet you will need to forward the port 5 2 0 1 TCP and UDP from your host Packet loss Buffer overrun If the host PC running Sunshine has a much faster connection to the network than the slowest segment of the network path to the client device running Moonlight massive packet loss can occur Sunshine emits its stream in bursts every 1 6 ms for 6 0 fps but those bursts can t be passed on fast enough to the client and must be buffered by one of the network devices inbetween If the bitrate is high enough these buffers will overflow and data will be discarded This can easily happen if e.g the host has a 2.5 Gbit/s connection and the client only 1 Gbit/s or Wi-Fi Similarly a 1 Gbps host may be too fast for a client having only a 1 0 0 Mbps interface As a workaround the transmission speed of the host NIC can be reduced 1 Gbps instead of 2.5 or 1 0 0 Mbps instead of 1 Gbps A technically more advanced solution would be to configure traffic shaping rules at the OS-level so that only Sunshine s traffic is slowed down Sunshine versions 0.23.1 include improved networking code that should alleviate or even solve this issue without reducing the NIC speed Packet loss MTU Although unlikely some guests might work better with a lower MTU from the host For example a LG TV was found to have 3 0 6 0 packet loss when the host had MTU set to 1 5 0 0 and 1 4 7 2 but 0 packet loss with a MTU of 1 4 2 8 set in the network card serving the stream a Linux PC It s unclear how that helped precisely so it s a last resort suggestion Linux Hardware Encoding fails Due to legal concerns Mesa has disabled hardware decoding and encoding by default If you see the above error in the Sunshine logs compiling Mesa manually may be required See the official Mesa3D Compiling and Installing documentation for instructions You must re-enable the disabled encoders You can do so by passing the following argument to the build system You may also want to enable decoders however that is not required for Sunshine and is not covered here Input not working After installation the udev rules need to be reloaded Our post-install script tries to do this for you automatically but if it fails you may need to restart your system If the input is still not working you may need to add your user to the input group Other build options are listed in the meson options file KMS Streaming fails If screencasting fails with KMS you may need to run the following to force unprivileged screencasting The above command will not work with the AppImage or Flatpak packages Please refer to the AppImage setup or Flatpak setup for more specific instructions KMS streaming fails on Nvidia GPUs If KMS screen capture results in a black screen being streamed you may need to set the parameter modeset 1 for Nvidia s kernel module This can be done by adding the following directive to the kernel command line Consult your distribution s documentation for details on how to do this Most often grub is used to load the kernel and set its command line AMD encoding latency issues If you notice unexpectedly high encoding latencies e.g in Moonlight s performance overlay or strong fluctuations thereof your system s Mesa libraries are outdated 24.2 This is particularly problematic at higher resolutions 4 K Starting with Mesa-24.2 applications can request a low-latency mode by running them with a special environment variable Sunshine sets this variable automatically no manual configuration is needed To check whether low-latency mode is being used one can watch the VCLK and DCLK frequencies in amdgpu_top Without this encoder tuning both clock frequencies will fluctuate strongly whereas with active low-latency encoding they will stay high as long as the encoder is used Gamescope compatibility Some users have reported stuttering issues when streaming games running within Gamescope macOS Dynamic session lookup failed If you get this error Dynamic session lookup supported but failed launchd did not provide a socket path verify that org.freedesktop.dbus is loaded! Try this Windows No gamepad detected Verify that you ve installed Nefarius Virtual Gamepad Permission denied Since Sunshine runs as a service on Windows it may not have the same level of access that your regular user account has You may get permission denied errors when attempting to launch a game or application from a non system drive You will need to modify the security permissions on your disk Ensure that user/principal SYSTEM has full permissions on the disk Stuttering If you experience stuttering using NVIDIA try disabling vsync fast in the NVIDIA Control Panel Previous Next API Building Error Could not open codec h264_vaapi Function not implemented</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Source Code</field>
    <field name="url">md_third-party_2doxyconfig_2docs_2source__code.html</field>
    <field name="keywords">Source Code</field>
    <field name="text">Source Code Code should be documented using Doxygen syntax Guidelines Doxygen Comments Use Doxygen comments to document all files functions classes and variables Inline documenation block should use the following format Multi-line comments such as for a documentation block should use the following format Documentation Blocks Documentation blocks should be placed above the declaration of the function class or variable Below is an example of a documentation block for the main function The examples and examples_end tags are not standard Doxygen tags They are custom aliases we have specified to simplify documenting examples Do not confuse this with the standard example tag In some cases it could be valuable to have slightly different documentation for the definitions especially when the definition may change depending on the platform or other factors In such cases you should put the documentation that is common in the declaration and the definition-specific documentation in the definition Below is an example of how to document the declaration and definition of a function File Documentation The file documentation block must be placed at the top of the file If it is not present Doxygen will ignore the file Understandably it is difficult to make a creative description for every file although it is still required Below is an example of a file documentation block Inline Documentation Blocks Inline comments can be used to describe enum values variables and other code constructs To document the members of a file struct union class or enum it is sometimes desired to place the documentation block after the member instead of before For this purpose you have to put an additional marker in the comment block Below is an example of an inline comment for an enum value Custom Aliases We have defined some custom aliases to simplify documenting examples examples Start of an example block This will format the following text as cpp examples_end End of an example block fa_icon font awsome definition Insert a Font Awesome icon Give the icon style and name as arguments e.g fa_icon fa-solid fa-check Admonitions admonition Custom Title Content The one with the custom titles It’s got a certain charm to it attention Content Attention The sun causes global warming caution Content Caution Cliff ahead Don’t drive off it danger Content Danger Mad scientist at work! error Content Error Does not compute hint Content Hint Insulators insulate until they are subject to ______ voltage important Content Important Tech is not neutral nor is it apolitical note Content Note This is a note seealso Content See also Other relevant information tip Content Tip 2 5 if the service is good todo Content TODO Fix this warning Content Warning Reader discretion is strongly advised Tabs Tab 1 Title Tab 1 Content Tab 2 Title Tab 2 Content Markers red Content This is red blue Content This is blue green Content This is green yellow Content This is yellow Expander Expander Content</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">microphone.mm</field>
    <field name="url">microphone_8mm.html</field>
    <field name="keywords">microphone.mm</field>
    <field name="text">Definitions for microphone capture on macOS</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">misc.mm</field>
    <field name="url">misc_8mm.html</field>
    <field name="keywords">misc.mm</field>
    <field name="text">Miscellaneous definitions for macOS platform</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">move_by_copy.h</field>
    <field name="url">move__by__copy_8h.html</field>
    <field name="keywords">move_by_copy.h</field>
    <field name="text">Declarations for the MoveByCopy utility class</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">move_by_copy.h</field>
    <field name="url">move__by__copy_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">move_by_copy.h</field>
    <field name="url">move__by__copy_8h_source.html#l00013</field>
    <field name="keywords"></field>
    <field name="text">move_by_copy_util</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">move_by_copy.h</field>
    <field name="url">move__by__copy_8h_source.html#l00019</field>
    <field name="keywords"></field>
    <field name="text">MoveByCopy T move_type move_type _to_move MoveByCopy move_type to_move _to_move std::move to_move MoveByCopy MoveByCopy other MoveByCopy MoveByCopy other other MoveByCopy operator= MoveByCopy other MoveByCopy operator= MoveByCopy other _to_move std::move MoveByCopy other _to_move move_type std::move _to_move MoveByCopy&lt;T&gt; cmove T movable MoveByCopy&lt;T&gt; std::move movable MoveByCopy&lt;T&gt; const_cmove T movable MoveByCopy&lt;T&gt; std::move T movable</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">args</field>
    <field name="url">namespaceargs.html</field>
    <field name="keywords">args</field>
    <field name="text">Functions for handling command line arguments creds help restore_nvprefs_undo version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">args::creds</field>
    <field name="args">(const char *name, int argc, char *argv[])</field>
    <field name="url">namespaceargs.html#a12f74871184d794069843ca2f73a33e9</field>
    <field name="keywords">creds args::creds args</field>
    <field name="text">Reset the user credentials Reset the user credentials Reset the user credentials name The name of the program argc The number of arguments argv The arguments Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">args::version</field>
    <field name="args">()</field>
    <field name="url">namespaceargs.html#a473eb95d65f3fc47ce193c8cfcc631da</field>
    <field name="keywords">version args::version args</field>
    <field name="text">Print the version to stdout then exit Print the version to stdout then exit Print the version to stdout then exit Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">args::restore_nvprefs_undo</field>
    <field name="args">()</field>
    <field name="url">namespaceargs.html#a93bfae6c032fd8b75633beb489c3e0d0</field>
    <field name="keywords">restore_nvprefs_undo args::restore_nvprefs_undo args</field>
    <field name="text">Restore global NVIDIA control panel settings If Sunshine was improperly terminated this function restores the global NVIDIA control panel settings to the undo file left by Sunshine This function is typically called by the uninstaller Restore global NVIDIA control panel settings If Sunshine was improperly terminated this function restores the global NVIDIA control panel settings to the undo file left by Sunshine This function is typically called by the uninstaller Restore global NVIDIA control panel settings If Sunshine was improperly terminated this function restores the global NVIDIA control panel settings to the undo file left by Sunshine This function is typically called by the uninstaller Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">args::help</field>
    <field name="args">(const char *name)</field>
    <field name="url">namespaceargs.html#afee3c375307ccb9b232d063f806f6ebb</field>
    <field name="keywords">help args::help args</field>
    <field name="text">Print help to stdout then exit Print help to stdout then exit Print help to stdout then exit name The name of the program Examples</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">file_handler</field>
    <field name="url">namespacefile__handler.html</field>
    <field name="keywords">file_handler</field>
    <field name="text">Responsible for file handling functions std::string parent_dir get_parent_directory dir_created make_directory std::string contents read_file write_status write_file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">file_handler::get_parent_directory</field>
    <field name="args">(const std::string &amp;path)</field>
    <field name="url">namespacefile__handler.html#a5f83a6d19cdbed1d2d772298e2290518</field>
    <field name="keywords">get_parent_directory file_handler::get_parent_directory file_handler</field>
    <field name="text">Get the parent directory of a file or directory Get the parent directory of a file or directory Get the parent directory of a file or directory path The path of the file or directory The parent directory Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">file_handler::read_file</field>
    <field name="args">(const char *path)</field>
    <field name="url">namespacefile__handler.html#aa1d83d73dbfdfbd44c84833c2729daa4</field>
    <field name="keywords">read_file file_handler::read_file file_handler</field>
    <field name="text">Read a file to string Read a file to string Read a file to string path The path of the file The contents of the file Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">file_handler::write_file</field>
    <field name="args">(const char *path, const std::string_view &amp;contents)</field>
    <field name="url">namespacefile__handler.html#ab1e7d514ba625bfdd1245cf585f2ae26</field>
    <field name="keywords">write_file file_handler::write_file file_handler</field>
    <field name="text">Writes a file Writes a file Writes a file path The path of the file contents The contents to write 0 on success 1 on failure Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">file_handler::make_directory</field>
    <field name="args">(const std::string &amp;path)</field>
    <field name="url">namespacefile__handler.html#af033c638da0032fe1dc51ea135048a85</field>
    <field name="keywords">make_directory file_handler::make_directory file_handler</field>
    <field name="text">Make a directory Make a directory Make a directory path The path of the directory true on success false on failure Examples</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">lifetime</field>
    <field name="url">namespacelifetime.html</field>
    <field name="keywords">lifetime</field>
    <field name="text">Functions for handling the lifetime of Sunshine</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">lifetime::debug_trap</field>
    <field name="args">()</field>
    <field name="url">namespacelifetime.html#a27ba172c553f3a39672faab8178d8b60</field>
    <field name="keywords">debug_trap lifetime::debug_trap lifetime</field>
    <field name="text">Breaks into the debugger or terminates Sunshine if no debugger is attached Breaks into the debugger or terminates Sunshine if no debugger is attached Breaks into the debugger or terminates Sunshine if no debugger is attached</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">lifetime::exit_sunshine</field>
    <field name="args">(int exit_code, bool async)</field>
    <field name="url">namespacelifetime.html#a8b0bdeb152a33f192bd40d76f780b6fb</field>
    <field name="keywords">exit_sunshine lifetime::exit_sunshine lifetime</field>
    <field name="text">Terminates Sunshine gracefully with the provided exit code Terminates Sunshine gracefully with the provided exit code Terminates Sunshine gracefully with the provided exit code exit_code The exit code to return from main() async Specifies whether our termination will be non-blocking</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">lifetime::get_argv</field>
    <field name="args">()</field>
    <field name="url">namespacelifetime.html#afba0e62507253a24ffd9da31b523899c</field>
    <field name="keywords">get_argv lifetime::get_argv lifetime</field>
    <field name="text">Get the argv array passed to main() Get the argv array passed to main() Get the argv array passed to main()</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">logging</field>
    <field name="url">namespacelogging.html</field>
    <field name="keywords">logging</field>
    <field name="text">Handles the initialization and deinitialization of the logging system deinit log_init log_flush print_help</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">logging::deinit</field>
    <field name="args">()</field>
    <field name="url">namespacelogging.html#a11f171cd89599eef361b13bd85d250a0</field>
    <field name="keywords">deinit logging::deinit logging</field>
    <field name="text">Deinitialize the logging system Deinitialize the logging system Deinitialize the logging system Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">logging::setup_av_logging</field>
    <field name="args">(int min_log_level)</field>
    <field name="url">namespacelogging.html#a1d7b8d4f36fbbce1bb2ea95222c1032e</field>
    <field name="keywords">setup_av_logging logging::setup_av_logging logging</field>
    <field name="text">Setup AV logging Setup AV logging Setup AV logging min_log_level The log level</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">logging::bracket</field>
    <field name="args">(const std::string &amp;input)</field>
    <field name="url">namespacelogging.html#a2598089e9a171456a1e4dcd95ce47223</field>
    <field name="keywords">bracket logging::bracket logging</field>
    <field name="text">Enclose string in square brackets Enclose string in square brackets Enclose string in square brackets input Input string Enclosed string</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">logging::print_help</field>
    <field name="args">(const char *name)</field>
    <field name="url">namespacelogging.html#a2e9cc953e537ca48326eadba8e948947</field>
    <field name="keywords">print_help logging::print_help logging</field>
    <field name="text">Print help to stdout Print help to stdout Print help to stdout name The name of the program Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">logging::init</field>
    <field name="args">(int min_log_level, const std::string &amp;log_file)</field>
    <field name="url">namespacelogging.html#a3609795d7d5469929c8d6aa5c8563f1e</field>
    <field name="keywords">init logging::init logging</field>
    <field name="text">Initialize the logging system Initialize the logging system Initialize the logging system min_log_level The minimum log level to output log_file The log file to write to An object that will deinitialize the logging system when it goes out of scope Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">logging::setup_libdisplaydevice_logging</field>
    <field name="args">(int min_log_level)</field>
    <field name="url">namespacelogging.html#a8d229a92cdf8a81494f80298e322ef43</field>
    <field name="keywords">setup_libdisplaydevice_logging logging::setup_libdisplaydevice_logging logging</field>
    <field name="text">Setup logging for libdisplaydevice Setup logging for libdisplaydevice Setup logging for libdisplaydevice min_log_level The log level</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">logging::log_flush</field>
    <field name="args">()</field>
    <field name="url">namespacelogging.html#a96f754b0ebd0874dd7387f0f016fdab8</field>
    <field name="keywords">log_flush logging::log_flush logging</field>
    <field name="text">Flush the log Flush the log Flush the log Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">logging::bracket</field>
    <field name="args">(const std::wstring &amp;input)</field>
    <field name="url">namespacelogging.html#a985fdcfe216bba1a3a572a6fa60942d8</field>
    <field name="keywords">bracket logging::bracket logging</field>
    <field name="text">Enclose string in square brackets Enclose string in square brackets Enclose string in square brackets input Input string Enclosed string</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">mail</field>
    <field name="url">namespacemail.html</field>
    <field name="keywords">mail</field>
    <field name="text">Handles process-wide communication</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">mail::man</field>
    <field name="url">namespacemail.html#afda717136d37a1ddff4ec467413580ef</field>
    <field name="keywords">man mail::man mail</field>
    <field name="text">A process-wide communication mechanism A process-wide communication mechanism</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">move_by_copy_util</field>
    <field name="url">namespacemove__by__copy__util.html</field>
    <field name="keywords">move_by_copy_util</field>
    <field name="text">Contains utilities for moving objects by copying them</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">nvenc</field>
    <field name="url">namespacenvenc.html</field>
    <field name="keywords">nvenc</field>
    <field name="text">Standalone NVENC encoder</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">nvenc::nvenc_two_pass</field>
    <field name="url">namespacenvenc.html#a52217719d86261eca1541d1fff7f5b43</field>
    <field name="keywords">nvenc_two_pass nvenc::nvenc_two_pass nvenc</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">nvenc::nvenc_two_pass::disabled</field>
    <field name="url">namespacenvenc.html#a52217719d86261eca1541d1fff7f5b43a075ae3d2fc31640504f814f60e5ef713</field>
    <field name="keywords">disabled nvenc::nvenc_two_pass::disabled nvenc disabled nvenc::nvenc_two_pass::disabled nvenc</field>
    <field name="text">Single pass the fastest and no extra vram</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">nvenc::nvenc_two_pass::full_resolution</field>
    <field name="url">namespacenvenc.html#a52217719d86261eca1541d1fff7f5b43ac4739d8e77a2e7a24e5df11090c36f67</field>
    <field name="keywords">full_resolution nvenc::nvenc_two_pass::full_resolution nvenc full_resolution nvenc::nvenc_two_pass::full_resolution nvenc</field>
    <field name="text">Better overall statistics slower and uses more extra vram</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">nvenc::nvenc_two_pass::quarter_resolution</field>
    <field name="url">namespacenvenc.html#a52217719d86261eca1541d1fff7f5b43af005eabc89aec82d934b1167c0cc51cf</field>
    <field name="keywords">quarter_resolution nvenc::nvenc_two_pass::quarter_resolution nvenc quarter_resolution nvenc::nvenc_two_pass::quarter_resolution nvenc</field>
    <field name="text">Larger motion vectors being caught faster and uses less extra vram</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">nvhttp</field>
    <field name="url">namespacenvhttp.html</field>
    <field name="keywords">nvhttp</field>
    <field name="text">Contains all the functions and variables related to the nvhttp GameStream server nvhttp::erase_all_clients nlohmann::json clients nvhttp::get_all_clients pin_status nvhttp::pin nvhttp::start nvhttp::unpair_client</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">nvhttp::GFE_VERSION</field>
    <field name="url">namespacenvhttp.html#a01beed0b82a8e45f4ecb8869c73e60ed</field>
    <field name="keywords">GFE_VERSION nvhttp::GFE_VERSION nvhttp</field>
    <field name="text">The GFE version we are replicating The GFE version we are replicating</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvhttp::getservercert</field>
    <field name="args">(pair_session_t &amp;sess, boost::property_tree::ptree &amp;tree, const std::string &amp;pin)</field>
    <field name="url">namespacenvhttp.html#a029c75452650f536e471f528db6d4ff6</field>
    <field name="keywords">getservercert nvhttp::getservercert nvhttp</field>
    <field name="text">Pair phase 1 Pair phase 1 Moonlight will send a salt and client certificate we ll also need the user provided pin PIN and SALT will be used to derive a shared AES key that needs to be stored in order to be used to decrypt_symmetric in the next phases At this stage we only have to send back our public certificate</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvhttp::serverchallengeresp</field>
    <field name="args">(pair_session_t &amp;sess, boost::property_tree::ptree &amp;tree, const std::string &amp;encrypted_response)</field>
    <field name="url">namespacenvhttp.html#a0c3984472f10cdb4f9559fc5f689b055</field>
    <field name="keywords">serverchallengeresp nvhttp::serverchallengeresp nvhttp</field>
    <field name="text">Pair phase 3 Pair phase 3 Moonlight will send back a serverchallengeresp an AES encrypted client hash we have to send back the pairingsecret using our private key we have to sign the certificate_signature server_secret generated in phase 2</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">nvhttp::op_e</field>
    <field name="url">namespacenvhttp.html#a31ca46e87cb64e974c8e6f43b350984b</field>
    <field name="keywords">op_e nvhttp::op_e nvhttp</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">nvhttp::op_e::REMOVE</field>
    <field name="url">namespacenvhttp.html#a31ca46e87cb64e974c8e6f43b350984ba78baf367c4626442174307cdf41c6538</field>
    <field name="keywords">REMOVE nvhttp::op_e::REMOVE nvhttp REMOVE nvhttp::op_e::REMOVE nvhttp</field>
    <field name="text">Remove certificate</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">nvhttp::op_e::ADD</field>
    <field name="url">namespacenvhttp.html#a31ca46e87cb64e974c8e6f43b350984ba9eeb52badb613229884838847294b90d</field>
    <field name="keywords">ADD nvhttp::op_e::ADD nvhttp ADD nvhttp::op_e::ADD nvhttp</field>
    <field name="text">Add certificate</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">nvhttp::PAIR_PHASE</field>
    <field name="url">namespacenvhttp.html#a32c863c532893110e08c2746d919b07a</field>
    <field name="keywords">PAIR_PHASE nvhttp::PAIR_PHASE nvhttp</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">nvhttp::PAIR_PHASE::SERVERCHALLENGERESP</field>
    <field name="url">namespacenvhttp.html#a32c863c532893110e08c2746d919b07aa689726b92262b6e72706910e8b130187</field>
    <field name="keywords">SERVERCHALLENGERESP nvhttp::PAIR_PHASE::SERVERCHALLENGERESP nvhttp SERVERCHALLENGERESP nvhttp::PAIR_PHASE::SERVERCHALLENGERESP nvhttp</field>
    <field name="text">Sunshine is in the server challenge response phase</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">nvhttp::PAIR_PHASE::CLIENTCHALLENGE</field>
    <field name="url">namespacenvhttp.html#a32c863c532893110e08c2746d919b07aa8fdceb38bd5504b2723f1c3e79c9e61c</field>
    <field name="keywords">CLIENTCHALLENGE nvhttp::PAIR_PHASE::CLIENTCHALLENGE nvhttp CLIENTCHALLENGE nvhttp::PAIR_PHASE::CLIENTCHALLENGE nvhttp</field>
    <field name="text">Sunshine is in the client challenge phase</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">nvhttp::PAIR_PHASE::NONE</field>
    <field name="url">namespacenvhttp.html#a32c863c532893110e08c2746d919b07aab50339a10e1de285ac99d4c3990b8693</field>
    <field name="keywords">NONE nvhttp::PAIR_PHASE::NONE nvhttp NONE nvhttp::PAIR_PHASE::NONE nvhttp</field>
    <field name="text">Sunshine is not in a pairing phase</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">nvhttp::PAIR_PHASE::CLIENTPAIRINGSECRET</field>
    <field name="url">namespacenvhttp.html#a32c863c532893110e08c2746d919b07aabe756171b30e9406909628efb22bad48</field>
    <field name="keywords">CLIENTPAIRINGSECRET nvhttp::PAIR_PHASE::CLIENTPAIRINGSECRET nvhttp CLIENTPAIRINGSECRET nvhttp::PAIR_PHASE::CLIENTPAIRINGSECRET nvhttp</field>
    <field name="text">Sunshine is in the client pairing secret phase</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">nvhttp::PAIR_PHASE::GETSERVERCERT</field>
    <field name="url">namespacenvhttp.html#a32c863c532893110e08c2746d919b07aace1b9e431a8b8bb1f38ed19aca9a3d25</field>
    <field name="keywords">GETSERVERCERT nvhttp::PAIR_PHASE::GETSERVERCERT nvhttp GETSERVERCERT nvhttp::PAIR_PHASE::GETSERVERCERT nvhttp</field>
    <field name="text">Sunshine is in the get server certificate phase</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">nvhttp::PORT_HTTPS</field>
    <field name="url">namespacenvhttp.html#a386ed69b6622e36c28587a16daaf46f9</field>
    <field name="keywords">PORT_HTTPS nvhttp::PORT_HTTPS nvhttp</field>
    <field name="text">The HTTPS port as a difference from the config port The HTTPS port as a difference from the config port</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">nvhttp::VERSION</field>
    <field name="url">namespacenvhttp.html#a610976c6532c85fde22a4a6fc5ea787c</field>
    <field name="keywords">VERSION nvhttp::VERSION nvhttp</field>
    <field name="text">The protocol version The protocol version The version of the GameStream protocol we are mocking The negative 4 th number indicates to Moonlight that this is Sunshine</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvhttp::start</field>
    <field name="args">()</field>
    <field name="url">namespacenvhttp.html#a63239afdbcdd7797e82f0b18ee9902d1</field>
    <field name="keywords">start nvhttp::start nvhttp</field>
    <field name="text">Start the nvhttp server Start the nvhttp server Start the nvhttp server Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvhttp::setup</field>
    <field name="args">(const std::string &amp;pkey, const std::string &amp;cert)</field>
    <field name="url">namespacenvhttp.html#a7c61ccf236799f23e47f6b9ba8ad2e84</field>
    <field name="keywords">setup nvhttp::setup nvhttp</field>
    <field name="text">Setup the nvhttp server Setup the nvhttp server Setup the nvhttp server pkey cert</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">nvhttp::PORT_HTTP</field>
    <field name="url">namespacenvhttp.html#a7d7cc320875ff1f64e4f9b4abd583fbb</field>
    <field name="keywords">PORT_HTTP nvhttp::PORT_HTTP nvhttp</field>
    <field name="text">The HTTP port as a difference from the config port The HTTP port as a difference from the config port</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvhttp::pin</field>
    <field name="args">(std::string pin, std::string name)</field>
    <field name="url">namespacenvhttp.html#a941330f65943656e005c425a5b608b0e</field>
    <field name="keywords">pin nvhttp::pin nvhttp</field>
    <field name="text">Compare the user supplied pin to the Moonlight pin Compare the user supplied pin to the Moonlight pin Compare the user supplied pin to the Moonlight pin pin The user supplied pin name The user supplied name true if the pin is correct false otherwise Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvhttp::unpair_client</field>
    <field name="args">(std::string_view uuid)</field>
    <field name="url">namespacenvhttp.html#a96fc5345d0d17e402ca9449983ab1d8d</field>
    <field name="keywords">unpair_client nvhttp::unpair_client nvhttp</field>
    <field name="text">Remove single client Remove single client Remove single client uuid The UUID of the client to remove Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvhttp::erase_all_clients</field>
    <field name="args">()</field>
    <field name="url">namespacenvhttp.html#ab8f632f498bb1e96166ec40172fb495f</field>
    <field name="keywords">erase_all_clients nvhttp::erase_all_clients nvhttp</field>
    <field name="text">Remove all paired clients Remove all paired clients Remove all paired clients Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvhttp::remove_session</field>
    <field name="args">(const pair_session_t &amp;sess)</field>
    <field name="url">namespacenvhttp.html#ad3de46ad4dc8a2d5e43bcf52325e23de</field>
    <field name="keywords">remove_session nvhttp::remove_session nvhttp</field>
    <field name="text">removes the temporary pairing session removes the temporary pairing session removes the temporary pairing session sess</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvhttp::clientchallenge</field>
    <field name="args">(pair_session_t &amp;sess, boost::property_tree::ptree &amp;tree, const std::string &amp;challenge)</field>
    <field name="url">namespacenvhttp.html#ae36608bb19f051c151396e4da5953fb4</field>
    <field name="keywords">clientchallenge nvhttp::clientchallenge nvhttp</field>
    <field name="text">Pair phase 2 Pair phase 2 Using the AES key that we generated in phase 1 we have to decrypt the client challenge We generate a SHA256 hash with the following Decrypted challenge Server certificate signature Server secret a randomly generated secret The hash server_challenge will then be AES encrypted and sent as the challengeresponse in the returned XML</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvhttp::clientpairingsecret</field>
    <field name="args">(pair_session_t &amp;sess, std::shared_ptr&lt; safe::queue_t&lt; crypto::x509_t &gt; &gt; &amp;add_cert, boost::property_tree::ptree &amp;tree, const std::string &amp;client_pairing_secret)</field>
    <field name="url">namespacenvhttp.html#ae4ad5b2cf8f2b541b7e8de67f43a4125</field>
    <field name="keywords">clientpairingsecret nvhttp::clientpairingsecret nvhttp</field>
    <field name="text">Pair phase 4 final Pair phase 4 final We now have to use everything we exchanged before in order to verify and finally pair the clients We ll check the client_hash obtained at phase 3 it should contain the following The original server_challenge The signature of the X509 client_cert The unencrypted client_pairing_secret We ll check that SHA256 server_challenge client_public_cert_signature client_secret client_hash Then using the client certificate public key we should be able to verify that the client secret has been signed by Moonlight</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">nvhttp::get_all_clients</field>
    <field name="args">()</field>
    <field name="url">namespacenvhttp.html#af50e779196756a8c3ddb47ad55dfab00</field>
    <field name="keywords">get_all_clients nvhttp::get_all_clients nvhttp</field>
    <field name="text">Get all paired clients Get all paired clients Get all paired clients The list of all paired clients Examples</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">round_robin_util</field>
    <field name="url">namespaceround__robin__util.html</field>
    <field name="keywords">round_robin_util</field>
    <field name="text">A round-robin iterator utility V The value type T The iterator type</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">service_ctrl</field>
    <field name="url">namespaceservice__ctrl.html</field>
    <field name="keywords">service_ctrl</field>
    <field name="text">Namespace for controlling the Sunshine service model on Windows is_service_running start_service wait_for_ui_ready</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">service_ctrl::wait_for_ui_ready</field>
    <field name="args">()</field>
    <field name="url">namespaceservice__ctrl.html#a456b1b9d74875d96cfa6f621cc0eccc1</field>
    <field name="keywords">wait_for_ui_ready service_ctrl::wait_for_ui_ready service_ctrl</field>
    <field name="text">Wait for the UI to be ready after Sunshine startup Wait for the UI to be ready after Sunshine startup Wait for the UI to be ready after Sunshine startup Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">service_ctrl::start_service</field>
    <field name="args">()</field>
    <field name="url">namespaceservice__ctrl.html#a8f1e7147071be694336fdbacc8ade29e</field>
    <field name="keywords">start_service service_ctrl::start_service service_ctrl</field>
    <field name="text">Start the service and wait for startup to complete Start the service and wait for startup to complete Start the service and wait for startup to complete Examples</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">service_ctrl::is_service_running</field>
    <field name="args">()</field>
    <field name="url">namespaceservice__ctrl.html#aa95a823d2d5ab722c07a972430933881</field>
    <field name="keywords">is_service_running service_ctrl::is_service_running service_ctrl</field>
    <field name="text">Check if the service is running Check if the service is running Check if the service is running Examples</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">system_tray</field>
    <field name="url">namespacesystem__tray.html</field>
    <field name="keywords">system_tray</field>
    <field name="text">Handles the system tray icon and notification system</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::tray_donate_github_cb</field>
    <field name="args">(struct tray_menu *item)</field>
    <field name="url">namespacesystem__tray.html#a06401f46c3d836160b1266e97f93acac</field>
    <field name="keywords">tray_donate_github_cb system_tray::tray_donate_github_cb system_tray</field>
    <field name="text">Callback for opening GitHub Sponsors from the system tray Callback for opening GitHub Sponsors from the system tray Callback for opening GitHub Sponsors from the system tray item The tray menu item</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::tray_donate_paypal_cb</field>
    <field name="args">(struct tray_menu *item)</field>
    <field name="url">namespacesystem__tray.html#a0c3dac8da5061d41fb790a1daef6ce5a</field>
    <field name="keywords">tray_donate_paypal_cb system_tray::tray_donate_paypal_cb system_tray</field>
    <field name="text">Callback for opening PayPal donation from the system tray Callback for opening PayPal donation from the system tray Callback for opening PayPal donation from the system tray item The tray menu item</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::update_tray_require_pin</field>
    <field name="args">()</field>
    <field name="url">namespacesystem__tray.html#a1640355ea6fc75355d78435b3c536464</field>
    <field name="keywords">update_tray_require_pin system_tray::update_tray_require_pin system_tray</field>
    <field name="text">Spawns a notification for PIN Pairing Clicking it opens the PIN Web UI Page Spawns a notification for PIN Pairing Clicking it opens the PIN Web UI Page Spawns a notification for PIN Pairing Clicking it opens the PIN Web UI Page</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::update_tray_playing</field>
    <field name="args">(std::string app_name)</field>
    <field name="url">namespacesystem__tray.html#a4f6e8d48a63e9e8cbf9937f238e40ae4</field>
    <field name="keywords">update_tray_playing system_tray::update_tray_playing system_tray</field>
    <field name="text">Sets the tray icon in playing mode and spawns the appropriate notification Sets the tray icon in playing mode and spawns the appropriate notification Sets the tray icon in playing mode and spawns the appropriate notification app_name The started application name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::update_tray_pausing</field>
    <field name="args">(std::string app_name)</field>
    <field name="url">namespacesystem__tray.html#a5647efe54c7931f199d107a49a5d448e</field>
    <field name="keywords">update_tray_pausing system_tray::update_tray_pausing system_tray</field>
    <field name="text">Sets the tray icon in pausing mode stream stopped but app running and spawns the appropriate notification Sets the tray icon in pausing mode stream stopped but app running and spawns the appropriate notification Sets the tray icon in pausing mode stream stopped but app running and spawns the appropriate notification app_name The paused application name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::tray_reset_display_device_config_cb</field>
    <field name="args">(struct tray_menu *item)</field>
    <field name="url">namespacesystem__tray.html#a640f7b26de86409292bd94aaba86219a</field>
    <field name="keywords">tray_reset_display_device_config_cb system_tray::tray_reset_display_device_config_cb system_tray</field>
    <field name="text">Callback for resetting display device configuration Callback for resetting display device configuration Callback for resetting display device configuration item The tray menu item</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::system_tray</field>
    <field name="args">()</field>
    <field name="url">namespacesystem__tray.html#a6cee9be2caea717e184259d1a263013e</field>
    <field name="keywords">system_tray system_tray::system_tray system_tray</field>
    <field name="text">Create the system tray Create the system tray Create the system tray This function has an endless loop so it should be run in a separate thread 1 if the system tray failed to create otherwise 0 once the tray has been terminated</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::tray_restart_cb</field>
    <field name="args">(struct tray_menu *item)</field>
    <field name="url">namespacesystem__tray.html#a7acbcf307976f68130ce30bc590e0db6</field>
    <field name="keywords">tray_restart_cb system_tray::tray_restart_cb system_tray</field>
    <field name="text">Callback for restarting Sunshine from the system tray Callback for restarting Sunshine from the system tray Callback for restarting Sunshine from the system tray item The tray menu item</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::run_tray</field>
    <field name="args">()</field>
    <field name="url">namespacesystem__tray.html#a8c259195beecf2cde957fd1657eaa385</field>
    <field name="keywords">run_tray system_tray::run_tray system_tray</field>
    <field name="text">Run the system tray with platform specific options Run the system tray with platform specific options Run the system tray with platform specific options macOS requires that UI elements be created on the main thread so the system tray is not currently implemented for macOS</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::tray_open_ui_cb</field>
    <field name="args">(struct tray_menu *item)</field>
    <field name="url">namespacesystem__tray.html#aaeea87d5ac456656276238968470eeda</field>
    <field name="keywords">tray_open_ui_cb system_tray::tray_open_ui_cb system_tray</field>
    <field name="text">Callback for opening the UI from the system tray Callback for opening the UI from the system tray Callback for opening the UI from the system tray item The tray menu item</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::tray_quit_cb</field>
    <field name="args">(struct tray_menu *item)</field>
    <field name="url">namespacesystem__tray.html#ab3be27da0db992dfeec074efe5cde7a9</field>
    <field name="keywords">tray_quit_cb system_tray::tray_quit_cb system_tray</field>
    <field name="text">Callback for exiting Sunshine from the system tray Callback for exiting Sunshine from the system tray Callback for exiting Sunshine from the system tray item The tray menu item</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::end_tray</field>
    <field name="args">()</field>
    <field name="url">namespacesystem__tray.html#ac9fe9a0b957cf5193a168c2ead8e4dd8</field>
    <field name="keywords">end_tray system_tray::end_tray system_tray</field>
    <field name="text">Exit the system tray Exit the system tray Exit the system tray 0 after exiting the system tray</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::update_tray_stopped</field>
    <field name="args">(std::string app_name)</field>
    <field name="url">namespacesystem__tray.html#ad8b842daccbe32f59a2850c1e9a98d32</field>
    <field name="keywords">update_tray_stopped system_tray::update_tray_stopped system_tray</field>
    <field name="text">Sets the tray icon in stopped mode app and stream stopped and spawns the appropriate notification Sets the tray icon in stopped mode app and stream stopped and spawns the appropriate notification Sets the tray icon in stopped mode app and stream stopped and spawns the appropriate notification app_name The started application name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">system_tray::tray_donate_patreon_cb</field>
    <field name="args">(struct tray_menu *item)</field>
    <field name="url">namespacesystem__tray.html#afbe5aabcd33141afef780be522ac2444</field>
    <field name="keywords">tray_donate_patreon_cb system_tray::tray_donate_patreon_cb system_tray</field>
    <field name="text">Callback for opening Patreon from the system tray Callback for opening Patreon from the system tray Callback for opening Patreon from the system tray item The tray menu item</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">upnp</field>
    <field name="url">namespaceupnp.html</field>
    <field name="keywords">upnp</field>
    <field name="text">UPnP port mapping</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">upnp::UPNP_GetValidIGDStatus</field>
    <field name="args">(device_t &amp;device, urls_t *urls, IGDdatas *data, std::array&lt; char, INET6_ADDRESS_STRLEN &gt; &amp;lan_addr)</field>
    <field name="url">namespaceupnp.html#abc289edc95d71e1b541726d57951f827</field>
    <field name="keywords">UPNP_GetValidIGDStatus upnp::UPNP_GetValidIGDStatus upnp</field>
    <field name="text">Get the valid IGD status Get the valid IGD status Get the valid IGD status This function is a wrapper around UPNP_GetValidIGD() that returns the status code There is a pre-processor check to determine which version of the function to call based on the version of the MiniUPnPc library device The device urls The URLs data The IGD data lan_addr The LAN address The UPnP Status 0 No IGD found 1 A valid connected IGD has been found 2 A valid IGD has been found but it reported as not connected 3 An UPnP device has been found but was not recognized as an IGD</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">uuid_util</field>
    <field name="url">namespaceuuid__util.html</field>
    <field name="keywords">uuid_util</field>
    <field name="text">UUID utilities</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">wl</field>
    <field name="url">namespacewl.html</field>
    <field name="keywords">wl</field>
    <field name="text">The classes defined in this macro block should only be used by cpp files whose compilation depends on SUNSHINE_BUILD_WAYLAND</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">network.cpp</field>
    <field name="url">network_8cpp.html</field>
    <field name="keywords">network.cpp</field>
    <field name="text">Definitions for networking related functions std::uint16_t mapped_port net::map_port</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">net::map_port</field>
    <field name="args">(int port)</field>
    <field name="url">network_8cpp.html#a0a37be704ccaa8d04aaecb8d9434c5d4</field>
    <field name="keywords">map_port net::map_port net</field>
    <field name="text">Map a specified port based on the base port port The port to map as a difference from the base port The mapped port number Examples Ensure port is not already in use by another application Map a specified port based on the base port port The port to map as a difference from the base port The mapped port number Examples Ensure port is not already in use by another application</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">net::addr_to_url_escaped_string</field>
    <field name="args">(boost::asio::ip::address address)</field>
    <field name="url">network_8cpp.html#a3887be8caf0ac14270e0c92da3e2d93b</field>
    <field name="keywords">addr_to_url_escaped_string net::addr_to_url_escaped_string net</field>
    <field name="text">Get the given address in a normalized form for the host portion of a URL Normalization converts IPv4-mapped IPv6 addresses into IPv4 addresses address The address to normalize and escape Normalized address in URL-escaped string Get the given address in a normalized form for the host portion of a URL Normalization converts IPv4-mapped IPv6 addresses into IPv4 addresses address The address to normalize and escape Normalized address in URL-escaped string</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">net::lan_ips_v6</field>
    <field name="url">network_8cpp.html#a3daace9a26e31d4fe39115246c34fcc2</field>
    <field name="keywords"></field>
    <field name="text">ip::make_network_v6 sv ip::make_network_v6 sv</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">net::lan_ips_v4</field>
    <field name="url">network_8cpp.html#a4114f31567c1ee4da3f46667f5417ac9</field>
    <field name="keywords"></field>
    <field name="text">ip::make_network_v4 sv ip::make_network_v4 sv ip::make_network_v4 sv ip::make_network_v4 sv ip::make_network_v4 sv</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">net::pc_ips_v6</field>
    <field name="url">network_8cpp.html#a41ce133835a0f143abdfa48d6b1d5426</field>
    <field name="keywords"></field>
    <field name="text">ip::make_network_v6 sv</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">net::af_to_any_address_string</field>
    <field name="args">(af_e af)</field>
    <field name="url">network_8cpp.html#a6b811d3b976c98982cfa0a4d367315d9</field>
    <field name="keywords">af_to_any_address_string net::af_to_any_address_string net</field>
    <field name="text">Get the wildcard binding address for a given address family af Address family Normalized address Get the wildcard binding address for a given address family af Address family Normalized address</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">net::pc_ips_v4</field>
    <field name="url">network_8cpp.html#a79204d99332ac044082e2c6e5d52fa95</field>
    <field name="keywords"></field>
    <field name="text">ip::make_network_v4 sv</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">net::addr_to_normalized_string</field>
    <field name="args">(boost::asio::ip::address address)</field>
    <field name="url">network_8cpp.html#aa96a671dd323f3ae53f76eac03426ede</field>
    <field name="keywords">addr_to_normalized_string net::addr_to_normalized_string net</field>
    <field name="text">Get the given address in normalized string form Normalization converts IPv4-mapped IPv6 addresses into IPv4 addresses address The address to normalize Normalized address in string form Get the given address in normalized string form Normalization converts IPv4-mapped IPv6 addresses into IPv4 addresses address The address to normalize Normalized address in string form</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">net::mdns_instance_name</field>
    <field name="args">(const std::string_view &amp;hostname)</field>
    <field name="url">network_8cpp.html#ae0c0ca8185b559bf6f65fa7677f592e9</field>
    <field name="keywords">mdns_instance_name net::mdns_instance_name net</field>
    <field name="text">Returns a string for use as the instance name for mDNS hostname The hostname to use for instance name generation Hostname-based instance name or if hostname is invalid Returns a string for use as the instance name for mDNS hostname The hostname to use for instance name generation Hostname-based instance name or if hostname is invalid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">net::normalize_address</field>
    <field name="args">(boost::asio::ip::address address)</field>
    <field name="url">network_8cpp.html#ae896fcfb32048dbe4d597ce8bbb8e123</field>
    <field name="keywords">normalize_address net::normalize_address net</field>
    <field name="text">Convert an address to a normalized form Normalization converts IPv4-mapped IPv6 addresses into IPv4 addresses address The address to normalize Normalized address Convert an address to a normalized form Normalization converts IPv4-mapped IPv6 addresses into IPv4 addresses address The address to normalize Normalized address</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">net::af_from_enum_string</field>
    <field name="args">(const std::string_view &amp;view)</field>
    <field name="url">network_8cpp.html#af32f6bc0014ada0f28397682e23a2595</field>
    <field name="keywords">af_from_enum_string net::af_from_enum_string net</field>
    <field name="text">Get the address family enum value from a string view The config option value The address family enum value Get the address family enum value from a string view The config option value The address family enum value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">net::encryption_mode_for_address</field>
    <field name="args">(boost::asio::ip::address address)</field>
    <field name="url">network_8cpp.html#af8dcf52944b17fb8bd0d5f54780f81c7</field>
    <field name="keywords">encryption_mode_for_address net::encryption_mode_for_address net</field>
    <field name="text">Get the encryption mode for the given remote endpoint address address The address used to look up the desired encryption mode The WAN or LAN encryption mode based on the provided address Get the encryption mode for the given remote endpoint address address The address used to look up the desired encryption mode The WAN or LAN encryption mode based on the provided address</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">network.h</field>
    <field name="url">network_8h.html</field>
    <field name="keywords">network.h</field>
    <field name="text">Declarations for networking related functions std::uint16_t mapped_port net::map_port</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">net::af_e</field>
    <field name="url">network_8h.html#a1ed5da07a6d5b35033bd4de7bca12dab</field>
    <field name="keywords">af_e net::af_e net</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">net::IPV4</field>
    <field name="url">network_8h.html#a1ed5da07a6d5b35033bd4de7bca12daba897b89539a9ed02e81e4aae60b92f8ae</field>
    <field name="keywords">IPV4 net::IPV4 net IPV4 net::IPV4 net</field>
    <field name="text">IPv4 only</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">net::BOTH</field>
    <field name="url">network_8h.html#a1ed5da07a6d5b35033bd4de7bca12dababc6c5aa4d1701ee38eb95a5ca15ab657</field>
    <field name="keywords">BOTH net::BOTH net BOTH net::BOTH net</field>
    <field name="text">IPv4 and IPv6</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">net::net_e</field>
    <field name="url">network_8h.html#af265c335edb963e60ec75f612b9eef13</field>
    <field name="keywords">net_e net::net_e net</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">net::PC</field>
    <field name="url">network_8h.html#af265c335edb963e60ec75f612b9eef13a474497f4d17b63685911b74f306160a2</field>
    <field name="keywords">PC net::PC net PC net::PC net</field>
    <field name="text">PC</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">net::WAN</field>
    <field name="url">network_8h.html#af265c335edb963e60ec75f612b9eef13a4a6b5798854f8e5527c1cc40a54cff0f</field>
    <field name="keywords">WAN net::WAN net WAN net::WAN net</field>
    <field name="text">WAN</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">net::LAN</field>
    <field name="url">network_8h.html#af265c335edb963e60ec75f612b9eef13af733f5db0a940c4097312653ca0c960c</field>
    <field name="keywords">LAN net::LAN net LAN net::LAN net</field>
    <field name="text">LAN</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">network.h</field>
    <field name="url">network_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">net free_host ENetHost host std::uint16_t net::map_port port host_t util::safe_ptr&lt;ENetHost, free_host&gt; peer_t ENetPeer packet_t util::safe_ptr&lt;ENetPacket, enet_packet_destroy&gt;</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">network.h</field>
    <field name="url">network_8h_source.html#l00036</field>
    <field name="keywords"></field>
    <field name="text">net_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">network.h</field>
    <field name="url">network_8h_source.html#l00037</field>
    <field name="keywords"></field>
    <field name="text">PC</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">network.h</field>
    <field name="url">network_8h_source.html#l00038</field>
    <field name="keywords"></field>
    <field name="text">LAN</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">network.h</field>
    <field name="url">network_8h_source.html#l00039</field>
    <field name="keywords"></field>
    <field name="text">WAN</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">network.h</field>
    <field name="url">network_8h_source.html#l00042</field>
    <field name="keywords"></field>
    <field name="text">af_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">network.h</field>
    <field name="url">network_8h_source.html#l00043</field>
    <field name="keywords"></field>
    <field name="text">IPV4</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">network.h</field>
    <field name="url">network_8h_source.html#l00044</field>
    <field name="keywords"></field>
    <field name="text">BOTH net_e from_enum_string std::string_view view std::string_view to_enum_string net_e net net_e from_address std::string_view view host_t host_create af_e af ENetAddress addr std::uint16_t port af_e af_from_enum_string std::string_view view std::string_view af_to_any_address_string af_e af boost::asio::ip::address normalize_address boost::asio::ip::address address std::string addr_to_normalized_string boost::asio::ip::address address std::string addr_to_url_escaped_string boost::asio::ip::address address encryption_mode_for_address boost::asio::ip::address address std::string mdns_instance_name std::string_view hostname</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nv12_zero_device.cpp</field>
    <field name="url">nv12__zero__device_8cpp.html</field>
    <field name="keywords">nv12_zero_device.cpp</field>
    <field name="text">Definitions for NV12 zero copy device on macOS</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nv12_zero_device.h</field>
    <field name="url">nv12__zero__device_8h.html</field>
    <field name="keywords">nv12_zero_device.h</field>
    <field name="text">Declarations for NV12 zero copy device on macOS</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nv12_zero_device.h</field>
    <field name="url">nv12__zero__device_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">AVFrame platf free_frame AVFrame frame</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nv12_zero_device.h</field>
    <field name="url">nv12__zero__device_8h_source.html#l00015</field>
    <field name="keywords"></field>
    <field name="text">nv12_zero_device avcodec_encode_device_t display resolution_fn_t std::function void display width height resolution_fn_t resolution_fn pixel_format_fn_t std::function void display pixelFormat init display pix_fmt_e pix_fmt resolution_fn_t resolution_fn pixel_format_fn_t pixel_format_fn convert img_t img set_frame AVFrame frame AVBufferRef hw_frames_ctx util::safe_ptr&lt;AVFrame, free_frame&gt; av_frame</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvapi_opensource_wrapper.cpp</field>
    <field name="url">nvapi__opensource__wrapper_8cpp.html</field>
    <field name="keywords">nvapi_opensource_wrapper.cpp</field>
    <field name="text">Definitions for the NVAPI wrapper</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_base.cpp</field>
    <field name="url">nvenc__base_8cpp.html</field>
    <field name="keywords">nvenc_base.cpp</field>
    <field name="text">Definitions for abstract platform-agnostic base of standalone NVENC encoder</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAKE_NVENC_VER</field>
    <field name="args">(major, minor)</field>
    <field name="url">nvenc__base_8cpp.html#a98d69495321c83f6e789545d27d32853</field>
    <field name="keywords"></field>
    <field name="text">major minor</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">nvenc_status_case</field>
    <field name="args">(x)</field>
    <field name="url">nvenc__base_8cpp.html#aa8be9f325684f7b72dfa3277104afa21</field>
    <field name="keywords"></field>
    <field name="text">x x</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_base.h</field>
    <field name="url">nvenc__base_8h.html</field>
    <field name="keywords">nvenc_base.h</field>
    <field name="text">Declarations for abstract platform-agnostic base of standalone NVENC encoder</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_base.h</field>
    <field name="url">nvenc__base_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvenc</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_base.h</field>
    <field name="url">nvenc__base_8h_source.html#l00026</field>
    <field name="keywords"></field>
    <field name="text">nvenc_base nvenc_base NV_ENC_DEVICE_TYPE device_type nvenc_base nvenc_base nvenc_base nvenc_base operator= nvenc_base create_encoder nvenc_config config video::config_t client_config nvenc_colorspace_t colorspace NV_ENC_BUFFER_FORMAT buffer_format destroy_encoder nvenc_encoded_frame encode_frame uint64_t frame_index force_idr invalidate_ref_frames uint64_t first_frame uint64_t last_frame</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_base.h</field>
    <field name="url">nvenc__base_8h_source.html#l00078</field>
    <field name="keywords"></field>
    <field name="text">init_library</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_base.h</field>
    <field name="url">nvenc__base_8h_source.html#l00086</field>
    <field name="keywords"></field>
    <field name="text">create_and_register_input_buffer</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_base.h</field>
    <field name="url">nvenc__base_8h_source.html#l00093</field>
    <field name="keywords"></field>
    <field name="text">synchronize_input_buffer</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_base.h</field>
    <field name="url">nvenc__base_8h_source.html#l00103</field>
    <field name="keywords"></field>
    <field name="text">wait_for_async_event uint32_t timeout_ms nvenc_failed NVENCSTATUS status uint32_t min_struct_version uint32_t version uint32_t v11_struct_version uint32_t v12_struct_version NV_ENC_DEVICE_TYPE device_type encoder uint32_t width uint32_t height NV_ENC_BUFFER_FORMAT buffer_format NV_ENC_BUFFER_FORMAT_UNDEFINED uint32_t ref_frames_in_dpb rfi encoder_params std::string last_nvenc_error_string</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_base.h</field>
    <field name="url">nvenc__base_8h_source.html#l00134</field>
    <field name="keywords"></field>
    <field name="text">device</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_base.h</field>
    <field name="url">nvenc__base_8h_source.html#l00136</field>
    <field name="keywords"></field>
    <field name="text">std::shared_ptr&lt;NV_ENCODE_API_FUNCTION_LIST&gt; nvenc</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_base.h</field>
    <field name="url">nvenc__base_8h_source.html#l00138</field>
    <field name="keywords"></field>
    <field name="text">NV_ENC_REGISTERED_PTR registered_input_buffer</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_base.h</field>
    <field name="url">nvenc__base_8h_source.html#l00140</field>
    <field name="keywords"></field>
    <field name="text">async_event_handle NV_ENC_OUTPUT_PTR output_bitstream uint32_t minimum_api_version uint64_t last_encoded_frame_index rfi_needs_confirmation std::pair&lt;uint64_t, uint64_t&gt; last_rfi_range logging::min_max_avg_periodic_logger&lt;double&gt; frame_size_logger debug encoder_state</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_colorspace.h</field>
    <field name="url">nvenc__colorspace_8h.html</field>
    <field name="keywords">nvenc_colorspace.h</field>
    <field name="text">Declarations for NVENC YUV colorspace</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_colorspace.h</field>
    <field name="url">nvenc__colorspace_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvenc</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_colorspace.h</field>
    <field name="url">nvenc__colorspace_8h_source.html#l00015</field>
    <field name="keywords"></field>
    <field name="text">nvenc_colorspace_t NV_ENC_VUI_COLOR_PRIMARIES primaries NV_ENC_VUI_TRANSFER_CHARACTERISTIC tranfer_function NV_ENC_VUI_MATRIX_COEFFS matrix full_range</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_config.h</field>
    <field name="url">nvenc__config_8h.html</field>
    <field name="keywords">nvenc_config.h</field>
    <field name="text">Declarations for NVENC encoder configuration</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_config.h</field>
    <field name="url">nvenc__config_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvenc</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_config.h</field>
    <field name="url">nvenc__config_8h_source.html#l00009</field>
    <field name="keywords"></field>
    <field name="text">nvenc_two_pass</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_config.h</field>
    <field name="url">nvenc__config_8h_source.html#l00010</field>
    <field name="keywords"></field>
    <field name="text">disabled</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_config.h</field>
    <field name="url">nvenc__config_8h_source.html#l00011</field>
    <field name="keywords"></field>
    <field name="text">quarter_resolution</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_config.h</field>
    <field name="url">nvenc__config_8h_source.html#l00012</field>
    <field name="keywords"></field>
    <field name="text">full_resolution</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_config.h</field>
    <field name="url">nvenc__config_8h_source.html#l00018</field>
    <field name="keywords"></field>
    <field name="text">nvenc_config quality_preset nvenc_two_pass two_pass nvenc_two_pass::quarter_resolution vbv_percentage_increase weighted_prediction adaptive_quantization enable_min_qp min_qp_h264 min_qp_hevc min_qp_av1 h264_cavlc insert_filler_data</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_d3d11.cpp</field>
    <field name="url">nvenc__d3d11_8cpp.html</field>
    <field name="keywords">nvenc_d3d11.cpp</field>
    <field name="text">Definitions for abstract Direct3D11 NVENC encoder</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_d3d11.h</field>
    <field name="url">nvenc__d3d11_8h.html</field>
    <field name="keywords">nvenc_d3d11.h</field>
    <field name="text">Declarations for abstract Direct3D11 NVENC encoder</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_d3d11.h</field>
    <field name="url">nvenc__d3d11_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvenc _COM_SMARTPTR_TYPEDEF ID3D11Device IID_ID3D11Device _COM_SMARTPTR_TYPEDEF ID3D11Texture2D IID_ID3D11Texture2D _COM_SMARTPTR_TYPEDEF IDXGIDevice IID_IDXGIDevice _COM_SMARTPTR_TYPEDEF IDXGIAdapter IID_IDXGIAdapter</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_d3d11.h</field>
    <field name="url">nvenc__d3d11_8h_source.html#l00026</field>
    <field name="keywords"></field>
    <field name="text">nvenc_d3d11 nvenc_base nvenc_d3d11 NV_ENC_DEVICE_TYPE device_type</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_d3d11.h</field>
    <field name="url">nvenc__d3d11_8h_source.html#l00035</field>
    <field name="keywords"></field>
    <field name="text">ID3D11Texture2D get_input_texture init_library wait_for_async_event uint32_t timeout_ms HMODULE dll NULL</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_d3d11_native.cpp</field>
    <field name="url">nvenc__d3d11__native_8cpp.html</field>
    <field name="keywords">nvenc_d3d11_native.cpp</field>
    <field name="text">Definitions for native Direct3D11 NVENC encoder</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_d3d11_native.h</field>
    <field name="url">nvenc__d3d11__native_8h.html</field>
    <field name="keywords">nvenc_d3d11_native.h</field>
    <field name="text">Declarations for native Direct3D11 NVENC encoder</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_d3d11_native.h</field>
    <field name="url">nvenc__d3d11__native_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvenc</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_d3d11_native.h</field>
    <field name="url">nvenc__d3d11__native_8h_source.html#l00019</field>
    <field name="keywords"></field>
    <field name="text">nvenc_d3d11_native final nvenc_d3d11 nvenc_d3d11_native ID3D11Device d3d_device nvenc_d3d11_native ID3D11Texture2D get_input_texture create_and_register_input_buffer ID3D11DevicePtr d3d_device ID3D11Texture2DPtr d3d_input_texture</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_d3d11_on_cuda.cpp</field>
    <field name="url">nvenc__d3d11__on__cuda_8cpp.html</field>
    <field name="keywords">nvenc_d3d11_on_cuda.cpp</field>
    <field name="text">Definitions for CUDA NVENC encoder with Direct3D11 input surfaces</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_d3d11_on_cuda.h</field>
    <field name="url">nvenc__d3d11__on__cuda_8h.html</field>
    <field name="keywords">nvenc_d3d11_on_cuda.h</field>
    <field name="text">Declarations for CUDA NVENC encoder with Direct3D11 input surfaces</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_d3d11_on_cuda.h</field>
    <field name="url">nvenc__d3d11__on__cuda_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvenc</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_d3d11_on_cuda.h</field>
    <field name="url">nvenc__d3d11__on__cuda_8h_source.html#l00019</field>
    <field name="keywords"></field>
    <field name="text">nvenc_d3d11_on_cuda final nvenc_d3d11 nvenc_d3d11_on_cuda ID3D11Device d3d_device nvenc_d3d11_on_cuda ID3D11Texture2D get_input_texture init_library create_and_register_input_buffer synchronize_input_buffer cuda_succeeded CUresult result cuda_failed CUresult result autopop_context autopop_context nvenc_d3d11_on_cuda parent CUcontext pushed_context parent parent pushed_context pushed_context bool pushed_context nvenc_d3d11_on_cuda parent CUcontext pushed_context autopop_context push_context HMODULE dll NULL ID3D11DevicePtr d3d_device ID3D11Texture2DPtr d3d_input_texture tcuInit cuInit tcuD3D11GetDevice cuD3D11GetDevice tcuCtxCreate_v2 cuCtxCreate tcuCtxDestroy_v2 cuCtxDestroy tcuCtxPushCurrent_v2 cuCtxPushCurrent tcuCtxPopCurrent_v2 cuCtxPopCurrent tcuMemAllocPitch_v2 cuMemAllocPitch tcuMemFree_v2 cuMemFree tcuGraphicsD3D11RegisterResource cuGraphicsD3D11RegisterResource tcuGraphicsUnregisterResource cuGraphicsUnregisterResource tcuGraphicsMapResources cuGraphicsMapResources tcuGraphicsUnmapResources cuGraphicsUnmapResources tcuGraphicsSubResourceGetMappedArray cuGraphicsSubResourceGetMappedArray tcuMemcpy2D_v2 cuMemcpy2D HMODULE dll cuda_functions CUresult last_cuda_error CUDA_SUCCESS CUcontext cuda_context CUgraphicsResource cuda_d3d_input_texture CUdeviceptr cuda_surface cuda_surface_pitch</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_encoded_frame.h</field>
    <field name="url">nvenc__encoded__frame_8h.html</field>
    <field name="keywords">nvenc_encoded_frame.h</field>
    <field name="text">Declarations for NVENC encoded frame</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_encoded_frame.h</field>
    <field name="url">nvenc__encoded__frame_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvenc</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_encoded_frame.h</field>
    <field name="url">nvenc__encoded__frame_8h_source.html#l00016</field>
    <field name="keywords"></field>
    <field name="text">nvenc_encoded_frame std::vector&lt;uint8_t&gt; data uint64_t frame_index idr after_ref_frame_invalidation</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_utils.cpp</field>
    <field name="url">nvenc__utils_8cpp.html</field>
    <field name="keywords">nvenc_utils.cpp</field>
    <field name="text">Definitions for NVENC utilities</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvenc_utils.h</field>
    <field name="url">nvenc__utils_8h.html</field>
    <field name="keywords">nvenc_utils.h</field>
    <field name="text">Declarations for NVENC utilities</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvenc_utils.h</field>
    <field name="url">nvenc__utils_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvenc DXGI_FORMAT dxgi_format_from_nvenc_format NV_ENC_BUFFER_FORMAT format NV_ENC_BUFFER_FORMAT nvenc_format_from_sunshine_format platf::pix_fmt_e format nvenc::nvenc_colorspace_t nvenc_colorspace_from_sunshine_colorspace video::sunshine_colorspace_t sunshine_colorspace</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvhttp.cpp</field>
    <field name="url">nvhttp_8cpp.html</field>
    <field name="keywords">nvhttp.cpp</field>
    <field name="text">Definitions for the nvhttp GameStream server</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h.html</field>
    <field name="keywords">nvhttp.h</field>
    <field name="text">Declarations for the nvhttp GameStream server</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvhttp</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00030</field>
    <field name="keywords"></field>
    <field name="text">VERSION</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00035</field>
    <field name="keywords"></field>
    <field name="text">GFE_VERSION</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00040</field>
    <field name="keywords"></field>
    <field name="text">PORT_HTTP</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00045</field>
    <field name="keywords"></field>
    <field name="text">PORT_HTTPS start setup std::string pkey std::string cert</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00062</field>
    <field name="keywords"></field>
    <field name="text">SunshineHTTPS SimpleWeb::HTTPS SunshineHTTPS boost::asio::io_context io_context boost::asio::ssl::context ctx SimpleWeb::HTTPS io_context ctx SimpleWeb::error_code ec shutdown ec</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00075</field>
    <field name="keywords"></field>
    <field name="text">PAIR_PHASE</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00076</field>
    <field name="keywords"></field>
    <field name="text">NONE</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00077</field>
    <field name="keywords"></field>
    <field name="text">GETSERVERCERT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00078</field>
    <field name="keywords"></field>
    <field name="text">CLIENTCHALLENGE</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00079</field>
    <field name="keywords"></field>
    <field name="text">SERVERCHALLENGERESP</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00080</field>
    <field name="keywords"></field>
    <field name="text">CLIENTPAIRINGSECRET</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00083</field>
    <field name="keywords"></field>
    <field name="text">pair_session_t std::string uniqueID std::string cert std::string name client std::unique_ptr&lt;crypto::aes_t&gt; cipher_key std::vector&lt;uint8_t&gt; clienthash std::string serversecret std::string serverchallenge util::Either std::shared_ptr&lt;typename SimpleWeb::ServerBase&lt;SimpleWeb::HTTP&gt;::Response std::shared_ptr&lt;typename SimpleWeb::ServerBase&lt;SunshineHTTPS&gt;::Response response std::string salt async_insert_pin</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00107</field>
    <field name="keywords"></field>
    <field name="text">PAIR_PHASE last_phase PAIR_PHASE::NONE remove_session pair_session_t sess</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00126</field>
    <field name="keywords"></field>
    <field name="text">getservercert pair_session_t sess boost::property_tree::ptree tree std::string pin</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00140</field>
    <field name="keywords"></field>
    <field name="text">clientchallenge pair_session_t sess boost::property_tree::ptree tree std::string challenge</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00149</field>
    <field name="keywords"></field>
    <field name="text">serverchallengeresp pair_session_t sess boost::property_tree::ptree tree std::string encrypted_response</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvhttp.h</field>
    <field name="url">nvhttp_8h_source.html#l00165</field>
    <field name="keywords"></field>
    <field name="text">clientpairingsecret pair_session_t sess std::shared_ptr safe::queue_t&lt;crypto::x509_t&gt; add_cert boost::property_tree::ptree tree std::string client_pairing_secret pin std::string pin std::string name unpair_client std::string_view uuid nlohmann::json get_all_clients erase_all_clients</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvprefs_common.cpp</field>
    <field name="url">nvprefs__common_8cpp.html</field>
    <field name="keywords">nvprefs_common.cpp</field>
    <field name="text">Definitions for common nvidia preferences</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvprefs_common.h</field>
    <field name="url">nvprefs__common_8h.html</field>
    <field name="keywords">nvprefs_common.h</field>
    <field name="text">Declarations for common nvidia preferences</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvprefs_common.h</field>
    <field name="url">nvprefs__common_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvprefs</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvprefs_common.h</field>
    <field name="url">nvprefs__common_8h_source.html#l00019</field>
    <field name="keywords"></field>
    <field name="text">safe_handle util::safe_ptr_v2 util::safe_ptr_v2 void BOOL CloseHandle bool handle get handle NULL handle INVALID_HANDLE_VALUE</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvprefs_common.h</field>
    <field name="url">nvprefs__common_8h_source.html#l00028</field>
    <field name="keywords"></field>
    <field name="text">safe_hlocal_deleter operator() p LocalFree p safe_hlocal util::uniq_ptr&lt;std::remove_pointer_t&lt;T&gt; safe_hlocal_deleter safe_sid util::safe_ptr_v2&lt;void, PVOID, FreeSid&gt; info_message std::wstring message info_message std::string message error_message std::wstring message error_message std::string message</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvprefs_common.h</field>
    <field name="url">nvprefs__common_8h_source.html#l00047</field>
    <field name="keywords"></field>
    <field name="text">nvprefs_options opengl_vulkan_on_dxgi sunshine_high_power_mode nvprefs_options get_nvprefs_options</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvprefs_interface.cpp</field>
    <field name="url">nvprefs__interface_8cpp.html</field>
    <field name="keywords">nvprefs_interface.cpp</field>
    <field name="text">Definitions for nvidia preferences interface</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">nvprefs_interface.h</field>
    <field name="url">nvprefs__interface_8h.html</field>
    <field name="keywords">nvprefs_interface.h</field>
    <field name="text">Declarations for nvidia preferences interface</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvprefs_interface.h</field>
    <field name="url">nvprefs__interface_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvprefs</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">nvprefs_interface.h</field>
    <field name="url">nvprefs__interface_8h_source.html#l00012</field>
    <field name="keywords"></field>
    <field name="text">nvprefs_interface nvprefs_interface load unload restore_from_and_delete_undo_file_if_exists modify_application_profile modify_global_profile owning_undo_file restore_global_profile impl std::unique_ptr&lt;impl&gt; pimpl</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">audio.cpp</field>
    <field name="url">platform_2linux_2audio_8cpp.html</field>
    <field name="keywords">audio.cpp</field>
    <field name="text">Definitions for audio control on Linux</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">platf::position_mapping</field>
    <field name="args">[]</field>
    <field name="url">platform_2linux_2audio_8cpp.html#a3707698c2dbe67aba632ece0b3e44e21</field>
    <field name="keywords"></field>
    <field name="text">PA_CHANNEL_POSITION_FRONT_LEFT PA_CHANNEL_POSITION_FRONT_RIGHT PA_CHANNEL_POSITION_FRONT_CENTER PA_CHANNEL_POSITION_LFE PA_CHANNEL_POSITION_REAR_LEFT PA_CHANNEL_POSITION_REAR_RIGHT PA_CHANNEL_POSITION_SIDE_LEFT PA_CHANNEL_POSITION_SIDE_RIGHT</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">input.cpp</field>
    <field name="url">platform_2macos_2input_8cpp.html</field>
    <field name="keywords">input.cpp</field>
    <field name="text">Definitions for macOS input handling x y get_mouse_loc input</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">MULTICLICK_DELAY_MS</field>
    <field name="args">(500)</field>
    <field name="url">platform_2macos_2input_8cpp.html#a3f90c914c906dee5d896d4c3eb2a0b86</field>
    <field name="keywords">MULTICLICK_DELAY_MS</field>
    <field name="text">Delay for a double click in milliseconds Make this configurable</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">audio.cpp</field>
    <field name="url">platform_2windows_2audio_8cpp.html</field>
    <field name="keywords">audio.cpp</field>
    <field name="text">Definitions for Windows audio capture</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">platf::audio::formats</field>
    <field name="url">platform_2windows_2audio_8cpp.html#a5d109bae862ff6533fc9a19a8f4cf98e</field>
    <field name="keywords"></field>
    <field name="text">format_t waveformat_mask_stereo create_virtual_sink_waveformats&lt;2&gt; format_t waveformat_mask_surround51_with_backspeakers create_virtual_sink_waveformats&lt;6&gt; format_t waveformat_mask_surround71 create_virtual_sink_waveformats&lt;8&gt;</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">input.cpp</field>
    <field name="url">platform_2windows_2input_8cpp.html</field>
    <field name="keywords">input.cpp</field>
    <field name="text">Definitions for input handling on Windows x y get_mouse_loc input</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">platf::ds4_report_init_ex</field>
    <field name="url">platform_2windows_2input_8cpp.html#a2c596646fe9456b7ca10dafe1d240152</field>
    <field name="keywords"></field>
    <field name="text">bThumbLX bThumbLY bThumbRX bThumbRY wButtons DS4_BUTTON_DPAD_NONE bSpecial bTriggerL bTriggerR wTimestamp bBatteryLvl wGyroX wGyroY wGyroZ wAccelX wAccelY wAccelZ _bUnknown1 bBatteryLvlSpecial _bUnknown2 bTouchPacketsN sCurrentTouch ds4_touch_unused sPreviousTouch ds4_touch_unused ds4_touch_unused</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::inject_synthetic_pointer_input</field>
    <field name="args">(input_raw_t *input, HSYNTHETICPOINTERDEVICE device, const POINTER_TYPE_INFO *pointerInfo, UINT32 count)</field>
    <field name="url">platform_2windows_2input_8cpp.html#a3d62d75127bc7f5b522f6001ead70747</field>
    <field name="keywords">inject_synthetic_pointer_input platf::inject_synthetic_pointer_input platf</field>
    <field name="text">Calls InjectSyntheticPointerInput() and switches input desktops if required Must only be called if InjectSyntheticPointerInput() is available input The global input context device The synthetic pointer device handle pointerInfo An array of POINTER_TYPE_INFO structs count The number of elements in pointerInfo true if input was successfully injected</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">platf::target_touch_port</field>
    <field name="url">platform_2windows_2input_8cpp.html#a3f04f4e48e725aa50c4cfd19e0d9f659</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::perform_touch_compaction</field>
    <field name="args">(client_input_raw_t *raw)</field>
    <field name="url">platform_2windows_2input_8cpp.html#a506f75050e50bb94f4b69b9d0914526a</field>
    <field name="keywords">perform_touch_compaction platf::perform_touch_compaction platf</field>
    <field name="text">Compacts the touch slots into a contiguous block and updates the active count Since this swaps entries around all slot pointers/references are invalid after compaction raw The client-specific input context</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MPS2_TO_DS4_ACCEL</field>
    <field name="args">(x)</field>
    <field name="url">platform_2windows_2input_8cpp.html#a6794b097c396d10374179b45bc39ab2d</field>
    <field name="keywords"></field>
    <field name="text">int32_t x EARTH_G</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::cancel_all_active_touches</field>
    <field name="args">(client_input_raw_t *raw)</field>
    <field name="url">platform_2windows_2input_8cpp.html#a967af9b490ec3a6713604aff8d7a17cd</field>
    <field name="keywords">cancel_all_active_touches platf::cancel_all_active_touches platf</field>
    <field name="text">Cancels all active touches raw The raw client-specific input context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::populate_common_pointer_info</field>
    <field name="args">(POINTER_INFO &amp;pointerInfo, const touch_port_t &amp;touchPort, uint8_t eventType, float x, float y)</field>
    <field name="url">platform_2windows_2input_8cpp.html#a9c143da1be3853021ea452a76385a487</field>
    <field name="keywords">populate_common_pointer_info platf::populate_common_pointer_info platf</field>
    <field name="text">Populate common POINTER_INFO members shared between pen and touch events pointerInfo The pointer info to populate touchPort The current viewport for translating to screen coordinates eventType The type of touch/pen event x The normalized 0.0 X coordinate y The normalized 0.0 Y coordinate</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::pointer_by_id</field>
    <field name="args">(client_input_raw_t *raw, uint32_t pointerId, uint8_t eventType)</field>
    <field name="url">platform_2windows_2input_8cpp.html#aa5ca1d9180a074291feee1498dc714f5</field>
    <field name="keywords">pointer_by_id platf::pointer_by_id platf</field>
    <field name="text">Gets a pointer slot by client-relative pointer ID claiming a new one if necessary raw The raw client-specific input context pointerId The client s pointer ID eventType The LI_TOUCH_EVENT value from the client A pointer to the slot entry</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DPS_TO_DS4_GYRO</field>
    <field name="args">(x)</field>
    <field name="url">platform_2windows_2input_8cpp.html#abaa5d124ab4608b66bb4dcc2d88613dc</field>
    <field name="keywords"></field>
    <field name="text">int32_t x</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">platf::ds4_touch_unused</field>
    <field name="url">platform_2windows_2input_8cpp.html#ac12da29224a01ee366287a424590bfe5</field>
    <field name="keywords"></field>
    <field name="text">bPacketCounter bIsUpTrackingNum1 bTouchData1 bIsUpTrackingNum2 bTouchData2</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::repeat_touch</field>
    <field name="args">(client_input_raw_t *raw)</field>
    <field name="url">platform_2windows_2input_8cpp.html#ac5a1fa06e2306d7ea28b180aebfe6bb1</field>
    <field name="keywords">repeat_touch platf::repeat_touch platf</field>
    <field name="text">Repeats the current touch state to avoid the interactions timing out raw The raw client-specific input context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::send_input</field>
    <field name="args">(INPUT &amp;i)</field>
    <field name="url">platform_2windows_2input_8cpp.html#af23a78d0fef12cb0735854656e1be737</field>
    <field name="keywords">send_input platf::send_input platf</field>
    <field name="text">Calls SendInput() and switches input desktops if required i The INPUT struct to send</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">APPLY_CALIBRATION</field>
    <field name="args">(val, bias, scale)</field>
    <field name="url">platform_2windows_2input_8cpp.html#af2a94b9b8e6a740a678b3a252a7ff0d1</field>
    <field name="keywords"></field>
    <field name="text">int32_t val bias scale</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::repeat_pen</field>
    <field name="args">(client_input_raw_t *raw)</field>
    <field name="url">platform_2windows_2input_8cpp.html#af38a7aa100f5c9d014ac4cd4964df96f</field>
    <field name="keywords">repeat_pen platf::repeat_pen platf</field>
    <field name="text">Repeats the current pen state to avoid the interactions timing out raw The raw client-specific input context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::ds4_update_ts_and_send</field>
    <field name="args">(vigem_t *vigem, int nr)</field>
    <field name="url">platform_2windows_2input_8cpp.html#afbdd8ac9f0c7aafa5e8e731984bcd9bb</field>
    <field name="keywords">ds4_update_ts_and_send platf::ds4_update_ts_and_send platf</field>
    <field name="text">Sends DS4 input with updated timestamps and repeats to keep timestamp updated Some applications require updated timestamps values to register DS4 input vigem The global ViGEm context object nr The global gamepad index</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">process.cpp</field>
    <field name="url">process_8cpp.html</field>
    <field name="keywords">process.cpp</field>
    <field name="text">Definitions for the startup and shutdown of the apps started by a streaming Session</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">proc::terminate_process_group</field>
    <field name="args">(boost::process::v1::child &amp;proc, boost::process::v1::group &amp;group, std::chrono::seconds exit_timeout)</field>
    <field name="url">process_8cpp.html#a4781dfdbbf67ae6152c8fd51284a320d</field>
    <field name="keywords">terminate_process_group proc::terminate_process_group proc</field>
    <field name="text">Terminates all child processes in a process group proc The child process itself group The group of all children in the process tree exit_timeout The timeout to wait for the process group to gracefully exit Terminates all child processes in a process group proc The child process itself group The group of all children in the process tree exit_timeout The timeout to wait for the process group to gracefully exit</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">proc::init</field>
    <field name="args">()</field>
    <field name="url">process_8cpp.html#a6af2e4ae5f5b8e92c9fca3649e2ad297</field>
    <field name="keywords">init proc::init proc</field>
    <field name="text">Initialize proc functions Unique pointer to deinit_t to manage cleanup Initialize proc functions Unique pointer to deinit_t to manage cleanup</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">proc::calculate_app_id</field>
    <field name="args">(const std::string &amp;app_name, std::string app_image_path, int index)</field>
    <field name="url">process_8cpp.html#a82dbe882ee92ae36926d9042bb167e75</field>
    <field name="keywords">calculate_app_id proc::calculate_app_id proc</field>
    <field name="text">Calculate a stable id based on name and image data Tuple of id calculated without index for use if no collision and one with Calculate a stable id based on name and image data Tuple of id calculated without index for use if no collision and one with</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">process.h</field>
    <field name="url">process_8h.html</field>
    <field name="keywords">process.h</field>
    <field name="text">Declarations for the startup and shutdown of the apps started by a streaming Session</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">process.h</field>
    <field name="url">process_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">proc file_t util::safe_ptr_v2&lt;FILE, int, fclose&gt; config::prep_cmd_t cmd_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">process.h</field>
    <field name="url">process_8h_source.html#l00041</field>
    <field name="keywords"></field>
    <field name="text">ctx_t std::vector&lt;cmd_t&gt; prep_cmds</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">process.h</field>
    <field name="url">process_8h_source.html#l00056</field>
    <field name="keywords"></field>
    <field name="text">std::vector&lt;std::string&gt; detached std::string name std::string cmd std::string working_dir std::string output std::string image_path std::string id elevated auto_detach wait_all std::chrono::seconds exit_timeout</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">process.h</field>
    <field name="url">process_8h_source.html#l00070</field>
    <field name="keywords"></field>
    <field name="text">proc_t KITTY_DEFAULT_CONSTR_MOVE_THROW proc_t proc_t boost::process::v1::environment env std::vector&lt;ctx_t&gt; apps _app_id _env std::move env _apps std::move apps execute app_id std::shared_ptr&lt;rtsp_stream::launch_session_t&gt; launch_session running std::vector&lt;ctx_t&gt; get_apps std::vector&lt;ctx_t&gt; get_apps std::string get_app_image app_id std::string get_last_run_app_name terminate _app_id boost::process::v1::environment _env std::vector&lt;ctx_t&gt; _apps ctx_t _app std::chrono::steady_clock::time_point _app_launch_time placebo boost::process::v1::child _process boost::process::v1::group _process_group file_t _pipe std::vector&lt;cmd_t&gt;::const_iterator _app_prep_it std::vector&lt;cmd_t&gt;::const_iterator _app_prep_begin std::tuple&lt;std::string, std::string&gt; calculate_app_id std::string app_name std::string app_image_path index std::string validate_app_image_path std::string app_image_path refresh std::string file_name std::optional&lt;proc::proc_t&gt; parse std::string file_name std::unique_ptr&lt;platf::deinit_t&gt; init terminate_process_group boost::process::v1::child proc boost::process::v1::group group std::chrono::seconds exit_timeout proc_t proc</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">round_robin.h</field>
    <field name="url">round__robin_8h.html</field>
    <field name="keywords">round_robin.h</field>
    <field name="text">Declarations for a round-robin iterator</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">round_robin.h</field>
    <field name="url">round__robin_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">round_robin.h</field>
    <field name="url">round__robin_8h_source.html#l00015</field>
    <field name="keywords"></field>
    <field name="text">round_robin_util</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">round_robin.h</field>
    <field name="url">round__robin_8h_source.html#l00017</field>
    <field name="keywords"></field>
    <field name="text">it_wrap_t iterator_category std::random_access_iterator_tag value_type V difference_type V pointer V const_pointer V reference V const_reference V T iterator std::ptrdiff_t diff_t iterator operator+= diff_t step step _this _this iterator operator-= diff_t step step _this _this iterator operator+ diff_t step iterator new_ _this new_ step iterator operator- diff_t step iterator new_ _this new_ step diff_t operator- iterator first diff_t step first _this step first step iterator operator++ _this inc _this iterator operator-- _this dec _this iterator operator++ iterator new_ _this _this new_ iterator operator-- iterator new_ _this _this new_ reference operator* _this get const_reference operator* _this get pointer operator-&gt; _this const_pointer operator-&gt; _this operator!= iterator other _this other operator&lt; iterator other _this other operator&gt;= iterator other _this other _this other operator&lt;= iterator other _this other _this other operator== iterator other _this eq other operator&gt; iterator other _this gt other iterator _this iterator iterator _this iterator</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">round_robin.h</field>
    <field name="url">round__robin_8h_source.html#l00145</field>
    <field name="keywords"></field>
    <field name="text">round_robin_t it_wrap_t iterator It pointer V round_robin_t iterator begin iterator end _begin begin _end end _pos begin inc _pos _pos _end _pos _begin dec _pos _begin _pos _end _pos eq round_robin_t other _pos other _pos pointer get _pos It _begin It _end It _pos round_robin_t&lt;V, It&gt; make_round_robin It begin It end round_robin_t&lt;V, It&gt; begin end</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">rswrapper.c</field>
    <field name="url">rswrapper_8c.html</field>
    <field name="keywords">rswrapper.c</field>
    <field name="text">Wrappers for nanors vectorization with different ISA options</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DECORATE_FUNC</field>
    <field name="args">(a, b)</field>
    <field name="url">rswrapper_8c.html#a0aa41a17e4a22d611836794f031f59f6</field>
    <field name="keywords"></field>
    <field name="text">DECORATE_FUNC_I a b</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">reed_solomon_init</field>
    <field name="args">(void)</field>
    <field name="url">rswrapper_8c.html#a349a52fa4bbaa694e75198cd1a394fb6</field>
    <field name="keywords">reed_solomon_init</field>
    <field name="text">This initializes the RS function pointers to the best vectorized version available DECORATE_FUNC reed_solomon_init ISA_SUFFIX The streaming code will directly invoke these function pointers during encoding</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">DECORATE_FUNC_I</field>
    <field name="args">(a, b)</field>
    <field name="url">rswrapper_8c.html#a51483bc1f79e5b8728919b033a58d14a</field>
    <field name="keywords"></field>
    <field name="text">a b</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">rswrapper.h</field>
    <field name="url">rswrapper_8h.html</field>
    <field name="keywords">rswrapper.h</field>
    <field name="text">Wrappers for nanors vectorization This is a drop-in replacement for nanors rs.h</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">reed_solomon_init</field>
    <field name="args">(void)</field>
    <field name="url">rswrapper_8h.html#a349a52fa4bbaa694e75198cd1a394fb6</field>
    <field name="keywords">reed_solomon_init</field>
    <field name="text">This initializes the RS function pointers to the best vectorized version available The streaming code will directly invoke these function pointers during encoding</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">rswrapper.h</field>
    <field name="url">rswrapper_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">_reed_solomon reed_solomon reed_solomon data_shards parity_shards void reed_solomon_release_t reed_solomon rs int reed_solomon_encode_t reed_solomon rs uint8_t shards nr_shards bs int reed_solomon_decode_t reed_solomon rs uint8_t shards uint8_t marks nr_shards bs reed_solomon_new_t reed_solomon_new_fn reed_solomon_release_t reed_solomon_release_fn reed_solomon_encode_t reed_solomon_encode_fn reed_solomon_decode_t reed_solomon_decode_fn</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">rswrapper.h</field>
    <field name="url">rswrapper_8h_source.html#l00032</field>
    <field name="keywords"></field>
    <field name="text">reed_solomon_init</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">rtsp.cpp</field>
    <field name="url">rtsp_8cpp.html</field>
    <field name="keywords">rtsp.cpp</field>
    <field name="text">Definitions for RTSP streaming</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::terminate_sessions</field>
    <field name="args">()</field>
    <field name="url">rtsp_8cpp.html#a10870a2e7029f864eb050932b6e03b3e</field>
    <field name="keywords">terminate_sessions rtsp_stream::terminate_sessions rtsp_stream</field>
    <field name="text">Terminates all running streaming sessions Terminates all running streaming sessions</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::launch_session_clear</field>
    <field name="args">(uint32_t launch_session_id)</field>
    <field name="url">rtsp_8cpp.html#a58910a8858632361972daa6afb96d84a</field>
    <field name="keywords">launch_session_clear rtsp_stream::launch_session_clear rtsp_stream</field>
    <field name="text">Clear state for the specified launch session launch_session_id The ID of the session to clear Clear state for the specified launch session launch_session_id The ID of the session to clear</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::cmd_describe</field>
    <field name="args">(rtsp_server_t *server, tcp::socket &amp;sock, launch_session_t &amp;session, msg_t &amp;&amp;req)</field>
    <field name="url">rtsp_8cpp.html#aa85a5dcfac52a0d9dd08aff2fc0f46e6</field>
    <field name="keywords">cmd_describe rtsp_stream::cmd_describe rtsp_stream</field>
    <field name="text">GFE advertises incorrect mapping for normal quality configurations as a result Moonlight rotates all channels from index 3 to the right To work around this rotate channels to the left from index 3</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">rtsp_stream::session_count</field>
    <field name="args">()</field>
    <field name="url">rtsp_8cpp.html#ac328e4d3b111e0fd4219b13737d99d6d</field>
    <field name="keywords">session_count rtsp_stream::session_count rtsp_stream</field>
    <field name="text">Get the number of active sessions Count of active sessions Get the number of active sessions Count of active sessions</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">rtsp.h</field>
    <field name="url">rtsp_8h.html</field>
    <field name="keywords">rtsp.h</field>
    <field name="text">Declarations for RTSP streaming</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">rtsp.h</field>
    <field name="url">rtsp_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">rtsp_stream RTSP_SETUP_PORT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">rtsp.h</field>
    <field name="url">rtsp_8h_source.html#l00017</field>
    <field name="keywords"></field>
    <field name="text">launch_session_t uint32_t id crypto::aes_t gcm_key crypto::aes_t iv std::string av_ping_payload uint32_t control_connect_data host_audio std::string unique_id width height fps gcmap appid surround_info std::string surround_params enable_hdr enable_sops std::optional&lt;crypto::cipher::gcm_t&gt; rtsp_cipher std::string rtsp_url_scheme uint32_t rtsp_iv_counter launch_session_raise std::shared_ptr&lt;launch_session_t&gt; launch_session launch_session_clear uint32_t launch_session_id session_count terminate_sessions rtpThread</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">stat_trackers.cpp</field>
    <field name="url">stat__trackers_8cpp.html</field>
    <field name="keywords">stat_trackers.cpp</field>
    <field name="text">Definitions for streaming statistic tracking</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">stat_trackers.h</field>
    <field name="url">stat__trackers_8h.html</field>
    <field name="keywords">stat_trackers.h</field>
    <field name="text">Declarations for streaming statistic tracking</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">stat_trackers.h</field>
    <field name="url">stat__trackers_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">stat_trackers boost::format one_digit_after_decimal boost::format two_digits_after_decimal</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">stat_trackers.h</field>
    <field name="url">stat__trackers_8h_source.html#l00022</field>
    <field name="keywords"></field>
    <field name="text">min_max_avg_tracker callback_function std::function void T stat_min T stat_max stat_avg collect_and_callback_on_interval T stat callback_function callback std::chrono::seconds interval_in_seconds data calls data last_callback_time std::chrono::steady_clock::now std::chrono::steady_clock::now data last_callback_time interval_in_seconds callback data stat_min data stat_max data stat_total data calls data data stat_min std::min data stat_min stat data stat_max std::max data stat_max stat data stat_total stat data calls reset data std::chrono::steady_clock::time_point last_callback_time std::chrono::steady_clock::now T stat_min std::numeric_limits&lt;T&gt;::max T stat_max std::numeric_limits&lt;T&gt;::min stat_total uint32_t calls data</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">stream.cpp</field>
    <field name="url">stream_8cpp.html</field>
    <field name="keywords">stream.cpp</field>
    <field name="text">Definitions for the streaming protocols</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">stream::socket_e</field>
    <field name="url">stream_8cpp.html#a1427e256cc01c127e100b0a903cacc5f</field>
    <field name="keywords">socket_e stream::socket_e stream</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">stream::socket_e::video</field>
    <field name="url">stream_8cpp.html#a1427e256cc01c127e100b0a903cacc5fa421b47ffd946ca083b65cd668c6b17e6</field>
    <field name="keywords">video stream::socket_e::video video stream::socket_e::video</field>
    <field name="text">Video</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">stream::socket_e::audio</field>
    <field name="url">stream_8cpp.html#a1427e256cc01c127e100b0a903cacc5faa5ca0b5894324f8bb54bb9fffad29d1e</field>
    <field name="keywords">audio stream::socket_e::audio audio stream::socket_e::audio</field>
    <field name="text">Audio</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">stream::fec::rs_t</field>
    <field name="url">stream_8cpp.html#a87b78e5ddb1029ce32188aaee59b0136</field>
    <field name="keywords"></field>
    <field name="text">util::safe_ptr reed_solomon reed_solomon rs reed_solomon_release_fn rs</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">stream::concat_and_insert</field>
    <field name="args">(uint64_t insert_size, uint64_t slice_size, const std::string_view &amp;data1, const std::string_view &amp;data2)</field>
    <field name="url">stream_8cpp.html#acf11da53448f14003493dcab0c7b1740</field>
    <field name="keywords">concat_and_insert stream::concat_and_insert stream</field>
    <field name="text">Combines two buffers and inserts new buffers at each slice boundary of the result insert_size The number of bytes to insert slice_size The number of bytes between insertions data1 The first data buffer data2 The second data buffer</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">stream::send_feedback_msg</field>
    <field name="args">(session_t *session, platf::gamepad_feedback_msg_t &amp;msg)</field>
    <field name="url">stream_8cpp.html#af70f1a7a070fb184162c5e076afa35f8</field>
    <field name="keywords">send_feedback_msg stream::send_feedback_msg stream</field>
    <field name="text">Pass gamepad feedback data back to the client session The session object msg The message to pass 0 on success</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">stream.h</field>
    <field name="url">stream_8h.html</field>
    <field name="keywords">stream.h</field>
    <field name="text">Declarations for the streaming protocols</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">stream::session::state_e</field>
    <field name="url">stream_8h.html#ac3803ee60e6f07138932b4254a9188de</field>
    <field name="keywords">state_e stream::session::state_e stream::session</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">stream::session::state_e::STARTING</field>
    <field name="url">stream_8h.html#ac3803ee60e6f07138932b4254a9188dea034312d8adc8099c1c6f53aaff745e26</field>
    <field name="keywords">STARTING stream::session::state_e::STARTING STARTING stream::session::state_e::STARTING</field>
    <field name="text">The session is starting</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">stream::session::state_e::STOPPED</field>
    <field name="url">stream_8h.html#ac3803ee60e6f07138932b4254a9188dea09d4d696b4e935115b9313e3c412509a</field>
    <field name="keywords">STOPPED stream::session::state_e::STOPPED STOPPED stream::session::state_e::STOPPED</field>
    <field name="text">The session is stopped</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">stream::session::state_e::RUNNING</field>
    <field name="url">stream_8h.html#ac3803ee60e6f07138932b4254a9188dea43491564ebcfd38568918efbd6e840fd</field>
    <field name="keywords">RUNNING stream::session::state_e::RUNNING RUNNING stream::session::state_e::RUNNING</field>
    <field name="text">The session is running</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">stream::session::state_e::STOPPING</field>
    <field name="url">stream_8h.html#ac3803ee60e6f07138932b4254a9188deaf6cdb3c6710b50ec65ee07f740847e10</field>
    <field name="keywords">STOPPING stream::session::state_e::STOPPING STOPPING stream::session::state_e::STOPPING</field>
    <field name="text">The session is stopping</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">stream.h</field>
    <field name="url">stream_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">stream VIDEO_STREAM_PORT CONTROL_PORT AUDIO_STREAM_PORT stream::session_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">stream.h</field>
    <field name="url">stream_8h_source.html#l00025</field>
    <field name="keywords"></field>
    <field name="text">config_t audio::config_t audio video::config_t monitor packetsize minRequiredFecPackets mlFeatureFlags controlProtocolType audioQosType videoQosType uint32_t encryptionFlagsEnabled std::optional&lt;int&gt; gcmap session</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">stream.h</field>
    <field name="url">stream_8h_source.html#l00042</field>
    <field name="keywords"></field>
    <field name="text">state_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">stream.h</field>
    <field name="url">stream_8h_source.html#l00043</field>
    <field name="keywords"></field>
    <field name="text">STOPPED</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">stream.h</field>
    <field name="url">stream_8h_source.html#l00044</field>
    <field name="keywords"></field>
    <field name="text">STOPPING</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">stream.h</field>
    <field name="url">stream_8h_source.html#l00045</field>
    <field name="keywords"></field>
    <field name="text">STARTING</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">stream.h</field>
    <field name="url">stream_8h_source.html#l00046</field>
    <field name="keywords"></field>
    <field name="text">RUNNING std::shared_ptr&lt;session_t&gt; alloc config_t config rtsp_stream::launch_session_t launch_session start session_t session std::string addr_string stop session_t session join session_t session state_e state session_t session</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">CaptureSession</field>
    <field name="url">structCaptureSession.html</field>
    <field name="keywords">CaptureSession</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">_DNS_SERVICE_CANCEL</field>
    <field name="url">struct__DNS__SERVICE__CANCEL.html</field>
    <field name="keywords">_DNS_SERVICE_CANCEL</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">_DNS_SERVICE_INSTANCE</field>
    <field name="url">struct__DNS__SERVICE__INSTANCE.html</field>
    <field name="keywords">_DNS_SERVICE_INSTANCE</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">_DNS_SERVICE_REGISTER_REQUEST</field>
    <field name="url">struct__DNS__SERVICE__REGISTER__REQUEST.html</field>
    <field name="keywords">_DNS_SERVICE_REGISTER_REQUEST</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">argument_type</field>
    <field name="url">structargument__type.html</field>
    <field name="keywords">argument_type argument_type&lt; void(UPNPUrls)&gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">argument_type&lt; T(U)&gt;</field>
    <field name="url">structargument__type_3_01T_07U_08_4.html</field>
    <field name="keywords">argument_type&lt; T(U)&gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">audio::audio_ctx_t</field>
    <field name="url">structaudio_1_1audio__ctx__t.html</field>
    <field name="keywords">audio_ctx_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">audio::config_t</field>
    <field name="url">structaudio_1_1config__t.html</field>
    <field name="keywords">config_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">audio::config_t::flags_e</field>
    <field name="url">structaudio_1_1config__t.html#a042a4ceabf73b3fb1f20937aa934fc4e</field>
    <field name="keywords">flags_e audio::config_t::flags_e audio::config_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">audio::config_t::HIGH_QUALITY</field>
    <field name="url">structaudio_1_1config__t.html#a042a4ceabf73b3fb1f20937aa934fc4ea074914c54c0e81c85766e256b9569146</field>
    <field name="keywords">HIGH_QUALITY audio::config_t::HIGH_QUALITY audio::config_t HIGH_QUALITY audio::config_t::HIGH_QUALITY audio::config_t</field>
    <field name="text">High quality audio</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">audio::config_t::MAX_FLAGS</field>
    <field name="url">structaudio_1_1config__t.html#a042a4ceabf73b3fb1f20937aa934fc4ea0ff783d83b02fef4d443a318bfaee87e</field>
    <field name="keywords">MAX_FLAGS audio::config_t::MAX_FLAGS audio::config_t MAX_FLAGS audio::config_t::MAX_FLAGS audio::config_t</field>
    <field name="text">Maximum number of flags</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">audio::config_t::CUSTOM_SURROUND_PARAMS</field>
    <field name="url">structaudio_1_1config__t.html#a042a4ceabf73b3fb1f20937aa934fc4ea6604b50063a86f05beee3a94612d85df</field>
    <field name="keywords">CUSTOM_SURROUND_PARAMS audio::config_t::CUSTOM_SURROUND_PARAMS audio::config_t CUSTOM_SURROUND_PARAMS audio::config_t::CUSTOM_SURROUND_PARAMS audio::config_t</field>
    <field name="text">Custom surround parameters</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">audio::config_t::HOST_AUDIO</field>
    <field name="url">structaudio_1_1config__t.html#a042a4ceabf73b3fb1f20937aa934fc4eab06a898479ab3ee47891e67aca79605c</field>
    <field name="keywords">HOST_AUDIO audio::config_t::HOST_AUDIO audio::config_t HOST_AUDIO audio::config_t::HOST_AUDIO audio::config_t</field>
    <field name="text">Host audio</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">audio::opus_stream_config_t</field>
    <field name="url">structaudio_1_1opus__stream__config__t.html</field>
    <field name="keywords">opus_stream_config_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">audio::stream_params_t</field>
    <field name="url">structaudio_1_1stream__params__t.html</field>
    <field name="keywords">stream_params_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">cbs::h264_t</field>
    <field name="url">structcbs_1_1h264__t.html</field>
    <field name="keywords">h264_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">cbs::hevc_t</field>
    <field name="url">structcbs_1_1hevc__t.html</field>
    <field name="keywords">hevc_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">cbs::nal_t</field>
    <field name="url">structcbs_1_1nal__t.html</field>
    <field name="keywords">nal_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::audio_t</field>
    <field name="url">structconfig_1_1audio__t.html</field>
    <field name="keywords">audio_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::input_t</field>
    <field name="url">structconfig_1_1input__t.html</field>
    <field name="keywords">input_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::nvhttp_t</field>
    <field name="url">structconfig_1_1nvhttp__t.html</field>
    <field name="keywords">nvhttp_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::prep_cmd_t</field>
    <field name="url">structconfig_1_1prep__cmd__t.html</field>
    <field name="keywords">prep_cmd_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::stream_t</field>
    <field name="url">structconfig_1_1stream__t.html</field>
    <field name="keywords">stream_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::sunshine_t</field>
    <field name="url">structconfig_1_1sunshine__t.html</field>
    <field name="keywords">sunshine_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::sunshine_t::cmd_t</field>
    <field name="url">structconfig_1_1sunshine__t_1_1cmd__t.html</field>
    <field name="keywords">cmd_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::video_t</field>
    <field name="url">structconfig_1_1video__t.html</field>
    <field name="keywords">video_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::video_t::dd_t</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html</field>
    <field name="keywords">dd_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::video_t::dd_t::manual_resolution</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a1382ba8847055d4c48635c455c6d13f0</field>
    <field name="keywords">manual_resolution config::video_t::dd_t::manual_resolution config::video_t::dd_t</field>
    <field name="text">Manual resolution in case resolution_option resolution_option_e::manual</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::video_t::dd_t::refresh_rate_option_e</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a1a9c5b605ab8ad8a58ee728fdaf78c85</field>
    <field name="keywords">refresh_rate_option_e config::video_t::dd_t::refresh_rate_option_e config::video_t::dd_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::refresh_rate_option_e::disabled</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a1a9c5b605ab8ad8a58ee728fdaf78c85a075ae3d2fc31640504f814f60e5ef713</field>
    <field name="keywords">disabled config::video_t::dd_t::refresh_rate_option_e::disabled config::video_t::dd_t disabled config::video_t::dd_t::refresh_rate_option_e::disabled config::video_t::dd_t</field>
    <field name="text">Do not change refresh rate</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::refresh_rate_option_e::automatic</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a1a9c5b605ab8ad8a58ee728fdaf78c85a2bd9c0ed00116be1258e0cc66617d7c8</field>
    <field name="keywords">automatic config::video_t::dd_t::refresh_rate_option_e::automatic config::video_t::dd_t automatic config::video_t::dd_t::refresh_rate_option_e::automatic config::video_t::dd_t</field>
    <field name="text">Change refresh rate and use the one received from Moonlight</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::refresh_rate_option_e::manual</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a1a9c5b605ab8ad8a58ee728fdaf78c85a3c78b35502b2693fefdfc51cba3a53a5</field>
    <field name="keywords">manual config::video_t::dd_t::refresh_rate_option_e::manual config::video_t::dd_t manual config::video_t::dd_t::refresh_rate_option_e::manual config::video_t::dd_t</field>
    <field name="text">Change refresh rate and use the manually provided one</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::video_t::dd_t::hdr_option_e</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a1dbaacf45623b1add275aafb80426bad</field>
    <field name="keywords">hdr_option_e config::video_t::dd_t::hdr_option_e config::video_t::dd_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::hdr_option_e::disabled</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a1dbaacf45623b1add275aafb80426bada075ae3d2fc31640504f814f60e5ef713</field>
    <field name="keywords">disabled config::video_t::dd_t::hdr_option_e::disabled config::video_t::dd_t disabled config::video_t::dd_t::hdr_option_e::disabled config::video_t::dd_t</field>
    <field name="text">Do not change HDR settings</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::hdr_option_e::automatic</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a1dbaacf45623b1add275aafb80426bada2bd9c0ed00116be1258e0cc66617d7c8</field>
    <field name="keywords">automatic config::video_t::dd_t::hdr_option_e::automatic config::video_t::dd_t automatic config::video_t::dd_t::hdr_option_e::automatic config::video_t::dd_t</field>
    <field name="text">Change HDR settings and use the state requested by Moonlight</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::video_t::dd_t::config_revert_on_disconnect</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a4c5b47970d0452fe1b73c16b0bf88ce1</field>
    <field name="keywords">config_revert_on_disconnect config::video_t::dd_t::config_revert_on_disconnect config::video_t::dd_t</field>
    <field name="text">Specify whether to revert display configuration on client disconnect</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::video_t::dd_t::config_revert_delay</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a66bab8f52516b81293653fb9ff3e318e</field>
    <field name="keywords">config_revert_delay config::video_t::dd_t::config_revert_delay config::video_t::dd_t</field>
    <field name="text">Time to wait until settings are reverted after stream ends/app exists</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::video_t::dd_t::manual_refresh_rate</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a6b4a1c6a4090f7cd1e1dae649016b5a0</field>
    <field name="keywords">manual_refresh_rate config::video_t::dd_t::manual_refresh_rate config::video_t::dd_t</field>
    <field name="text">Manual refresh rate in case refresh_rate_option refresh_rate_option_e::manual</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::video_t::dd_t::config_option_e</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a71167e8deb326e952cc07359386306ec</field>
    <field name="keywords">config_option_e config::video_t::dd_t::config_option_e config::video_t::dd_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::config_option_e::disabled</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a71167e8deb326e952cc07359386306eca075ae3d2fc31640504f814f60e5ef713</field>
    <field name="keywords">disabled config::video_t::dd_t::config_option_e::disabled config::video_t::dd_t disabled config::video_t::dd_t::config_option_e::disabled config::video_t::dd_t</field>
    <field name="text">Disable the configuration for the device</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::config_option_e::ensure_only_display</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a71167e8deb326e952cc07359386306eca2b5e38a9436495e0d9762ef3892644f2</field>
    <field name="keywords">ensure_only_display config::video_t::dd_t::config_option_e::ensure_only_display config::video_t::dd_t ensure_only_display config::video_t::dd_t::config_option_e::ensure_only_display config::video_t::dd_t</field>
    <field name="text">See also display_device::SingleDisplayConfiguration::DevicePreparation</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::config_option_e::ensure_active</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a71167e8deb326e952cc07359386306eca30e4c2a0052b4aae3c8642f14485d789</field>
    <field name="keywords">ensure_active config::video_t::dd_t::config_option_e::ensure_active config::video_t::dd_t ensure_active config::video_t::dd_t::config_option_e::ensure_active config::video_t::dd_t</field>
    <field name="text">See also display_device::SingleDisplayConfiguration::DevicePreparation</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::config_option_e::verify_only</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a71167e8deb326e952cc07359386306eca3aa1a80d61b82a1fc9fc066c634f6ead</field>
    <field name="keywords">verify_only config::video_t::dd_t::config_option_e::verify_only config::video_t::dd_t verify_only config::video_t::dd_t::config_option_e::verify_only config::video_t::dd_t</field>
    <field name="text">See also display_device::SingleDisplayConfiguration::DevicePreparation</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::config_option_e::ensure_primary</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a71167e8deb326e952cc07359386306ecac412cebeb3d418e7ef81163b800b862e</field>
    <field name="keywords">ensure_primary config::video_t::dd_t::config_option_e::ensure_primary config::video_t::dd_t ensure_primary config::video_t::dd_t::config_option_e::ensure_primary config::video_t::dd_t</field>
    <field name="text">See also display_device::SingleDisplayConfiguration::DevicePreparation</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">config::video_t::dd_t::resolution_option_e</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a947ad18e495a814418634d6a84eb53c4</field>
    <field name="keywords">resolution_option_e config::video_t::dd_t::resolution_option_e config::video_t::dd_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::resolution_option_e::disabled</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a947ad18e495a814418634d6a84eb53c4a075ae3d2fc31640504f814f60e5ef713</field>
    <field name="keywords">disabled config::video_t::dd_t::resolution_option_e::disabled config::video_t::dd_t disabled config::video_t::dd_t::resolution_option_e::disabled config::video_t::dd_t</field>
    <field name="text">Do not change resolution</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::resolution_option_e::automatic</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a947ad18e495a814418634d6a84eb53c4a2bd9c0ed00116be1258e0cc66617d7c8</field>
    <field name="keywords">automatic config::video_t::dd_t::resolution_option_e::automatic config::video_t::dd_t automatic config::video_t::dd_t::resolution_option_e::automatic config::video_t::dd_t</field>
    <field name="text">Change resolution and use the one received from Moonlight</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">config::video_t::dd_t::resolution_option_e::manual</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t.html#a947ad18e495a814418634d6a84eb53c4a3c78b35502b2693fefdfc51cba3a53a5</field>
    <field name="keywords">manual config::video_t::dd_t::resolution_option_e::manual config::video_t::dd_t manual config::video_t::dd_t::resolution_option_e::manual config::video_t::dd_t</field>
    <field name="text">Change resolution and use the manually provided one</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::video_t::dd_t::mode_remapping_entry_t</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t_1_1mode__remapping__entry__t.html</field>
    <field name="keywords">mode_remapping_entry_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::video_t::dd_t::mode_remapping_t</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t_1_1mode__remapping__t.html</field>
    <field name="keywords">mode_remapping_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::video_t::dd_t::mode_remapping_t::refresh_rate_only</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t_1_1mode__remapping__t.html#a2de385cb918b7b998dc1cb65f0152508</field>
    <field name="keywords">refresh_rate_only config::video_t::dd_t::mode_remapping_t::refresh_rate_only config::video_t::dd_t::mode_remapping_t</field>
    <field name="text">To be use when only refresh_rate_option is set to automatic</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::video_t::dd_t::mode_remapping_t::mixed</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t_1_1mode__remapping__t.html#a44acaa5cfe33cb9b5cbc27034958ed07</field>
    <field name="keywords">mixed config::video_t::dd_t::mode_remapping_t::mixed config::video_t::dd_t::mode_remapping_t</field>
    <field name="text">To be used when resolution_option and refresh_rate_option is set to automatic</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::video_t::dd_t::mode_remapping_t::resolution_only</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t_1_1mode__remapping__t.html#a487d658a78f429b02423c4d2531f4231</field>
    <field name="keywords">resolution_only config::video_t::dd_t::mode_remapping_t::resolution_only config::video_t::dd_t::mode_remapping_t</field>
    <field name="text">To be use when only resolution_option is set to automatic</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">config::video_t::dd_t::workarounds_t</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t_1_1workarounds__t.html</field>
    <field name="keywords">workarounds_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">config::video_t::dd_t::workarounds_t::hdr_toggle_delay</field>
    <field name="url">structconfig_1_1video__t_1_1dd__t_1_1workarounds__t.html#a337f410108b34c5da259ac3c2dae1c50</field>
    <field name="keywords">hdr_toggle_delay config::video_t::dd_t::workarounds_t::hdr_toggle_delay config::video_t::dd_t::workarounds_t</field>
    <field name="text">Specify whether to apply HDR high-contrast color workaround and what delay to use</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">crypto::creds_t</field>
    <field name="url">structcrypto_1_1creds__t.html</field>
    <field name="keywords">creds_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">display_device::configuration_disabled_tag_t</field>
    <field name="url">structdisplay__device_1_1configuration__disabled__tag__t.html</field>
    <field name="keywords">configuration_disabled_tag_t</field>
    <field name="text">A tag structure indicating that configuration is disabled</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">display_device::failed_to_parse_tag_t</field>
    <field name="url">structdisplay__device_1_1failed__to__parse__tag__t.html</field>
    <field name="keywords">failed_to_parse_tag_t</field>
    <field name="text">A tag structure indicating that configuration parsing has failed</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">egl::nv12_img_t</field>
    <field name="url">structegl_1_1nv12__img__t.html</field>
    <field name="keywords">nv12_img_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">egl::plane_attr_t</field>
    <field name="url">structegl_1_1plane__attr__t.html</field>
    <field name="keywords">plane_attr_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">egl::rgb_img_t</field>
    <field name="url">structegl_1_1rgb__img__t.html</field>
    <field name="keywords">rgb_img_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">egl::surface_descriptor_t</field>
    <field name="url">structegl_1_1surface__descriptor__t.html</field>
    <field name="keywords">surface_descriptor_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">input::gamepad_t</field>
    <field name="url">structinput_1_1gamepad__t.html</field>
    <field name="keywords">gamepad_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">input::input_t</field>
    <field name="url">structinput_1_1input__t.html</field>
    <field name="keywords">input_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">input::input_t::shortkey_e</field>
    <field name="url">structinput_1_1input__t.html#ad33da02efd279a1f2122badf0e8df30b</field>
    <field name="keywords">shortkey_e input::input_t::shortkey_e input::input_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">input::input_t::CTRL</field>
    <field name="url">structinput_1_1input__t.html#ad33da02efd279a1f2122badf0e8df30ba1436d723005874576639aa2169641e3b</field>
    <field name="keywords">CTRL input::input_t::CTRL input::input_t CTRL input::input_t::CTRL input::input_t</field>
    <field name="text">Control key</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">input::input_t::ALT</field>
    <field name="url">structinput_1_1input__t.html#ad33da02efd279a1f2122badf0e8df30ba16d76b23da70d413ffa22beaba477dd3</field>
    <field name="keywords">ALT input::input_t::ALT input::input_t ALT input::input_t::ALT input::input_t</field>
    <field name="text">Alt key</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">input::input_t::SHORTCUT</field>
    <field name="url">structinput_1_1input__t.html#ad33da02efd279a1f2122badf0e8df30ba9e2d2ddd38ae57fc04e9fa5db229447b</field>
    <field name="keywords">SHORTCUT input::input_t::SHORTCUT input::input_t SHORTCUT input::input_t::SHORTCUT input::input_t</field>
    <field name="text">Shortcut combination</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">input::input_t::SHIFT</field>
    <field name="url">structinput_1_1input__t.html#ad33da02efd279a1f2122badf0e8df30bab46450b4b077d30c7817516c4c53b566</field>
    <field name="keywords">SHIFT input::input_t::SHIFT input::input_t SHIFT input::input_t::SHIFT input::input_t</field>
    <field name="text">Shift key</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">input::touch_port_t</field>
    <field name="url">structinput_1_1touch__port__t.html</field>
    <field name="keywords">touch_port_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nlohmann::adl_serializer&lt; data_t &gt;</field>
    <field name="url">structnlohmann_1_1adl__serializer_3_01data__t_01_4.html</field>
    <field name="keywords">adl_serializer&lt; data_t &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nlohmann::adl_serializer&lt; opengl_swapchain_t &gt;</field>
    <field name="url">structnlohmann_1_1adl__serializer_3_01opengl__swapchain__t_01_4.html</field>
    <field name="keywords">adl_serializer&lt; opengl_swapchain_t &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nlohmann::adl_serializer&lt; std::optional&lt; T &gt; &gt;</field>
    <field name="url">structnlohmann_1_1adl__serializer_3_01std_1_1optional_3_01T_01_4_01_4.html</field>
    <field name="keywords">adl_serializer&lt; std::optional&lt; T &gt; &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvenc::nvenc_colorspace_t</field>
    <field name="url">structnvenc_1_1nvenc__colorspace__t.html</field>
    <field name="keywords">nvenc_colorspace_t</field>
    <field name="text">YUV colorspace and color range</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvenc::nvenc_config</field>
    <field name="url">structnvenc_1_1nvenc__config.html</field>
    <field name="keywords">nvenc_config</field>
    <field name="text">NVENC encoder configuration</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvenc::nvenc_encoded_frame</field>
    <field name="url">structnvenc_1_1nvenc__encoded__frame.html</field>
    <field name="keywords">nvenc_encoded_frame</field>
    <field name="text">Encoded frame</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvhttp::client_t</field>
    <field name="url">structnvhttp_1_1client__t.html</field>
    <field name="keywords">client_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvhttp::conf_intern_t</field>
    <field name="url">structnvhttp_1_1conf__intern__t.html</field>
    <field name="keywords">conf_intern_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvhttp::named_cert_t</field>
    <field name="url">structnvhttp_1_1named__cert__t.html</field>
    <field name="keywords">named_cert_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvhttp::pair_session_t</field>
    <field name="url">structnvhttp_1_1pair__session__t.html</field>
    <field name="keywords">pair_session_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">nvhttp::pair_session_t::last_phase</field>
    <field name="url">structnvhttp_1_1pair__session__t.html#af88082cd64c8dcdfb9f9b697f5ce4af3</field>
    <field name="keywords">last_phase nvhttp::pair_session_t::last_phase nvhttp::pair_session_t</field>
    <field name="text">used as a security measure to prevent out of order calls</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvhttp::tunnel</field>
    <field name="url">structnvhttp_1_1tunnel.html</field>
    <field name="keywords">tunnel</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvhttp::tunnel&lt; SimpleWeb::HTTP &gt;</field>
    <field name="url">structnvhttp_1_1tunnel_3_01SimpleWeb_1_1HTTP_01_4.html</field>
    <field name="keywords">tunnel&lt; SimpleWeb::HTTP &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvhttp::tunnel&lt; SunshineHTTPS &gt;</field>
    <field name="url">structnvhttp_1_1tunnel_3_01SunshineHTTPS_01_4.html</field>
    <field name="keywords">tunnel&lt; SunshineHTTPS &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvprefs::nvprefs_interface::impl</field>
    <field name="url">structnvprefs_1_1nvprefs__interface_1_1impl.html</field>
    <field name="keywords">impl</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvprefs::nvprefs_options</field>
    <field name="url">structnvprefs_1_1nvprefs__options.html</field>
    <field name="keywords">nvprefs_options</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvprefs::safe_handle</field>
    <field name="url">structnvprefs_1_1safe__handle.html</field>
    <field name="keywords">safe_handle</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvprefs::safe_hlocal_deleter</field>
    <field name="url">structnvprefs_1_1safe__hlocal__deleter.html</field>
    <field name="keywords">safe_hlocal_deleter</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvprefs::undo_data_t::data_t</field>
    <field name="url">structnvprefs_1_1undo__data__t_1_1data__t.html</field>
    <field name="keywords">data_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">nvprefs::undo_data_t::data_t::opengl_swapchain_t</field>
    <field name="url">structnvprefs_1_1undo__data__t_1_1data__t_1_1opengl__swapchain__t.html</field>
    <field name="keywords">opengl_swapchain_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::KeyCodeMap</field>
    <field name="url">structplatf_1_1KeyCodeMap.html</field>
    <field name="keywords">KeyCodeMap</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::audio::format_t</field>
    <field name="url">structplatf_1_1audio_1_1format__t.html</field>
    <field name="keywords">format_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::av_display_t</field>
    <field name="url">structplatf_1_1av__display__t.html</field>
    <field name="keywords">av_display_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::av_display_t::setResolution</field>
    <field name="args">(void *display, int width, int height)</field>
    <field name="url">structplatf_1_1av__display__t.html#a04be04e8a320b0a2860b9bd0684f2b31</field>
    <field name="keywords">setResolution platf::av_display_t::setResolution platf::av_display_t</field>
    <field name="text">A bridge from the pure C++ code of the hwdevice_t class to the pure Objective C code display an opaque pointer to an object of this class width the intended capture width height the intended capture height</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::av_display_t::capture</field>
    <field name="args">(const push_captured_image_cb_t &amp;push_captured_image_cb, const pull_free_image_cb_t &amp;pull_free_image_cb, bool *cursor) override</field>
    <field name="url">structplatf_1_1av__display__t.html#adff38bf8fa04ec2118fc2877479da4b0</field>
    <field name="keywords">capture platf::av_display_t::capture platf::av_display_t</field>
    <field name="text">Capture a frame push_captured_image_cb The callback that is called with captured image must be called from the same thread as capture() pull_free_image_cb Capture backends call this callback to get empty image from the pool If backend uses multiple threads calls to this callback must be synchronized Calls to this callback and push_captured_image_cb must be synchronized as well cursor A pointer to the flag that indicates whether the cursor should be captured as well capture_e::ok When stopping capture_e::error On error capture_e::reinit When need of reinitialization</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::av_img_t</field>
    <field name="url">structplatf_1_1av__img__t.html</field>
    <field name="keywords">av_img_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::av_mic_t</field>
    <field name="url">structplatf_1_1av__mic__t.html</field>
    <field name="keywords">av_mic_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::av_pixel_buf_t</field>
    <field name="url">structplatf_1_1av__pixel__buf__t.html</field>
    <field name="keywords">av_pixel_buf_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::av_sample_buf_t</field>
    <field name="url">structplatf_1_1av__sample__buf__t.html</field>
    <field name="keywords">av_sample_buf_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::avcodec_encode_device_t</field>
    <field name="url">structplatf_1_1avcodec__encode__device__t.html</field>
    <field name="keywords">avcodec_encode_device_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::avcodec_encode_device_t::prepare_to_derive_context</field>
    <field name="args">(int hw_device_type)</field>
    <field name="url">structplatf_1_1avcodec__encode__device__t.html#a5bbe8181b8465022ed0c1e77cdb8e8c2</field>
    <field name="keywords">prepare_to_derive_context platf::avcodec_encode_device_t::prepare_to_derive_context platf::avcodec_encode_device_t</field>
    <field name="text">Prepare to derive a context Prepare to derive a context Prepare to derive a context Prepare to derive a context Prepare to derive a context Implementations may make modifications required before context derivation Prepare to derive a context Prepare to derive a context Prepare to derive a context Prepare to derive a context Prepare to derive a context</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::avcodec_encode_device_t::init_codec_options</field>
    <field name="args">(AVCodecContext *ctx, AVDictionary **options)</field>
    <field name="url">structplatf_1_1avcodec__encode__device__t.html#a67daecc23ed78b5702e77a25bf780723</field>
    <field name="keywords">init_codec_options platf::avcodec_encode_device_t::init_codec_options platf::avcodec_encode_device_t</field>
    <field name="text">Provides a hook for allow platform-specific code to adjust codec options Provides a hook for allow platform-specific code to adjust codec options Provides a hook for allow platform-specific code to adjust codec options Provides a hook for allow platform-specific code to adjust codec options Provides a hook for allow platform-specific code to adjust codec options Implementations may set or modify codec options prior to codec initialization Provides a hook for allow platform-specific code to adjust codec options Provides a hook for allow platform-specific code to adjust codec options Provides a hook for allow platform-specific code to adjust codec options</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::avcodec_encode_device_t::set_frame</field>
    <field name="args">(AVFrame *frame, AVBufferRef *hw_frames_ctx)</field>
    <field name="url">structplatf_1_1avcodec__encode__device__t.html#ab167a303959c47324ea8ec6fdf193b12</field>
    <field name="keywords">set_frame platf::avcodec_encode_device_t::set_frame platf::avcodec_encode_device_t</field>
    <field name="text">Set the frame to be encoded Implementations must take ownership of frame</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::avcodec_encode_device_t::init_hwframes</field>
    <field name="args">(AVHWFramesContext *frames)</field>
    <field name="url">structplatf_1_1avcodec__encode__device__t.html#afb9ffbe8841cd22ada087405506eb929</field>
    <field name="keywords">init_hwframes platf::avcodec_encode_device_t::init_hwframes platf::avcodec_encode_device_t</field>
    <field name="text">Initialize the hwframes context Initialize the hwframes context Initialize the hwframes context Initialize the hwframes context Initialize the hwframes context Implementations may set parameters during initialization of the hwframes context Initialize the hwframes context Initialize the hwframes context Initialize the hwframes context Initialize the hwframes context Initialize the hwframes context</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::batched_send_info_t</field>
    <field name="url">structplatf_1_1batched__send__info__t.html</field>
    <field name="keywords">batched_send_info_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::batched_send_info_t::buffer_for_payload_offset</field>
    <field name="args">(ptrdiff_t offset)</field>
    <field name="url">structplatf_1_1batched__send__info__t.html#a4eb998940a6465e83a2f67d42857d7f0</field>
    <field name="keywords">buffer_for_payload_offset platf::batched_send_info_t::buffer_for_payload_offset platf::batched_send_info_t</field>
    <field name="text">Returns a payload buffer descriptor for the given payload offset offset The offset in the total payload data bytes Buffer descriptor describing the region at the given offset</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::buffer_descriptor_t</field>
    <field name="url">structplatf_1_1buffer__descriptor__t.html</field>
    <field name="keywords">buffer_descriptor_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::client_input_raw_t</field>
    <field name="url">structplatf_1_1client__input__raw__t.html</field>
    <field name="keywords">client_input_raw_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::dxgi::cursor_t</field>
    <field name="url">structplatf_1_1dxgi_1_1cursor__t.html</field>
    <field name="keywords">cursor_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::dxgi::d3d_base_encode_device::encoder_img_ctx_t</field>
    <field name="url">structplatf_1_1dxgi_1_1d3d__base__encode__device_1_1encoder__img__ctx__t.html</field>
    <field name="keywords">encoder_img_ctx_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::dxgi::display_base_t::_D3DKMT_CLOSEADAPTER</field>
    <field name="url">structplatf_1_1dxgi_1_1display__base__t_1_1__D3DKMT__CLOSEADAPTER.html</field>
    <field name="keywords">_D3DKMT_CLOSEADAPTER</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::dxgi::display_base_t::_D3DKMT_OPENADAPTERFROMLUID</field>
    <field name="url">structplatf_1_1dxgi_1_1display__base__t_1_1__D3DKMT__OPENADAPTERFROMLUID.html</field>
    <field name="keywords">_D3DKMT_OPENADAPTERFROMLUID</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::dxgi::display_base_t::_D3DKMT_QUERYADAPTERINFO</field>
    <field name="url">structplatf_1_1dxgi_1_1display__base__t_1_1__D3DKMT__QUERYADAPTERINFO.html</field>
    <field name="keywords">_D3DKMT_QUERYADAPTERINFO</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::dxgi::display_base_t::_D3DKMT_WDDM_2_7_CAPS</field>
    <field name="url">structplatf_1_1dxgi_1_1display__base__t_1_1__D3DKMT__WDDM__2__7__CAPS.html</field>
    <field name="keywords">_D3DKMT_WDDM_2_7_CAPS</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::dxgi::img_d3d_t</field>
    <field name="url">structplatf_1_1dxgi_1_1img__d3d__t.html</field>
    <field name="keywords">img_d3d_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::dxgi::img_t</field>
    <field name="url">structplatf_1_1dxgi_1_1img__t.html</field>
    <field name="keywords">img_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::dxgi::texture_lock_helper</field>
    <field name="url">structplatf_1_1dxgi_1_1texture__lock__helper.html</field>
    <field name="keywords">texture_lock_helper</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::encode_device_t</field>
    <field name="url">structplatf_1_1encode__device__t.html</field>
    <field name="keywords">encode_device_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::enum_wnd_context_t</field>
    <field name="url">structplatf_1_1enum__wnd__context__t.html</field>
    <field name="keywords">enum_wnd_context_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::gamepad_arrival_t</field>
    <field name="url">structplatf_1_1gamepad__arrival__t.html</field>
    <field name="keywords">gamepad_arrival_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::gamepad_battery_t</field>
    <field name="url">structplatf_1_1gamepad__battery__t.html</field>
    <field name="keywords">gamepad_battery_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::gamepad_context_t</field>
    <field name="url">structplatf_1_1gamepad__context__t.html</field>
    <field name="keywords">gamepad_context_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::gamepad_feedback_msg_t</field>
    <field name="url">structplatf_1_1gamepad__feedback__msg__t.html</field>
    <field name="keywords">gamepad_feedback_msg_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::gamepad_id_t</field>
    <field name="url">structplatf_1_1gamepad__id__t.html</field>
    <field name="keywords">gamepad_id_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::gamepad_motion_t</field>
    <field name="url">structplatf_1_1gamepad__motion__t.html</field>
    <field name="keywords">gamepad_motion_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::gamepad_state_t</field>
    <field name="url">structplatf_1_1gamepad__state__t.html</field>
    <field name="keywords">gamepad_state_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::gamepad_touch_t</field>
    <field name="url">structplatf_1_1gamepad__touch__t.html</field>
    <field name="keywords">gamepad_touch_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::gp_touch_context_t</field>
    <field name="url">structplatf_1_1gp__touch__context__t.html</field>
    <field name="keywords">gp_touch_context_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::high_precision_timer</field>
    <field name="url">structplatf_1_1high__precision__timer.html</field>
    <field name="keywords">high_precision_timer</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::high_precision_timer::sleep_for</field>
    <field name="args">(const std::chrono::nanoseconds &amp;duration)=0</field>
    <field name="url">structplatf_1_1high__precision__timer.html#a3ba74f7a64b4a476be0d9494c3915452</field>
    <field name="keywords">sleep_for platf::high_precision_timer::sleep_for platf::high_precision_timer</field>
    <field name="text">Sleep for the duration duration Sleep duration</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::high_precision_timer::operator bool</field>
    <field name="args">()=0</field>
    <field name="url">structplatf_1_1high__precision__timer.html#a8f82b0f94f221e58200dcecacff8f34a</field>
    <field name="keywords">operator bool platf::high_precision_timer::operator bool platf::high_precision_timer</field>
    <field name="text">Check if platform-specific timer backend has been initialized successfully true on success false on error</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::img_t</field>
    <field name="url">structplatf_1_1img__t.html</field>
    <field name="keywords">img_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::input_raw_t</field>
    <field name="url">structplatf_1_1input__raw__t.html</field>
    <field name="keywords">input_raw_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">platf::input_raw_t::gamepads</field>
    <field name="url">structplatf_1_1input__raw__t.html#ac318e08d83ad6775b4c7941bc0567e69</field>
    <field name="keywords">gamepads platf::input_raw_t::gamepads platf::input_raw_t</field>
    <field name="text">A list of gamepads that are currently connected The pointer is shared because that state will be shared with background threads that deal with rumble and LED</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::joypad_state</field>
    <field name="url">structplatf_1_1joypad__state.html</field>
    <field name="keywords">joypad_state</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::kms::card_descriptor_t</field>
    <field name="url">structplatf_1_1kms_1_1card__descriptor__t.html</field>
    <field name="keywords">card_descriptor_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::kms::connector_t</field>
    <field name="url">structplatf_1_1kms_1_1connector__t.html</field>
    <field name="keywords">connector_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::kms::cursor_t</field>
    <field name="url">structplatf_1_1kms_1_1cursor__t.html</field>
    <field name="keywords">cursor_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::kms::kms_img_t</field>
    <field name="url">structplatf_1_1kms_1_1kms__img__t.html</field>
    <field name="keywords">kms_img_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::kms::monitor_t</field>
    <field name="url">structplatf_1_1kms_1_1monitor__t.html</field>
    <field name="keywords">monitor_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::macos_audio_control_t</field>
    <field name="url">structplatf_1_1macos__audio__control__t.html</field>
    <field name="keywords">macos_audio_control_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::macos_audio_control_t::is_sink_available</field>
    <field name="args">(const std::string &amp;sink) override</field>
    <field name="url">structplatf_1_1macos__audio__control__t.html#a71951cc30f44fdc199d9c6e2ed35820e</field>
    <field name="keywords">is_sink_available platf::macos_audio_control_t::is_sink_available platf::macos_audio_control_t</field>
    <field name="text">Check if the audio sink is available in the system sink Sink to be checked True if available false otherwise</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::macos_input_t</field>
    <field name="url">structplatf_1_1macos__input__t.html</field>
    <field name="keywords">macos_input_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::mic_attr_t</field>
    <field name="url">structplatf_1_1mic__attr__t.html</field>
    <field name="keywords">mic_attr_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::nvenc_encode_device_t</field>
    <field name="url">structplatf_1_1nvenc__encode__device__t.html</field>
    <field name="keywords">nvenc_encode_device_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::pa::add_const_helper</field>
    <field name="url">structplatf_1_1pa_1_1add__const__helper.html</field>
    <field name="keywords">add_const_helper</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::pa::add_const_helper&lt; false, T &gt;</field>
    <field name="url">structplatf_1_1pa_1_1add__const__helper_3_01false_00_01T_01_4.html</field>
    <field name="keywords">add_const_helper&lt; false, T &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::pa::add_const_helper&lt; true, T &gt;</field>
    <field name="url">structplatf_1_1pa_1_1add__const__helper_3_01true_00_01T_01_4.html</field>
    <field name="keywords">add_const_helper&lt; true, T &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::pen_input_t</field>
    <field name="url">structplatf_1_1pen__input__t.html</field>
    <field name="keywords">pen_input_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::send_info_t</field>
    <field name="url">structplatf_1_1send__info__t.html</field>
    <field name="keywords">send_info_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::shm_attr_t</field>
    <field name="url">structplatf_1_1shm__attr__t.html</field>
    <field name="keywords">shm_attr_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::shm_attr_t::capture</field>
    <field name="args">(const push_captured_image_cb_t &amp;push_captured_image_cb, const pull_free_image_cb_t &amp;pull_free_image_cb, bool *cursor) override</field>
    <field name="url">structplatf_1_1shm__attr__t.html#ab654af915d72606d8369a654c7955337</field>
    <field name="keywords">capture platf::shm_attr_t::capture platf::shm_attr_t</field>
    <field name="text">Capture a frame push_captured_image_cb The callback that is called with captured image must be called from the same thread as capture() pull_free_image_cb Capture backends call this callback to get empty image from the pool If backend uses multiple threads calls to this callback must be synchronized Calls to this callback and push_captured_image_cb must be synchronized as well cursor A pointer to the flag that indicates whether the cursor should be captured as well capture_e::ok When stopping capture_e::error On error capture_e::reinit When need of reinitialization</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::shm_img_t</field>
    <field name="url">structplatf_1_1shm__img__t.html</field>
    <field name="keywords">shm_img_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::sink_t</field>
    <field name="url">structplatf_1_1sink__t.html</field>
    <field name="keywords">sink_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::sink_t::null_t</field>
    <field name="url">structplatf_1_1sink__t_1_1null__t.html</field>
    <field name="keywords">null_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::supported_gamepad_t</field>
    <field name="url">structplatf_1_1supported__gamepad__t.html</field>
    <field name="keywords">supported_gamepad_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::temp_retain_av_img_t</field>
    <field name="url">structplatf_1_1temp__retain__av__img__t.html</field>
    <field name="keywords">temp_retain_av_img_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::touch_input_t</field>
    <field name="url">structplatf_1_1touch__input__t.html</field>
    <field name="keywords">touch_input_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::touch_port_t</field>
    <field name="url">structplatf_1_1touch__port__t.html</field>
    <field name="keywords">touch_port_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::x11_attr_t</field>
    <field name="url">structplatf_1_1x11__attr__t.html</field>
    <field name="keywords">x11_attr_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::x11_attr_t::capture</field>
    <field name="args">(const push_captured_image_cb_t &amp;push_captured_image_cb, const pull_free_image_cb_t &amp;pull_free_image_cb, bool *cursor) override</field>
    <field name="url">structplatf_1_1x11__attr__t.html#abb25ed3cdedca46d58eeda4d6b2d3b31</field>
    <field name="keywords">capture platf::x11_attr_t::capture platf::x11_attr_t</field>
    <field name="text">Capture a frame Capture a frame push_captured_image_cb The callback that is called with captured image must be called from the same thread as capture() pull_free_image_cb Capture backends call this callback to get empty image from the pool If backend uses multiple threads calls to this callback must be synchronized Calls to this callback and push_captured_image_cb must be synchronized as well cursor A pointer to the flag that indicates whether the cursor should be captured as well capture_e::ok When stopping capture_e::error On error capture_e::reinit When need of reinitialization</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::x11_attr_t::refresh</field>
    <field name="args">()</field>
    <field name="url">structplatf_1_1x11__attr__t.html#abc714166ab90dcbb778bf94bfd0e0460</field>
    <field name="keywords">refresh platf::x11_attr_t::refresh platf::x11_attr_t</field>
    <field name="text">Called when the display attributes should change</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::x11_attr_t::x11_attr_t</field>
    <field name="args">(mem_type_e mem_type)</field>
    <field name="url">structplatf_1_1x11__attr__t.html#ac538047fcc9c680272c16ead330e7623</field>
    <field name="keywords">x11_attr_t platf::x11_attr_t::x11_attr_t platf::x11_attr_t</field>
    <field name="text">Last X NOT the streamed monitor! size This way we can trigger reinitialization if the dimensions changed while streaming</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">platf::x11_img_t</field>
    <field name="url">structplatf_1_1x11__img__t.html</field>
    <field name="keywords">x11_img_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">proc::ctx_t</field>
    <field name="url">structproc_1_1ctx__t.html</field>
    <field name="keywords">ctx_t</field>
    <field name="text">pre_cmds guaranteed to be executed unless any of the commands fail detached commands detached from Sunshine cmd Runs indefinitely until No session is running and a different set of commands it to be executed Command exits working_dir the process working directory This is required for some games to run properly cmd_output empty The output of the commands are appended to the output of sunshine The output of the commands are discarded filename The output of the commands are appended to filename</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">proc::ctx_t::detached</field>
    <field name="url">structproc_1_1ctx__t.html#a9f64a975755e4a5566d0d50df3076076</field>
    <field name="keywords">detached proc::ctx_t::detached proc::ctx_t</field>
    <field name="text">Some applications such as Steam either exit quickly or keep running indefinitely Apps that launch normal child processes and terminate will be handled by the process grouping logic wait_all However apps that launch child processes indirectly or into another process group such as UWP apps can only be handled by the auto-detach heuristic which catches processes that exit 0 very quickly but we won t have proper process tracking for those For cases where users just want to kick off a background process and never manage the lifetime of that process they can use detached commands for that</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">rtsp_stream::encrypted_rtsp_header_t</field>
    <field name="url">structrtsp__stream_1_1encrypted__rtsp__header__t.html</field>
    <field name="keywords">encrypted_rtsp_header_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">rtsp_stream::launch_session_t</field>
    <field name="url">structrtsp__stream_1_1launch__session__t.html</field>
    <field name="keywords">launch_session_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">safe::shared_t::ptr_t</field>
    <field name="url">structsafe_1_1shared__t_1_1ptr__t.html</field>
    <field name="keywords">ptr_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::audio_fec_packet_t</field>
    <field name="url">structstream_1_1audio__fec__packet__t.html</field>
    <field name="keywords">audio_fec_packet_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::audio_packet_t</field>
    <field name="url">structstream_1_1audio__packet__t.html</field>
    <field name="keywords">audio_packet_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::broadcast_ctx_t</field>
    <field name="url">structstream_1_1broadcast__ctx__t.html</field>
    <field name="keywords">broadcast_ctx_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::config_t</field>
    <field name="url">structstream_1_1config__t.html</field>
    <field name="keywords">config_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::control_adaptive_triggers_t</field>
    <field name="url">structstream_1_1control__adaptive__triggers__t.html</field>
    <field name="keywords">control_adaptive_triggers_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">stream::control_adaptive_triggers_t::event_flags</field>
    <field name="url">structstream_1_1control__adaptive__triggers__t.html#abb183ba84dabc2f5d5f9a2cf4a353882</field>
    <field name="keywords">event_flags stream::control_adaptive_triggers_t::event_flags stream::control_adaptive_triggers_t</field>
    <field name="text">0 x04 Right trigger 0 x08 Left trigger</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::control_encrypted_t</field>
    <field name="url">structstream_1_1control__encrypted__t.html</field>
    <field name="keywords">control_encrypted_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::control_hdr_mode_t</field>
    <field name="url">structstream_1_1control__hdr__mode__t.html</field>
    <field name="keywords">control_hdr_mode_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::control_header_v2</field>
    <field name="url">structstream_1_1control__header__v2.html</field>
    <field name="keywords">control_header_v2</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::control_rumble_t</field>
    <field name="url">structstream_1_1control__rumble__t.html</field>
    <field name="keywords">control_rumble_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::control_rumble_triggers_t</field>
    <field name="url">structstream_1_1control__rumble__triggers__t.html</field>
    <field name="keywords">control_rumble_triggers_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::control_set_motion_event_t</field>
    <field name="url">structstream_1_1control__set__motion__event__t.html</field>
    <field name="keywords">control_set_motion_event_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::control_set_rgb_led_t</field>
    <field name="url">structstream_1_1control__set__rgb__led__t.html</field>
    <field name="keywords">control_set_rgb_led_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::control_terminate_t</field>
    <field name="url">structstream_1_1control__terminate__t.html</field>
    <field name="keywords">control_terminate_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::fec::fec_t</field>
    <field name="url">structstream_1_1fec_1_1fec__t.html</field>
    <field name="keywords">fec_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::session_t</field>
    <field name="url">structstream_1_1session__t.html</field>
    <field name="keywords">session_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::video_packet_enc_prefix_t</field>
    <field name="url">structstream_1_1video__packet__enc__prefix__t.html</field>
    <field name="keywords">video_packet_enc_prefix_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::video_packet_raw_t</field>
    <field name="url">structstream_1_1video__packet__raw__t.html</field>
    <field name="keywords">video_packet_raw_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">stream::video_short_frame_header_t</field>
    <field name="url">structstream_1_1video__short__frame__header__t.html</field>
    <field name="keywords">video_short_frame_header_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">upnp::mapping_t</field>
    <field name="url">structupnp_1_1mapping__t.html</field>
    <field name="keywords">mapping_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::Destroy</field>
    <field name="url">structutil_1_1Destroy.html</field>
    <field name="keywords">Destroy</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::Function</field>
    <field name="url">structutil_1_1Function.html</field>
    <field name="keywords">Function</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::__either</field>
    <field name="url">structutil_1_1____either.html</field>
    <field name="keywords">__either</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::__either&lt; false, X, Y &gt;</field>
    <field name="url">structutil_1_1____either_3_01false_00_01X_00_01Y_01_4.html</field>
    <field name="keywords">__either&lt; false, X, Y &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::__either&lt; true, X, Y &gt;</field>
    <field name="url">structutil_1_1____either_3_01true_00_01X_00_01Y_01_4.html</field>
    <field name="keywords">__either&lt; true, X, Y &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::__false_v</field>
    <field name="url">structutil_1_1____false__v.html</field>
    <field name="keywords">__false_v</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::__false_v&lt; T, std::enable_if_t&lt; instantiation_of_v&lt; std::optional, T &gt; &gt; &gt;</field>
    <field name="url">structutil_1_1____false__v_3_01T_00_01std_1_1enable__if__t_3_01instantiation__of__v_3_01std_1_1optional_00_01T_01_4_01_4_01_4.html</field>
    <field name="keywords">__false_v&lt; T, std::enable_if_t&lt; instantiation_of_v&lt; std::optional, T &gt; &gt; &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::__false_v&lt; T, std::enable_if_t&lt; is_pointer_v&lt; T &gt; &gt; &gt;</field>
    <field name="url">structutil_1_1____false__v_3_01T_00_01std_1_1enable__if__t_3_01is__pointer__v_3_01T_01_4_01_4_01_4.html</field>
    <field name="keywords">__false_v&lt; T, std::enable_if_t&lt; is_pointer_v&lt; T &gt; &gt; &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::__false_v&lt; T, std::enable_if_t&lt; std::is_same_v&lt; T, bool &gt; &gt; &gt;</field>
    <field name="url">structutil_1_1____false__v_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__same__v_3_01T_00_01bool_01_4_01_4_01_4.html</field>
    <field name="keywords">__false_v&lt; T, std::enable_if_t&lt; std::is_same_v&lt; T, bool &gt; &gt; &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::__instantiation_of</field>
    <field name="url">structutil_1_1____instantiation__of.html</field>
    <field name="keywords">__instantiation_of</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::__instantiation_of&lt; X, X&lt; Y... &gt; &gt;</field>
    <field name="url">structutil_1_1____instantiation__of_3_01X_00_01X_3_01Y_8_8_8_01_4_01_4.html</field>
    <field name="keywords">__instantiation_of&lt; X, X&lt; Y... &gt; &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::endian::endian_helper</field>
    <field name="url">structutil_1_1endian_1_1endian__helper.html</field>
    <field name="keywords">endian_helper</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::endian::endian_helper&lt; T, std::enable_if_t&lt; instantiation_of_v&lt; std::optional, T &gt; &gt; &gt;</field>
    <field name="url">structutil_1_1endian_1_1endian__helper_3_01T_00_01std_1_1enable__if__t_3_01instantiation__of__v_0fea619a60fca1c46381aa29a9b23f8b.html</field>
    <field name="keywords">endian_helper&lt; T, std::enable_if_t&lt; instantiation_of_v&lt; std::optional, T &gt; &gt; &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::endian::endian_helper&lt; T, std::enable_if_t&lt;!(instantiation_of_v&lt; std::optional, T &gt;)&gt; &gt;</field>
    <field name="url">structutil_1_1endian_1_1endian__helper_3_01T_00_01std_1_1enable__if__t_3_9_07instantiation__of__96e15fb5b259902e4e46b0ae99759087.html</field>
    <field name="keywords">endian_helper&lt; T, std::enable_if_t&lt;!(instantiation_of_v&lt; std::optional, T &gt;)&gt; &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::endian::endianness</field>
    <field name="url">structutil_1_1endian_1_1endianness.html</field>
    <field name="keywords">endianness</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">util::endian::endianness::little</field>
    <field name="url">structutil_1_1endian_1_1endianness.html#ad6e49a0f88a12487fa5e2f49a18e5475aaa2098874c46558688773cb1a8e2e133</field>
    <field name="keywords">little util::endian::endianness::little util::endian::endianness&lt; T &gt;</field>
    <field name="text">little-endian target architecture</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">util::endian::endianness::big</field>
    <field name="url">structutil_1_1endian_1_1endianness.html#ad6e49a0f88a12487fa5e2f49a18e5475abfebce2fec1156dd59b05f69137ef32f</field>
    <field name="keywords">big util::endian::endianness::big util::endian::endianness&lt; T &gt;</field>
    <field name="text">big-endian target architecture</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::overloaded</field>
    <field name="url">structutil_1_1overloaded.html</field>
    <field name="keywords">overloaded</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">util::point_t</field>
    <field name="url">structutil_1_1point__t.html</field>
    <field name="keywords">point_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">va::AVVAAPIDeviceContext</field>
    <field name="url">structva_1_1AVVAAPIDeviceContext.html</field>
    <field name="keywords">AVVAAPIDeviceContext</field>
    <field name="text">VAAPI connection details Allocated as AVHWDeviceContext.hwctx</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">va::AVVAAPIDeviceContext::driver_quirks</field>
    <field name="url">structva_1_1AVVAAPIDeviceContext.html#a408f6d25f25dc5d85952a6d5fada656a</field>
    <field name="keywords">driver_quirks va::AVVAAPIDeviceContext::driver_quirks va::AVVAAPIDeviceContext</field>
    <field name="text">Driver quirks to apply this is filled by av_hwdevice_ctx_init() with reference to a table of known drivers unless the AV_VAAPI_DRIVER_QUIRK_USER_SET bit is already present The user may need to refer to this field when performing any later operations using VAAPI with the same VADisplay</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">va::AVVAAPIDeviceContext::display</field>
    <field name="url">structva_1_1AVVAAPIDeviceContext.html#a6e253f23af53979857552f23f0208b53</field>
    <field name="keywords">display va::AVVAAPIDeviceContext::display va::AVVAAPIDeviceContext</field>
    <field name="text">The VADisplay handle to be filled by the user</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">va::DRMPRIMESurfaceDescriptor</field>
    <field name="url">structva_1_1DRMPRIMESurfaceDescriptor.html</field>
    <field name="keywords">DRMPRIMESurfaceDescriptor</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">va::VAAPIDevicePriv</field>
    <field name="url">structva_1_1VAAPIDevicePriv.html</field>
    <field name="keywords">VAAPIDevicePriv</field>
    <field name="text">This is a private structure of FFmpeg I need this to manually create a VAAPI hardware context xdisplay will not be used internally by FFmpeg</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::avcodec_colorspace_t</field>
    <field name="url">structvideo_1_1avcodec__colorspace__t.html</field>
    <field name="keywords">avcodec_colorspace_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::capture_ctx_t</field>
    <field name="url">structvideo_1_1capture__ctx__t.html</field>
    <field name="keywords">capture_ctx_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::capture_thread_async_ctx_t</field>
    <field name="url">structvideo_1_1capture__thread__async__ctx__t.html</field>
    <field name="keywords">capture_thread_async_ctx_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::capture_thread_sync_ctx_t</field>
    <field name="url">structvideo_1_1capture__thread__sync__ctx__t.html</field>
    <field name="keywords">capture_thread_sync_ctx_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::color_t</field>
    <field name="url">structvideo_1_1color__t.html</field>
    <field name="keywords">color_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::config_t</field>
    <field name="url">structvideo_1_1config__t.html</field>
    <field name="keywords">config_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::encode_session_t</field>
    <field name="url">structvideo_1_1encode__session__t.html</field>
    <field name="keywords">encode_session_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::encoder_platform_formats_avcodec</field>
    <field name="url">structvideo_1_1encoder__platform__formats__avcodec.html</field>
    <field name="keywords">encoder_platform_formats_avcodec</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::encoder_platform_formats_nvenc</field>
    <field name="url">structvideo_1_1encoder__platform__formats__nvenc.html</field>
    <field name="keywords">encoder_platform_formats_nvenc</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::encoder_platform_formats_t</field>
    <field name="url">structvideo_1_1encoder__platform__formats__t.html</field>
    <field name="keywords">encoder_platform_formats_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::encoder_t</field>
    <field name="url">structvideo_1_1encoder__t.html</field>
    <field name="keywords">encoder_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">video::encoder_t::flag_e</field>
    <field name="url">structvideo_1_1encoder__t.html#aba3b88f6150e12474bc396675c2e028f</field>
    <field name="keywords">flag_e video::encoder_t::flag_e video::encoder_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::encoder_t::DYNAMIC_RANGE</field>
    <field name="url">structvideo_1_1encoder__t.html#aba3b88f6150e12474bc396675c2e028fa09bad7f9c786925ce4c35023afb15903</field>
    <field name="keywords">DYNAMIC_RANGE video::encoder_t::DYNAMIC_RANGE video::encoder_t DYNAMIC_RANGE video::encoder_t::DYNAMIC_RANGE video::encoder_t</field>
    <field name="text">HDR support</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::encoder_t::VUI_PARAMETERS</field>
    <field name="url">structvideo_1_1encoder__t.html#aba3b88f6150e12474bc396675c2e028fa0c4e7b93cf495ddddcc91a635a5ee64d</field>
    <field name="keywords">VUI_PARAMETERS video::encoder_t::VUI_PARAMETERS video::encoder_t VUI_PARAMETERS video::encoder_t::VUI_PARAMETERS video::encoder_t</field>
    <field name="text">AMD encoder with VAAPI doesn t add VUI parameters to SPS</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::encoder_t::PASSED</field>
    <field name="url">structvideo_1_1encoder__t.html#aba3b88f6150e12474bc396675c2e028fa6ac88f788aab7148618c310a8a99b644</field>
    <field name="keywords">PASSED video::encoder_t::PASSED video::encoder_t PASSED video::encoder_t::PASSED video::encoder_t</field>
    <field name="text">Indicates the encoder is supported</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::encoder_t::REF_FRAMES_RESTRICT</field>
    <field name="url">structvideo_1_1encoder__t.html#aba3b88f6150e12474bc396675c2e028fa9b9b156ea04a99773bbad23b96639b87</field>
    <field name="keywords">REF_FRAMES_RESTRICT video::encoder_t::REF_FRAMES_RESTRICT video::encoder_t REF_FRAMES_RESTRICT video::encoder_t::REF_FRAMES_RESTRICT video::encoder_t</field>
    <field name="text">Set maximum reference frames</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::encoder_t::YUV444</field>
    <field name="url">structvideo_1_1encoder__t.html#aba3b88f6150e12474bc396675c2e028faab4947eb7c0a2892f905efb4b9bc87a0</field>
    <field name="keywords">YUV444 video::encoder_t::YUV444 video::encoder_t YUV444 video::encoder_t::YUV444 video::encoder_t</field>
    <field name="text">YUV 4 4 4 support</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::encoder_t::MAX_FLAGS</field>
    <field name="url">structvideo_1_1encoder__t.html#aba3b88f6150e12474bc396675c2e028faca38e2782440d2ec4d6b094502e53167</field>
    <field name="keywords">MAX_FLAGS video::encoder_t::MAX_FLAGS video::encoder_t MAX_FLAGS video::encoder_t::MAX_FLAGS video::encoder_t</field>
    <field name="text">Maximum number of flags</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::encoder_t::codec_t</field>
    <field name="url">structvideo_1_1encoder__t_1_1codec__t.html</field>
    <field name="keywords">codec_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::encoder_t::option_t</field>
    <field name="url">structvideo_1_1encoder__t_1_1option__t.html</field>
    <field name="keywords">option_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::hdr_info_raw_t</field>
    <field name="url">structvideo_1_1hdr__info__raw__t.html</field>
    <field name="keywords">hdr_info_raw_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::packet_raw_avcodec</field>
    <field name="url">structvideo_1_1packet__raw__avcodec.html</field>
    <field name="keywords">packet_raw_avcodec</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::packet_raw_generic</field>
    <field name="url">structvideo_1_1packet__raw__generic.html</field>
    <field name="keywords">packet_raw_generic</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::packet_raw_t</field>
    <field name="url">structvideo_1_1packet__raw__t.html</field>
    <field name="keywords">packet_raw_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::packet_raw_t::replace_t</field>
    <field name="url">structvideo_1_1packet__raw__t_1_1replace__t.html</field>
    <field name="keywords">replace_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::sunshine_colorspace_t</field>
    <field name="url">structvideo_1_1sunshine__colorspace__t.html</field>
    <field name="keywords">sunshine_colorspace_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::sync_session_ctx_t</field>
    <field name="url">structvideo_1_1sync__session__ctx__t.html</field>
    <field name="keywords">sync_session_ctx_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">video::sync_session_t</field>
    <field name="url">structvideo_1_1sync__session__t.html</field>
    <field name="keywords">sync_session_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">winrt::IDirect3DDxgiInterfaceAccess</field>
    <field name="url">structwinrt_1_1IDirect3DDxgiInterfaceAccess.html</field>
    <field name="keywords">IDirect3DDxgiInterfaceAccess</field>
    <field name="text">Windows structures sometimes have compile-time GUIDs GCC supports this but in a roundabout way If WINRT_IMPL_HAS_DECLSPEC_UUID is true then the compiler supports adding this attribute to a struct For example Visual Studio If not then MinGW GCC has a workaround to assign a GUID to a structure</field>
  </doc>
  <doc>
    <field name="type">struct</field>
    <field name="name">wl::img_t</field>
    <field name="url">structwl_1_1img__t.html</field>
    <field name="keywords">img_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">sync.h</field>
    <field name="url">sync_8h.html</field>
    <field name="keywords">sync.h</field>
    <field name="text">Declarations for synchronization utilities</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">sync.h</field>
    <field name="url">sync_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">sync_util</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">sync.h</field>
    <field name="url">sync_8h_source.html#l00015</field>
    <field name="keywords"></field>
    <field name="text">sync_t value_t T mutex_t M std::lock_guard&lt;mutex_t&gt; lock std::lock_guard _lock Args sync_t Args args raw std::forward&lt;Args&gt; args sync_t operator= sync_t other std::lock _lock other _lock raw std::move other raw _lock unlock other _lock unlock sync_t operator= sync_t other std::lock _lock other _lock raw other raw _lock unlock other _lock unlock sync_t operator= V val lg lock raw val sync_t operator= value_t val lg lock raw val sync_t operator= value_t val lg lock raw std::move val value_t operator-&gt; raw value_t operator* raw value_t operator* raw value_t raw mutex_t _lock</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">system_tray.cpp</field>
    <field name="url">system__tray_8cpp.html</field>
    <field name="keywords">system_tray.cpp</field>
    <field name="text">Definitions for the system tray icon and notification system</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">system_tray.h</field>
    <field name="url">system__tray_8h.html</field>
    <field name="keywords">system_tray.h</field>
    <field name="text">Declarations for the system tray icon and notification system</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">system_tray.h</field>
    <field name="url">system__tray_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">system_tray tray_open_ui_cb tray_menu item tray_donate_github_cb tray_menu item tray_donate_patreon_cb tray_menu item tray_donate_paypal_cb tray_menu item tray_reset_display_device_config_cb tray_menu item tray_restart_cb tray_menu item tray_quit_cb tray_menu item system_tray run_tray end_tray update_tray_playing std::string app_name update_tray_pausing std::string app_name update_tray_stopped std::string app_name update_tray_require_pin</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">task_pool.h</field>
    <field name="url">task__pool_8h.html</field>
    <field name="keywords">task_pool.h</field>
    <field name="text">Declarations for the task pool system</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">task_pool.h</field>
    <field name="url">task__pool_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">task_pool_util</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">task_pool.h</field>
    <field name="url">task__pool_8h_source.html#l00024</field>
    <field name="keywords"></field>
    <field name="text">_ImplBase _ImplBase run</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">task_pool.h</field>
    <field name="url">task__pool_8h_source.html#l00034</field>
    <field name="keywords"></field>
    <field name="text">_Impl _ImplBase Function _func _Impl Function f _func std::forward&lt;Function&gt; f run _func</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">task_pool.h</field>
    <field name="url">task__pool_8h_source.html#l00047</field>
    <field name="keywords"></field>
    <field name="text">TaskPool std::unique_ptr&lt;_ImplBase&gt; __task _ImplBase task_id_t std::chrono::steady_clock::time_point __time_point</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">task_pool.h</field>
    <field name="url">task__pool_8h_source.html#l00055</field>
    <field name="keywords"></field>
    <field name="text">timer_task_t task_id_t task_id std::future&lt;R&gt; future timer_task_t task_id_t task_id std::future&lt;R&gt; future task_id task_id future std::move future std::deque&lt;__task&gt; _tasks std::vector&lt;std::pair&lt;__time_point, __task&gt; _timer_tasks std::mutex _task_mutex TaskPool TaskPool TaskPool other _tasks std::move other _tasks _timer_tasks std::move other _timer_tasks TaskPool operator= TaskPool other std::swap _tasks other _tasks std::swap _timer_tasks other _timer_tasks Function Args push Function newTask Args args std::is_invocable_v Function Args __return std::invoke_result_t Function Args task_t std::packaged_task __return bind task std::forward&lt;Function&gt; newTask tuple_args std::make_tuple std::forward&lt;Args&gt; args std::apply task std::move tuple_args task_t task std::move bind future task get_future std::lock_guard&lt;std::mutex&gt; lg _task_mutex _tasks emplace_back toRunnable std::move task future pushDelayed std::pair&lt;__time_point, __task&gt; task std::lock_guard lg _task_mutex it _timer_tasks cbegin it _timer_tasks cend it std::get&lt;0&gt; it task first _timer_tasks emplace it task first std::move task second Function X Y Args</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">task_pool.h</field>
    <field name="url">task__pool_8h_source.html#l00124</field>
    <field name="keywords"></field>
    <field name="text">pushDelayed Function newTask std::chrono::duration&lt;X, Y&gt; duration Args args std::is_invocable_v Function Args __return std::invoke_result_t Function Args task_t std::packaged_task __return __time_point time_point std::is_floating_point_v&lt;X&gt; time_point std::chrono::steady_clock::now std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt; duration time_point std::chrono::steady_clock::now duration bind task std::forward&lt;Function&gt; newTask tuple_args std::make_tuple std::forward&lt;Args&gt; args std::apply task std::move tuple_args task_t task std::move bind future task get_future runnable toRunnable std::move task task_id_t task_id runnable pushDelayed std::pair time_point std::move runnable timer_task_t&lt;__return&gt; task_id future</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">task_pool.h</field>
    <field name="url">task__pool_8h_source.html#l00158</field>
    <field name="keywords"></field>
    <field name="text">delay task_id_t task_id std::chrono::duration&lt;X, Y&gt; duration std::lock_guard&lt;std::mutex&gt; lg _task_mutex it _timer_tasks begin it _timer_tasks cend it __task task std::get&lt;1&gt; it task task_id std::get&lt;0&gt; it std::chrono::steady_clock::now duration it _timer_tasks cend prev it it _timer_tasks cbegin std::get&lt;0&gt; it std::get&lt;0&gt; prev std::swap it prev prev it cancel task_id_t task_id std::lock_guard lg _task_mutex it _timer_tasks begin it _timer_tasks cend it __task task std::get&lt;1&gt; it task task_id _timer_tasks erase it std::optional&lt;std::pair&lt;__time_point, __task&gt; pop task_id_t task_id std::lock_guard lg _task_mutex pos std::find_if std::begin _timer_tasks std::end _timer_tasks task_id t t second get task_id pos std::end _timer_tasks std::nullopt std::move pos std::optional&lt;__task&gt; pop std::lock_guard lg _task_mutex _tasks empty __task task std::move _tasks front _tasks pop_front task _timer_tasks empty std::get&lt;0&gt; _timer_tasks back std::chrono::steady_clock::now __task task std::move std::get&lt;1&gt; _timer_tasks back _timer_tasks pop_back task std::nullopt ready std::lock_guard&lt;std::mutex&gt; lg _task_mutex _tasks empty _timer_tasks empty std::get&lt;0&gt; _timer_tasks back std::chrono::steady_clock::now std::optional&lt;__time_point&gt; next std::lock_guard&lt;std::mutex&gt; lg _task_mutex _timer_tasks empty std::nullopt std::get&lt;0&gt; _timer_tasks back std::unique_ptr&lt;_ImplBase&gt; toRunnable Function f std::make_unique&lt;_Impl&lt;Function&gt; std::forward&lt;Function &amp;&amp;&gt; f</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">thread_pool.h</field>
    <field name="url">thread__pool_8h.html</field>
    <field name="keywords">thread_pool.h</field>
    <field name="text">Declarations for the thread pool system</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">thread_pool.h</field>
    <field name="url">thread__pool_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">thread_pool_util</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">thread_pool.h</field>
    <field name="url">thread__pool_8h_source.html#l00017</field>
    <field name="keywords"></field>
    <field name="text">ThreadPool task_pool_util::TaskPool TaskPool::__task __task std::vector&lt;std::thread&gt; _thread std::condition_variable _cv std::mutex _lock _continue ThreadPool _continue ThreadPool threads _thread threads _continue t _thread t std::thread ThreadPool::_main _continue stop join Function Args push Function newTask Args args std::lock_guard lg _lock future TaskPool::push std::forward&lt;Function&gt; newTask std::forward&lt;Args&gt; args _cv notify_one future pushDelayed std::pair&lt;__time_point, __task&gt; task std::lock_guard lg _lock TaskPool::pushDelayed std::move task Function X Y Args pushDelayed Function newTask std::chrono::duration&lt;X, Y&gt; duration Args args std::lock_guard lg _lock future TaskPool::pushDelayed std::forward&lt;Function&gt; newTask duration std::forward&lt;Args&gt; args _cv notify_all future start threads _continue _thread resize threads t _thread t std::thread ThreadPool::_main stop std::lock_guard lg _lock _continue _cv notify_all join t _thread t join _main _continue task pop run std::unique_lock uniq_lock _lock ready _continue tp next _cv wait_until uniq_lock tp _cv wait uniq_lock task pop run</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">thread_safe.h</field>
    <field name="url">thread__safe_8h.html</field>
    <field name="keywords">thread_safe.h</field>
    <field name="text">Declarations for thread-safe data structures</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">thread_safe.h</field>
    <field name="url">thread__safe_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">safe</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">thread_safe.h</field>
    <field name="url">thread__safe_8h_source.html#l00021</field>
    <field name="keywords"></field>
    <field name="text">event_t status_t util::optional_t&lt;T&gt; Args raise Args args std::lock_guard lg _lock _continue std::is_same_v&lt;std::optional&lt;T&gt; status_t _status std::make_optional&lt;T&gt; std::forward&lt;Args&gt; args _status status_t std::forward&lt;Args&gt; args _cv notify_all status_t pop std::unique_lock ul _lock _continue util::false_v&lt;status_t&gt; _status _cv wait ul _continue util::false_v&lt;status_t&gt; val std::move _status _status util::false_v&lt;status_t&gt; val status_t pop std::chrono::duration&lt;Rep, Period&gt; delay std::unique_lock ul _lock _continue util::false_v&lt;status_t&gt; _status _continue _cv wait_for ul delay std::cv_status::timeout util::false_v&lt;status_t&gt; val std::move _status _status util::false_v&lt;status_t&gt; val status_t view std::unique_lock ul _lock _continue util::false_v&lt;status_t&gt; _status _cv wait ul _continue util::false_v&lt;status_t&gt; _status status_t view std::chrono::duration&lt;Rep, Period&gt; delay std::unique_lock ul _lock _continue util::false_v&lt;status_t&gt; _status _continue _cv wait_for ul delay std::cv_status::timeout util::false_v&lt;status_t&gt; _status peek _continue bool _status stop std::lock_guard lg _lock _continue _cv notify_all reset std::lock_guard lg _lock _continue _status util::false_v&lt;status_t&gt; nodiscard running _continue _continue status_t _status util::false_v&lt;status_t&gt; std::condition_variable _cv std::mutex _lock</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">thread_safe.h</field>
    <field name="url">thread__safe_8h_source.html#l00152</field>
    <field name="keywords"></field>
    <field name="text">alarm_raw_t status_t util::optional_t&lt;T&gt; ring status_t status std::lock_guard lg _lock _status status _rang _cv notify_one ring status_t status std::lock_guard lg _lock _status std::move status _rang _cv notify_one wait_for std::chrono::duration&lt;Rep, Period&gt; rel_time std::unique_lock ul _lock _cv wait_for ul rel_time _rang wait_for std::chrono::duration&lt;Rep, Period&gt; rel_time Pred pred std::unique_lock ul _lock _cv wait_for ul rel_time pred _rang pred wait_until std::chrono::duration&lt;Rep, Period&gt; rel_time std::unique_lock ul _lock _cv wait_until ul rel_time _rang wait_until std::chrono::duration&lt;Rep, Period&gt; rel_time Pred pred std::unique_lock ul _lock _cv wait_until ul rel_time pred _rang pred wait std::unique_lock ul _lock _cv wait ul _rang wait Pred pred std::unique_lock ul _lock _cv wait ul pred _rang pred status_t status _status status_t status _status reset _status status_t _rang std::mutex _lock std::condition_variable _cv status_t _status util::false_v&lt;status_t&gt; _rang alarm_t std::shared_ptr&lt;alarm_raw_t&lt;T&gt; alarm_t&lt;T&gt; make_alarm std::make_shared&lt;alarm_raw_t&lt;T&gt;</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">thread_safe.h</field>
    <field name="url">thread__safe_8h_source.html#l00253</field>
    <field name="keywords"></field>
    <field name="text">queue_t status_t util::optional_t&lt;T&gt; queue_t std::uint32_t max_elements _max_elements max_elements Args raise Args args std::lock_guard ul _lock _continue _queue size _max_elements _queue clear _queue emplace_back std::forward&lt;Args&gt; args _cv notify_all peek _continue _queue empty status_t pop std::chrono::duration&lt;Rep, Period&gt; delay std::unique_lock ul _lock _continue util::false_v&lt;status_t&gt; _queue empty _continue _cv wait_for ul delay std::cv_status::timeout util::false_v&lt;status_t&gt; val std::move _queue front _queue erase std::begin _queue val status_t pop std::unique_lock ul _lock _continue util::false_v&lt;status_t&gt; _queue empty _cv wait ul _continue util::false_v&lt;status_t&gt; val std::move _queue front _queue erase std::begin _queue val std::vector&lt;T&gt; unsafe _queue stop std::lock_guard lg _lock _continue _cv notify_all nodiscard running _continue _continue std::uint32_t _max_elements std::mutex _lock std::condition_variable _cv std::vector&lt;T&gt; _queue</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">thread_safe.h</field>
    <field name="url">thread__safe_8h_source.html#l00350</field>
    <field name="keywords"></field>
    <field name="text">shared_t element_type T construct_f std::function int element_type destruct_f std::function void element_type</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">thread_safe.h</field>
    <field name="url">thread__safe_8h_source.html#l00357</field>
    <field name="keywords"></field>
    <field name="text">ptr_t shared_t owner ptr_t owner ptr_t shared_t owner owner owner ptr_t ptr_t ptr owner ptr owner ptr owner ptr_t ptr_t ptr owner ptr owner owner tmp ptr owner ref tmp owner ptr_t operator= ptr_t ptr ptr owner release std::move ptr owner ref ptr_t operator= ptr_t ptr owner release std::swap owner ptr owner owner release bool owner release std::lock_guard lg owner _lock owner _count owner _destruct get owner element_type get element_type owner _object_buf data element_type operator-&gt; element_type owner _object_buf data shared_t FC fc FD fd _construct std forward FC fc _destruct std forward FD fd nodiscard ptr_t ref std::lock_guard lg _lock _count _object_buf data element_type _construct element_type _object_buf data ptr_t _count safe::shared_t::ptr_t construct_f _construct destruct_f _destruct std::array std::uint8_t element_type _object_buf std::uint32_t _count std::mutex _lock make_shared F_Construct fc F_Destruct fd safe::shared_t&lt;T&gt; std::forward&lt;F_Construct&gt; fc std::forward&lt;F_Destruct&gt; fd signal_t safe::event_t&lt;bool&gt; safe::mail_raw_t mail_t std::shared_ptr&lt;mail_raw_t&gt; cleanup safe::mail_raw_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">thread_safe.h</field>
    <field name="url">thread__safe_8h_source.html#l00480</field>
    <field name="keywords"></field>
    <field name="text">post_t T Args post_t mail_t mail Args args T std::forward&lt;Args&gt; args mail std::move mail mail_t mail cleanup mail get lock std::weak_ptr&lt;void&gt; wp std::reinterpret_pointer_cast&lt;typename T::element_type&gt; wp lock</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">thread_safe.h</field>
    <field name="url">thread__safe_8h_source.html#l00500</field>
    <field name="keywords"></field>
    <field name="text">mail_raw_t std::enable_shared_from_this event_t std::shared_ptr&lt;post_t&lt;event_t&lt;T&gt; queue_t std::shared_ptr&lt;post_t&lt;queue_t&lt;T&gt; event_t&lt;T&gt; event std::string_view std::lock_guard lg mutex it id_to_post find it std::end id_to_post lock&lt;event_t&lt;T&gt; it second post std::make_shared&lt;typename event_t&lt;T&gt;::element_type shared_from_this id_to_post emplace std::pair std::string std::weak_ptr&lt;void&gt; std::string post post queue_t&lt;T&gt; queue std::string_view std::lock_guard lg mutex it id_to_post find it std::end id_to_post lock&lt;queue_t&lt;T&gt; it second post std::make_shared&lt;typename queue_t&lt;T&gt;::element_type shared_from_this id_to_post emplace std::pair std::string std::weak_ptr&lt;void&gt; std::string post post cleanup std::lock_guard lg mutex it std::begin id_to_post it std::end id_to_post it weak it second weak expired id_to_post erase it std::mutex mutex std::map&lt;std::string, std::weak_ptr&lt;void&gt; std::less&lt;&gt; id_to_post cleanup mail_raw_t mail mail cleanup</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">Todo List</field>
    <field name="url">todo.html</field>
    <field name="keywords">Todo List</field>
    <field name="text">Todo List File confighttp cpp Authentication better handling of routes common to nvhttp cleanup Member confighttp getFaviconImage resp_https_t response req_https_t request combine function with getSunshineLogoImage and possibly getNodeModules use mime_types map Member confighttp getIndexPage resp_https_t response req_https_t request combine these functions into a single function that accepts the page i.e Member confighttp getSunshineLogoImage resp_https_t response req_https_t request combine function with getFaviconImage and possibly getNodeModules use mime_types map Member MULTICLICK_DELAY_MS 5 0 0 Make this configurable Member net map_port int port Ensure port is not already in use by another application Member system_tray run_tray macOS requires that UI elements be created on the main thread so the system tray is not currently implemented for macOS</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">undo_data.cpp</field>
    <field name="url">undo__data_8cpp.html</field>
    <field name="keywords">undo_data.cpp</field>
    <field name="text">Definitions for undoing changes to nvidia preferences</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">undo_data.h</field>
    <field name="url">undo__data_8h.html</field>
    <field name="keywords">undo_data.h</field>
    <field name="text">Declarations for undoing changes to nvidia preferences</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">undo_data.h</field>
    <field name="url">undo__data_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvprefs</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">undo_data.h</field>
    <field name="url">undo__data_8h_source.html#l00015</field>
    <field name="keywords"></field>
    <field name="text">undo_data_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">undo_data.h</field>
    <field name="url">undo__data_8h_source.html#l00017</field>
    <field name="keywords"></field>
    <field name="text">data_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">undo_data.h</field>
    <field name="url">undo__data_8h_source.html#l00018</field>
    <field name="keywords"></field>
    <field name="text">opengl_swapchain_t uint32_t our_value std::optional&lt;uint32_t&gt; undo_value std::optional&lt;opengl_swapchain_t&gt; opengl_swapchain set_opengl_swapchain uint32_t our_value std::optional&lt;uint32_t&gt; undo_value std::optional&lt;data_t::opengl_swapchain_t&gt; get_opengl_swapchain std::string write read std::vector&lt;char&gt; buffer merge undo_data_t newer_data data_t data</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">undo_file.cpp</field>
    <field name="url">undo__file_8cpp.html</field>
    <field name="keywords">undo_file.cpp</field>
    <field name="text">Definitions for the nvidia undo file</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">undo_file.h</field>
    <field name="url">undo__file_8h.html</field>
    <field name="keywords">undo_file.h</field>
    <field name="text">Declarations for the nvidia undo file</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">undo_file.h</field>
    <field name="url">undo__file_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">nvprefs</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">undo_file.h</field>
    <field name="url">undo__file_8h_source.html#l00016</field>
    <field name="keywords"></field>
    <field name="text">undo_file_t std::optional&lt;undo_file_t&gt; open_existing_file std::filesystem::path file_path access_denied std::optional&lt;undo_file_t&gt; create_new_file std::filesystem::path file_path delete_file write_undo_data undo_data_t undo_data std::optional&lt;undo_data_t&gt; read_undo_data undo_file_t safe_handle file_handle</field>
  </doc>
  <doc>
    <field name="type">union</field>
    <field name="name">uuid_util::uuid_t</field>
    <field name="url">unionuuid__util_1_1uuid__t.html</field>
    <field name="keywords">uuid_t</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">upnp.cpp</field>
    <field name="url">upnp_8cpp.html</field>
    <field name="keywords">upnp.cpp</field>
    <field name="text">Definitions for UPnP port mapping</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">upnp.h</field>
    <field name="url">upnp_8h.html</field>
    <field name="keywords">upnp.h</field>
    <field name="text">Declarations for UPnP port mapping</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">upnp.h</field>
    <field name="url">upnp_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">upnp INET6_ADDRESS_STRLEN IPv4 IPv6 PORT_MAPPING_LIFETIME s REFRESH_INTERVAL s device_t util::safe_ptr&lt;UPNPDev, freeUPNPDevlist&gt; KITTY_USING_MOVE_T upnp::urls_t UPNPUrls FreeUPNPUrls el</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">upnp.h</field>
    <field name="url">upnp_8h_source.html#l00027</field>
    <field name="keywords"></field>
    <field name="text">UPNP_GetValidIGDStatus device_t device urls_t urls IGDdatas data std::array&lt;char, INET6_ADDRESS_STRLEN&gt; lan_addr nodiscard std::unique_ptr&lt;platf::deinit_t&gt; start</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h.html</field>
    <field name="keywords">utility.h</field>
    <field name="text">Declarations for utility functions</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TUPLE_2D_REF</field>
    <field name="args">(a, b, expr)</field>
    <field name="url">utility_8h.html#a0d4bb3c508de705c51b2ddf573b9596b</field>
    <field name="keywords"></field>
    <field name="text">a _ b expr a std::get&lt;0&gt; a _ b b std::get&lt;1&gt; a _ b</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KITTY_DECL_CONSTR</field>
    <field name="args">(x)</field>
    <field name="url">utility_8h.html#a3e1d1c806d4ae4fcd71fd22e23863e9e</field>
    <field name="keywords"></field>
    <field name="text">x x noexcept default x operator x noexcept default x</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TUPLE_EL</field>
    <field name="args">(a, b, expr)</field>
    <field name="url">utility_8h.html#a46ce4c783c4fe56865e4c95aad270479</field>
    <field name="keywords"></field>
    <field name="text">expr a _ expr a std::get&lt;b&gt; a _</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KITTY_WHILE_LOOP</field>
    <field name="args">(x, y, z)</field>
    <field name="url">utility_8h.html#a58635bb32230035d7c3014460fee150a</field>
    <field name="keywords"></field>
    <field name="text">x y z</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KITTY_DEFAULT_CONSTR_MOVE</field>
    <field name="args">(x)</field>
    <field name="url">utility_8h.html#a66233fcfcc7474a23138ba1f50beaba3</field>
    <field name="keywords"></field>
    <field name="text">x x noexcept default x operator x noexcept default</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">util::optional_t</field>
    <field name="url">utility_8h.html#a66b2cb91837698c0f69297f557a6137a</field>
    <field name="keywords"></field>
    <field name="text">either_t std::is_same_v&lt;T, bool&gt; is_pointer_v&lt;T&gt; T std::optional&lt;T&gt;</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TUPLE_EL_REF</field>
    <field name="args">(a, b, expr)</field>
    <field name="url">utility_8h.html#a838ada6fb23c49f50b130a81592dca50</field>
    <field name="keywords"></field>
    <field name="text">a std::get&lt;b&gt; expr</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KITTY_DEFAULT_CONSTR</field>
    <field name="args">(x)</field>
    <field name="url">utility_8h.html#a8d455448d1a500de1f9469ba17cddd97</field>
    <field name="keywords"></field>
    <field name="text">KITTY_DEFAULT_CONSTR_MOVE x x x operator= x</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TUPLE_3D_REF</field>
    <field name="args">(a, b, c, expr)</field>
    <field name="url">utility_8h.html#a9c6e6cf34a9faec1596a6a9423521ad2</field>
    <field name="keywords"></field>
    <field name="text">a _ b _ c expr a std::get&lt;0&gt; a _ b _ c b std::get&lt;1&gt; a _ b _ c c std::get&lt;2&gt; a _ b _ c</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">util::is_pointer_v</field>
    <field name="url">utility_8h.html#a9d949684a0760be716704201fa0de6b7</field>
    <field name="keywords"></field>
    <field name="text">instantiation_of_v&lt;std::unique_ptr, T&gt; instantiation_of_v&lt;std::shared_ptr, T&gt; instantiation_of_v&lt;uniq_ptr, T&gt; std::is_pointer_v&lt;T&gt;</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TUPLE_2D</field>
    <field name="args">(a, b, expr)</field>
    <field name="url">utility_8h.html#ab8277a72c77b2bbe1841dda7a84035cc</field>
    <field name="keywords"></field>
    <field name="text">expr a _ b expr a std::get&lt;0&gt; a _ b b std::get&lt;1&gt; a _ b</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TUPLE_3D</field>
    <field name="args">(a, b, c, expr)</field>
    <field name="url">utility_8h.html#ad52d8286a156b4cedd47344c9efefac1</field>
    <field name="keywords"></field>
    <field name="text">expr a _ b _ c expr a std::get&lt;0&gt; a _ b _ c b std::get&lt;1&gt; a _ b _ c c std::get&lt;2&gt; a _ b _ c</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">KITTY_DEFAULT_CONSTR_MOVE_THROW</field>
    <field name="args">(x)</field>
    <field name="url">utility_8h.html#af953f5495bd2edf6ad754fc2f99bf6fb</field>
    <field name="keywords"></field>
    <field name="text">x x x operator= x</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00027</field>
    <field name="keywords"></field>
    <field name="text">argument_type</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00030</field>
    <field name="keywords"></field>
    <field name="text">argument_type T U U type util X Y</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00128</field>
    <field name="keywords"></field>
    <field name="text">__instantiation_of std::false_type X Y</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00131</field>
    <field name="keywords"></field>
    <field name="text">__instantiation_of X X Y std::true_type X T Y instantiation_of_v __instantiation_of X T Y</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00137</field>
    <field name="keywords"></field>
    <field name="text">__either</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00140</field>
    <field name="keywords"></field>
    <field name="text">__either true X Y type X</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00145</field>
    <field name="keywords"></field>
    <field name="text">__either false X Y type Y either_t __either&lt;V, X, Y&gt;::type Ts</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00153</field>
    <field name="keywords"></field>
    <field name="text">overloaded Ts Ts::operator Ts overloaded Ts overloaded Ts</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00160</field>
    <field name="keywords"></field>
    <field name="text">FailGuard FailGuard FailGuard T f _func std::forward&lt;T&gt; f FailGuard FailGuard other _func std::move other _func failure other failure other failure FailGuard FailGuard FailGuard operator= FailGuard FailGuard operator= FailGuard other failure _func disable failure failure T _func nodiscard fail_guard T f FailGuard&lt;T&gt; std::forward&lt;T&gt; f append_struct std::vector&lt;uint8_t&gt; buf T _struct data_len _struct buf reserve data_len data uint8_t _struct x x data_len x buf push_back data x</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00215</field>
    <field name="keywords"></field>
    <field name="text">Hex T elem_type _bits _hex elem_type Hex elem_type elem rev rev uint8_t data uint8_t elem elem_type it begin it cend it _bits data it _bits data uint8_t data uint8_t elem it begin it cend it _bits data it _bits data begin _hex end _hex elem_type begin _hex end _hex elem_type cbegin _hex cend _hex elem_type std::string to_string begin end std::string_view to_string_view begin elem_type Hex&lt;T&gt; hex T elem rev Hex&lt;T&gt; elem rev std::string log_hex T value Hex&lt;T&gt; value to_string std::string hex_vec It begin It end rev str_size std::distance begin end std::string hex hex resize str_size _bits rev it std::begin hex it std::end hex it _bits uint8_t begin it _bits uint8_t begin end it std::begin hex it std::end hex it _bits uint8_t end it _bits uint8_t end hex std::string hex_vec C c rev hex_vec std::begin c std::end c rev T from_hex std::string_view hex rev std::uint8_t buf T shift_bit is_convertable ch isdigit ch ch shift_bit ch ch buf_size std::count_if std::begin hex std::end hex is_convertable padding T buf_size data hex data hex size convert ch std::uint8_t ch ch std::uint8_t ch std::uint8_t ch char std::fill_n buf buf_size padding std::for_each_n buf buf_size el is_convertable data data std::uint8_t ch_r convert data is_convertable data data std::uint8_t ch_l convert data el ch_l ch_r rev std::reverse std::begin buf std::end buf T buf std::string from_hex_vec std::string hex rev std::string buf shift_bit is_convertable ch isdigit ch ch shift_bit ch ch buf_size std::count_if std::begin hex std::end hex is_convertable buf resize buf_size data hex data hex size convert ch std::uint8_t ch ch std::uint8_t ch std::uint8_t ch char el buf is_convertable data data std::uint8_t ch_r convert data is_convertable data data std::uint8_t ch_l convert data el ch_l ch_r rev std::reverse std::begin buf std::end buf buf</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00457</field>
    <field name="keywords"></field>
    <field name="text">hash value_type T std::size_t operator() value_type value p value std::hash&lt;std::string_view&gt; std::string_view p value_type enm T val std::underlying_type_t&lt;T&gt; std::underlying_type_t&lt;T&gt; val enm T val std::underlying_type_t&lt;T&gt; std::underlying_type_t&lt;T&gt; val std::int64_t from_chars begin end begin end std::int64_t res std::int64_t mul begin end res std::int64_t end mul mul begin res std::int64_t begin mul res std::int64_t from_view std::string_view number from_chars std::begin number std::end number</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00499</field>
    <field name="keywords"></field>
    <field name="text">Either std::variant std::variant std::monostate X Y has_left std::holds_alternative&lt;X&gt; has_right std::holds_alternative&lt;Y&gt; X left std::get&lt;X&gt; Y right std::get&lt;Y&gt; X left std::get&lt;X&gt; Y right std::get&lt;Y&gt;</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00530</field>
    <field name="keywords"></field>
    <field name="text">uniq_ptr element_type T pointer element_type const_pointer element_type deleter_type D uniq_ptr _p uniq_ptr std::nullptr_t _p uniq_ptr uniq_ptr other uniq_ptr operator= uniq_ptr other uniq_ptr V p _p p std::is_same_v&lt;element_type, void&gt; std::is_same_v&lt;element_type, V&gt; std::is_base_of_v&lt;element_type, V&gt; uniq_ptr std::unique_ptr&lt;V, deleter_type&gt; uniq _p uniq release std::is_same_v&lt;element_type, void&gt; std::is_same_v&lt;T, V&gt; std::is_base_of_v&lt;element_type, V&gt; uniq_ptr uniq_ptr&lt;V, deleter_type&gt; other _p other release std::is_same_v&lt;element_type, void&gt; std::is_same_v&lt;T, V&gt; std::is_base_of_v&lt;element_type, V&gt; uniq_ptr operator= uniq_ptr&lt;V, deleter_type&gt; other std::is_same_v&lt;element_type, void&gt; std::is_same_v&lt;T, V&gt; std::is_base_of_v&lt;element_type, V&gt; reset other release uniq_ptr operator= std::unique_ptr&lt;V, deleter_type&gt; uniq std::is_same_v&lt;element_type, void&gt; std::is_same_v&lt;T, V&gt; std::is_base_of_v&lt;element_type, V&gt; reset uniq release reset reset pointer p pointer _p _deleter _p _p p pointer release tmp _p _p tmp pointer get _p const_pointer get _p std::add_lvalue_reference_t&lt;element_type const&gt; operator* _p std::add_lvalue_reference_t&lt;element_type&gt; operator* _p const_pointer operator-&gt; _p pointer operator-&gt; _p pointer operator&amp; _p pointer operator&amp; _p deleter_type get_deleter _deleter deleter_type get_deleter _deleter bool _p pointer _p deleter_type _deleter operator== uniq_ptr&lt;T1, D1&gt; x uniq_ptr&lt;T2, D2&gt; y x get y get operator!= uniq_ptr&lt;T1, D1&gt; x uniq_ptr&lt;T2, D2&gt; y x get y get operator== std::unique_ptr&lt;T1, D1&gt; x util::uniq_ptr&lt;T2, D2&gt; y x get y get operator!= std::unique_ptr&lt;T1, D1&gt; x util::uniq_ptr&lt;T2, D2&gt; y x get y get operator== util::uniq_ptr&lt;T1, D1&gt; x std::unique_ptr&lt;T1, D1&gt; y x get y get operator!= util::uniq_ptr&lt;T1, D1&gt; x std::unique_ptr&lt;T1, D1&gt; y x get y get operator== util::uniq_ptr&lt;T, D&gt; x std::nullptr_t bool x operator!= util::uniq_ptr&lt;T, D&gt; x std::nullptr_t x operator== std::nullptr_t util::uniq_ptr&lt;T, D&gt; y bool y operator!= std::nullptr_t util::uniq_ptr&lt;T, D&gt; y y shared_t std::shared_ptr&lt;typename P::element_type&gt; shared_t&lt;P&gt; make_shared T pointer shared_t&lt;P&gt; typename P::pointer pointer P::deleter_type</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00709</field>
    <field name="keywords"></field>
    <field name="text">wrap_ptr element_type T pointer element_type const_pointer element_type reference element_type const_reference element_type wrap_ptr _own_ptr _p wrap_ptr pointer p _own_ptr _p p wrap_ptr std::unique_ptr&lt;element_type&gt; uniq_p _own_ptr _p uniq_p release wrap_ptr wrap_ptr other _own_ptr other _own_ptr _p other _p other _own_ptr wrap_ptr operator= wrap_ptr other _own_ptr _p _p other _p _own_ptr other _own_ptr other _own_ptr wrap_ptr operator= std::unique_ptr&lt;V&gt; uniq_ptr std::is_base_of_v&lt;element_type, V&gt; _own_ptr _p uniq_ptr release wrap_ptr operator= pointer p _own_ptr _p _p p _own_ptr _own_ptr _p _own_ptr const_reference operator* _p reference operator* _p const_pointer operator-&gt; _p pointer operator-&gt; _p _own_ptr pointer _p is_pointer_v instantiation_of_v&lt;std::unique_ptr, T&gt; instantiation_of_v&lt;std::shared_ptr, T&gt; instantiation_of_v&lt;uniq_ptr, T&gt; std::is_pointer_v&lt;T&gt;</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00808</field>
    <field name="keywords"></field>
    <field name="text">__false_v</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00811</field>
    <field name="keywords"></field>
    <field name="text">__false_v T std enable_if_t std::nullopt_t value std::nullopt</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00816</field>
    <field name="keywords"></field>
    <field name="text">__false_v T std enable_if_t std::nullptr_t value</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00821</field>
    <field name="keywords"></field>
    <field name="text">__false_v T std enable_if_t value false_v __false_v&lt;T&gt;::value optional_t either_t std::is_same_v&lt;T, bool&gt; is_pointer_v&lt;T&gt; T std::optional&lt;T&gt;</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00835</field>
    <field name="keywords"></field>
    <field name="text">buffer_t buffer_t _els buffer_t buffer_t o _els o _els _buf std::move o _buf o _els buffer_t buffer_t o _els o _els _buf std::make_unique&lt;T[]&gt; _els std::copy o begin o end begin buffer_t operator= buffer_t o std::swap _els o _els std::swap _buf o _buf buffer_t elements _els elements _buf std::make_unique&lt;T[]&gt; elements buffer_t elements T t _els elements _buf std::make_unique&lt;T[]&gt; elements std::fill_n _buf get elements t T operator[] el _buf el T operator[] el _buf el size _els fake_resize std::size_t els _els els T begin _buf get T begin _buf get T end _buf get _els T end _buf get _els _els std::unique_ptr&lt;T[]&gt; _buf T either std::optional&lt;T&gt; l T r l std::move l std::forward&lt;T&gt; r ReturnType Args</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00917</field>
    <field name="keywords"></field>
    <field name="text">Function ReturnType type Args template&lt;class T, class ReturnType, typename Function&lt;ReturnType, T&gt;::type function</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00922</field>
    <field name="keywords"></field>
    <field name="text">Destroy T pointer operator() pointer p function p template&lt;class T, typename Function&lt;void, T *&gt;::type function safe_ptr uniq_ptr&lt;T, Destroy&lt;T *, void, function&gt; template&lt;class T, class ReturnType, typename Function&lt;ReturnType, T *&gt;::type function safe_ptr_v2 uniq_ptr&lt;T, Destroy&lt;T *, ReturnType, function&gt; c_free T p free p dynamic T p p dyn_safe_ptr safe_ptr&lt;T, dynamic&lt;T, void, function&gt; dyn_safe_ptr_v2 safe_ptr&lt;T, dynamic&lt;T, ReturnType, function&gt; c_ptr safe_ptr&lt;T, c_free&lt;T&gt; std::string_view view It begin It end std::string_view begin std::size_t end begin std::string_view view T data std::string_view data T</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00966</field>
    <field name="keywords"></field>
    <field name="text">point_t x y std::ostream operator&lt;&lt; std::ostream os point_t p os p x p y endian</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00977</field>
    <field name="keywords"></field>
    <field name="text">endianness enum little</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00994</field>
    <field name="keywords"></field>
    <field name="text">little</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l00998</field>
    <field name="keywords"></field>
    <field name="text">big little</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l01003</field>
    <field name="keywords"></field>
    <field name="text">endian_helper</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l01006</field>
    <field name="keywords"></field>
    <field name="text">endian_helper T std enable_if_t T big T x endianness&lt;T&gt;::little uint8_t data uint8_t x std::reverse data data x x T little T x endianness&lt;T&gt;::big uint8_t data uint8_t x std::reverse data data x x</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utility.h</field>
    <field name="url">utility_8h_source.html#l01029</field>
    <field name="keywords"></field>
    <field name="text">endian_helper T std enable_if_t T little T x x x endianness&lt;T&gt;::big data uint8_t x std::reverse data data x x T big T x x x endianness&lt;T&gt;::little data uint8_t x std::reverse data data x x little T x endian_helper&lt;T&gt;::little x big T x endian_helper&lt;T&gt;::big x</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">uuid.h</field>
    <field name="url">uuid_8h.html</field>
    <field name="keywords">uuid.h</field>
    <field name="text">Declarations for UUID generation</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">uuid.h</field>
    <field name="url">uuid_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">uuid.h</field>
    <field name="url">uuid_8h_source.html#l00013</field>
    <field name="keywords"></field>
    <field name="text">uuid_util</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">uuid.h</field>
    <field name="url">uuid_8h_source.html#l00014</field>
    <field name="keywords"></field>
    <field name="text">uuid_t std::uint8_t b8 std::uint16_t b16 std::uint32_t b32 std::uint64_t b64 uuid_t generate std::default_random_engine engine std::uniform_int_distribution&lt;std::uint8_t&gt; dist std::numeric_limits&lt;std::uint8_t&gt;::max uuid_t buf el buf b8 el dist engine buf b8 std::uint8_t buf b8 std::uint8_t buf uuid_t generate std::random_device r std::default_random_engine engine r generate engine nodiscard std::string string std::string result result reserve uuid_t hex util::hex hex_view hex to_string_view std::string_view slices hex_view substr hex_view substr hex_view substr hex_view substr last_slice hex_view substr slice slices std::copy std::begin slice std::end slice std::back_inserter result result push_back std::copy std::begin last_slice std::end last_slice std::back_inserter result result operator== uuid_t other b64 other b64 b64 other b64 operator&lt; uuid_t other b64 other b64 b64 other b64 b64 other b64 operator&gt; uuid_t other b64 other b64 b64 other b64 b64 other b64</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">vaapi.cpp</field>
    <field name="url">vaapi_8cpp.html</field>
    <field name="keywords">vaapi.cpp</field>
    <field name="text">Definitions for VA-API hardware accelerated capture</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">va::make_avcodec_encode_device</field>
    <field name="args">(int width, int height, bool vram)</field>
    <field name="url">vaapi_8cpp.html#a4e5fde44943ecb4a777fef78500d7bff</field>
    <field name="keywords">make_avcodec_encode_device va::make_avcodec_encode_device va</field>
    <field name="text">Width Width of the image Height Height of the image offset_x Horizontal offset of the image in the texture offset_y Vertical offset of the image in the texture file_t card The file descriptor of the render device used for encoding Width Width of the image Height Height of the image offset_x Horizontal offset of the image in the texture offset_y Vertical offset of the image in the texture file_t card The file descriptor of the render device used for encoding</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">va::VAAPIDevicePriv</field>
    <field name="url">vaapi_8cpp.html#a60185487ed71a7bfa948642a93fed1b4</field>
    <field name="keywords">VAAPIDevicePriv va::VAAPIDevicePriv va</field>
    <field name="text">This is a private structure of FFmpeg I need this to manually create a VAAPI hardware context xdisplay will not be used internally by FFmpeg</field>
  </doc>
  <doc>
    <field name="type">typedef</field>
    <field name="name">va::AVVAAPIDeviceContext</field>
    <field name="url">vaapi_8cpp.html#a686215033ef68afce5fff5d18ffc4eb3</field>
    <field name="keywords">AVVAAPIDeviceContext va::AVVAAPIDeviceContext va</field>
    <field name="text">VAAPI connection details Allocated as AVHWDeviceContext.hwctx</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">vaapi.h</field>
    <field name="url">vaapi_8h.html</field>
    <field name="keywords">vaapi.h</field>
    <field name="text">Declarations for VA-API hardware accelerated capture</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">vaapi.h</field>
    <field name="url">vaapi_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">egl egl::surface_descriptor_t va std::unique_ptr&lt;platf::avcodec_encode_device_t&gt; make_avcodec_encode_device width height vram std::unique_ptr&lt;platf::avcodec_encode_device_t&gt; make_avcodec_encode_device width height offset_x offset_y vram std::unique_ptr&lt;platf::avcodec_encode_device_t&gt; make_avcodec_encode_device width height file_t card offset_x offset_y vram validate fd</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">video.cpp</field>
    <field name="url">video_8cpp.html</field>
    <field name="keywords">video.cpp</field>
    <field name="text">Definitions for video</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">video::refresh_displays</field>
    <field name="args">(platf::mem_type_e dev_type, std::vector&lt; std::string &gt; &amp;display_names, int &amp;current_display_index)</field>
    <field name="url">video_8cpp.html#a199022d051a438753d31548ba296665e</field>
    <field name="keywords">refresh_displays video::refresh_displays video</field>
    <field name="text">Update the list of display names before or during a stream This will attempt to keep current_display_index pointing at the same display dev_type The encoder device type used for display lookup display_names The list of display names to repopulate current_display_index The current display index or 1 if not yet known</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">video::qsv::profile_hevc_e</field>
    <field name="url">video_8cpp.html#a57a539cccf50a6c5115c988a79f00319</field>
    <field name="keywords">profile_hevc_e video::qsv::profile_hevc_e video::qsv</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::qsv::profile_hevc_e::main_10</field>
    <field name="url">video_8cpp.html#a57a539cccf50a6c5115c988a79f00319a5d4395229383c2ca750c2971d3e725b9</field>
    <field name="keywords">main_10 video::qsv::profile_hevc_e::main_10 main_10 video::qsv::profile_hevc_e::main_10</field>
    <field name="text">Main 1 0 profile</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::qsv::profile_hevc_e::rext</field>
    <field name="url">video_8cpp.html#a57a539cccf50a6c5115c988a79f00319a5f7a1c3e2dcd9a1b420ce94644033be7</field>
    <field name="keywords">rext video::qsv::profile_hevc_e::rext rext video::qsv::profile_hevc_e::rext</field>
    <field name="text">RExt profile</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::qsv::profile_hevc_e::main</field>
    <field name="url">video_8cpp.html#a57a539cccf50a6c5115c988a79f00319afad58de7366495db4650cfefac2fcd61</field>
    <field name="keywords">main video::qsv::profile_hevc_e::main main video::qsv::profile_hevc_e::main</field>
    <field name="text">Main profile</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">video::flag_e</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9</field>
    <field name="keywords">flag_e video::flag_e video</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::PARALLEL_ENCODING</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9a013cfa91bf32eb4b81a69bdbc04df89c</field>
    <field name="keywords">PARALLEL_ENCODING video::PARALLEL_ENCODING video PARALLEL_ENCODING video::PARALLEL_ENCODING video</field>
    <field name="text">Capture and encoding can run concurrently on separate threads</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::CBR_WITH_VBR</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9a19a420c8cde46b89670f409196b06309</field>
    <field name="keywords">CBR_WITH_VBR video::CBR_WITH_VBR video CBR_WITH_VBR video::CBR_WITH_VBR video</field>
    <field name="text">Use a VBR rate control mode to simulate CBR</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::REF_FRAMES_INVALIDATION</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9a2a816cdf1e7346a98d62d09e0ba44747</field>
    <field name="keywords">REF_FRAMES_INVALIDATION video::REF_FRAMES_INVALIDATION video REF_FRAMES_INVALIDATION video::REF_FRAMES_INVALIDATION video</field>
    <field name="text">Support reference frames invalidation</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::YUV444_SUPPORT</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9a4c7652b3a17db2312a107ff86dc3385d</field>
    <field name="keywords">YUV444_SUPPORT video::YUV444_SUPPORT video YUV444_SUPPORT video::YUV444_SUPPORT video</field>
    <field name="text">Encoder may support 4 4 4 chroma sampling depending on hardware</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::ALWAYS_REPROBE</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9a4c88fead0868b1eb24d14bf296ebfd1a</field>
    <field name="keywords">ALWAYS_REPROBE video::ALWAYS_REPROBE video ALWAYS_REPROBE video::ALWAYS_REPROBE video</field>
    <field name="text">This is an encoder of last resort and we want to aggressively probe for a better one</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::RELAXED_COMPLIANCE</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9a5282dbacc19eb027f655c6e4df69da0f</field>
    <field name="keywords">RELAXED_COMPLIANCE video::RELAXED_COMPLIANCE video RELAXED_COMPLIANCE video::RELAXED_COMPLIANCE video</field>
    <field name="text">Use FF_COMPLIANCE_UNOFFICIAL compliance mode</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::ASYNC_TEARDOWN</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9a5f5d197199ab509f69575b866edc266d</field>
    <field name="keywords">ASYNC_TEARDOWN video::ASYNC_TEARDOWN video ASYNC_TEARDOWN video::ASYNC_TEARDOWN video</field>
    <field name="text">Encoder supports async teardown on a different thread</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::DEFAULT</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9a8a3831217fe50c028f050ac883875cba</field>
    <field name="keywords">DEFAULT video::DEFAULT video DEFAULT video::DEFAULT video</field>
    <field name="text">Default flags</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::LIMITED_GOP_SIZE</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9a8c874e01d5d50aead09d7c3792a357b5</field>
    <field name="keywords">LIMITED_GOP_SIZE video::LIMITED_GOP_SIZE video LIMITED_GOP_SIZE video::LIMITED_GOP_SIZE video</field>
    <field name="text">Some encoders don t like it when you have an infinite GOP_SIZE e.g VAAPI</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::SINGLE_SLICE_ONLY</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9ab4fe414eba92bf7ce306310f93c83ebf</field>
    <field name="keywords">SINGLE_SLICE_ONLY video::SINGLE_SLICE_ONLY video SINGLE_SLICE_ONLY video::SINGLE_SLICE_ONLY video</field>
    <field name="text">Never use multiple slices Older intel iGPU s ruin it for everyone else</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::NO_RC_BUF_LIMIT</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9abc1a1476571cd553782737567599710e</field>
    <field name="keywords">NO_RC_BUF_LIMIT video::NO_RC_BUF_LIMIT video NO_RC_BUF_LIMIT video::NO_RC_BUF_LIMIT video</field>
    <field name="text">Don t set rc_buffer_size</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::H264_ONLY</field>
    <field name="url">video_8cpp.html#a5ba42ceefc6028d4a712c59f4c2d18e9ae4e862262baefba5686d42f709cc1d11</field>
    <field name="keywords">H264_ONLY video::H264_ONLY video H264_ONLY video::H264_ONLY video</field>
    <field name="text">When HEVC is too heavy</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">video::nv::profile_h264_e</field>
    <field name="url">video_8cpp.html#a69c40676cd46a74fe1f2ecf354b738c3</field>
    <field name="keywords">profile_h264_e video::nv::profile_h264_e video::nv</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::nv::profile_h264_e::high</field>
    <field name="url">video_8cpp.html#a69c40676cd46a74fe1f2ecf354b738c3a8d966b2253a917086c8604959e152243</field>
    <field name="keywords">high video::nv::profile_h264_e::high high video::nv::profile_h264_e::high</field>
    <field name="text">High profile</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::nv::profile_h264_e::high_444p</field>
    <field name="url">video_8cpp.html#a69c40676cd46a74fe1f2ecf354b738c3af0e67986255b59d4422ae27005e93578</field>
    <field name="keywords">high_444p video::nv::profile_h264_e::high_444p high_444p video::nv::profile_h264_e::high_444p</field>
    <field name="text">High 4 4 4 Predictive profile</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">video::nv::profile_hevc_e</field>
    <field name="url">video_8cpp.html#a8206e43e03f8daa0984fa104304c1afe</field>
    <field name="keywords">profile_hevc_e video::nv::profile_hevc_e video::nv</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::nv::profile_hevc_e::main_10</field>
    <field name="url">video_8cpp.html#a8206e43e03f8daa0984fa104304c1afea5d4395229383c2ca750c2971d3e725b9</field>
    <field name="keywords">main_10 video::nv::profile_hevc_e::main_10 main_10 video::nv::profile_hevc_e::main_10</field>
    <field name="text">Main 1 0 profile</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::nv::profile_hevc_e::rext</field>
    <field name="url">video_8cpp.html#a8206e43e03f8daa0984fa104304c1afea5f7a1c3e2dcd9a1b420ce94644033be7</field>
    <field name="keywords">rext video::nv::profile_hevc_e::rext rext video::nv::profile_hevc_e::rext</field>
    <field name="text">Rext profile</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::nv::profile_hevc_e::main</field>
    <field name="url">video_8cpp.html#a8206e43e03f8daa0984fa104304c1afeafad58de7366495db4650cfefac2fcd61</field>
    <field name="keywords">main video::nv::profile_hevc_e::main main video::nv::profile_hevc_e::main</field>
    <field name="text">Main profile</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">video::qsv::profile_av1_e</field>
    <field name="url">video_8cpp.html#a82e39de6474aaa9fece3fcd31b6e3e52</field>
    <field name="keywords">profile_av1_e video::qsv::profile_av1_e video::qsv</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::qsv::profile_av1_e::high</field>
    <field name="url">video_8cpp.html#a82e39de6474aaa9fece3fcd31b6e3e52a8d966b2253a917086c8604959e152243</field>
    <field name="keywords">high video::qsv::profile_av1_e::high high video::qsv::profile_av1_e::high</field>
    <field name="text">High profile</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::qsv::profile_av1_e::main</field>
    <field name="url">video_8cpp.html#a82e39de6474aaa9fece3fcd31b6e3e52afad58de7366495db4650cfefac2fcd61</field>
    <field name="keywords">main video::qsv::profile_av1_e::main main video::qsv::profile_av1_e::main</field>
    <field name="text">Main profile</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">video::validate_flag_e</field>
    <field name="url">video_8cpp.html#a92cee4f35e5e0dacf79e406caa3b18a9</field>
    <field name="keywords">validate_flag_e video::validate_flag_e video</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::VUI_PARAMS</field>
    <field name="url">video_8cpp.html#a92cee4f35e5e0dacf79e406caa3b18a9ac367b15393f43925b80315c8acb349ec</field>
    <field name="keywords">VUI_PARAMS video::VUI_PARAMS video VUI_PARAMS video::VUI_PARAMS video</field>
    <field name="text">VUI parameters</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">video::qsv::profile_h264_e</field>
    <field name="url">video_8cpp.html#ab2b469539a0f8fc3ab39bcef72a00300</field>
    <field name="keywords">profile_h264_e video::qsv::profile_h264_e video::qsv</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::qsv::profile_h264_e::high</field>
    <field name="url">video_8cpp.html#ab2b469539a0f8fc3ab39bcef72a00300a8d966b2253a917086c8604959e152243</field>
    <field name="keywords">high video::qsv::profile_h264_e::high high video::qsv::profile_h264_e::high</field>
    <field name="text">High profile</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::qsv::profile_h264_e::high_444p</field>
    <field name="url">video_8cpp.html#ab2b469539a0f8fc3ab39bcef72a00300af0e67986255b59d4422ae27005e93578</field>
    <field name="keywords">high_444p video::qsv::profile_h264_e::high_444p high_444p video::qsv::profile_h264_e::high_444p</field>
    <field name="text">High 4 4 4 Predictive profile</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">video::probe_encoders</field>
    <field name="args">()</field>
    <field name="url">video_8cpp.html#ad708de835d1a889edc812ef49cc1dccb</field>
    <field name="keywords">probe_encoders video::probe_encoders video</field>
    <field name="text">Probe encoders and select the preferred encoder This is called once at startup and each time a stream is launched to ensure the best encoder is selected Encoder availability can change at runtime due to all sorts of things from driver updates to eGPUs This is only safe to call when there is no client actively streaming Probe encoders and select the preferred encoder This is called once at startup and each time a stream is launched to ensure the best encoder is selected Encoder availability can change at runtime due to all sorts of things from driver updates to eGPUs This is only safe to call when there is no client actively streaming</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">video.h</field>
    <field name="url">video_8h.html</field>
    <field name="keywords">video.h</field>
    <field name="text">Declarations for video</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">_CONVERT</field>
    <field name="args">(x)</field>
    <field name="url">video_8h.html#adfc7c5b350cd44594ef49e9eff65bab0</field>
    <field name="keywords"></field>
    <field name="text">flag_e::x std::string_view x</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">AVPacket video</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00023</field>
    <field name="keywords"></field>
    <field name="text">config_t width height framerate bitrate slicesPerFrame numRefFrames encoderCscMode videoFormat dynamicRange chromaSamplingType enableIntraRefresh platf::mem_type_e map_base_dev_type AVHWDeviceType type platf::pix_fmt_e map_pix_fmt AVPixelFormat fmt free_ctx AVCodecContext ctx free_frame AVFrame frame free_buffer AVBufferRef ref avcodec_ctx_t util::safe_ptr&lt;AVCodecContext, free_ctx&gt; avcodec_frame_t util::safe_ptr&lt;AVFrame, free_frame&gt; avcodec_buffer_t util::safe_ptr&lt;AVBufferRef, free_buffer&gt; sws_t util::safe_ptr&lt;SwsContext, sws_freeContext&gt; img_event_t std::shared_ptr&lt;safe::event_t&lt;std::shared_ptr&lt;platf::img_t&gt;</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00060</field>
    <field name="keywords"></field>
    <field name="text">encoder_platform_formats_t encoder_platform_formats_t platf::mem_type_e dev_type platf::pix_fmt_e pix_fmt_8bit pix_fmt_10bit platf::pix_fmt_e pix_fmt_yuv444_8bit pix_fmt_yuv444_10bit</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00067</field>
    <field name="keywords"></field>
    <field name="text">encoder_platform_formats_avcodec encoder_platform_formats_t init_buffer_function_t std::function&lt;util::Either&lt;avcodec_buffer_t, int&gt; platf::avcodec_encode_device_t encoder_platform_formats_avcodec AVHWDeviceType avcodec_base_dev_type AVHWDeviceType avcodec_derived_dev_type AVPixelFormat avcodec_dev_pix_fmt AVPixelFormat avcodec_pix_fmt_8bit AVPixelFormat avcodec_pix_fmt_10bit AVPixelFormat avcodec_pix_fmt_yuv444_8bit AVPixelFormat avcodec_pix_fmt_yuv444_10bit init_buffer_function_t init_avcodec_hardware_input_buffer_function avcodec_base_dev_type avcodec_base_dev_type avcodec_derived_dev_type avcodec_derived_dev_type avcodec_dev_pix_fmt avcodec_dev_pix_fmt avcodec_pix_fmt_8bit avcodec_pix_fmt_8bit avcodec_pix_fmt_10bit avcodec_pix_fmt_10bit avcodec_pix_fmt_yuv444_8bit avcodec_pix_fmt_yuv444_8bit avcodec_pix_fmt_yuv444_10bit avcodec_pix_fmt_yuv444_10bit init_avcodec_hardware_input_buffer init_avcodec_hardware_input_buffer_function dev_type map_base_dev_type avcodec_base_dev_type pix_fmt_8bit map_pix_fmt avcodec_pix_fmt_8bit pix_fmt_10bit map_pix_fmt avcodec_pix_fmt_10bit pix_fmt_yuv444_8bit map_pix_fmt avcodec_pix_fmt_yuv444_8bit pix_fmt_yuv444_10bit map_pix_fmt avcodec_pix_fmt_yuv444_10bit AVHWDeviceType avcodec_base_dev_type avcodec_derived_dev_type AVPixelFormat avcodec_dev_pix_fmt AVPixelFormat avcodec_pix_fmt_8bit avcodec_pix_fmt_10bit AVPixelFormat avcodec_pix_fmt_yuv444_8bit avcodec_pix_fmt_yuv444_10bit init_buffer_function_t init_avcodec_hardware_input_buffer</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00103</field>
    <field name="keywords"></field>
    <field name="text">encoder_platform_formats_nvenc encoder_platform_formats_t encoder_platform_formats_nvenc platf::mem_type_e dev_type platf::pix_fmt_e pix_fmt_8bit platf::pix_fmt_e pix_fmt_10bit platf::pix_fmt_e pix_fmt_yuv444_8bit platf::pix_fmt_e pix_fmt_yuv444_10bit encoder_platform_formats_t::dev_type dev_type encoder_platform_formats_t::pix_fmt_8bit pix_fmt_8bit encoder_platform_formats_t::pix_fmt_10bit pix_fmt_10bit encoder_platform_formats_t::pix_fmt_yuv444_8bit pix_fmt_yuv444_8bit encoder_platform_formats_t::pix_fmt_yuv444_10bit pix_fmt_yuv444_10bit</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00119</field>
    <field name="keywords"></field>
    <field name="text">encoder_t std::string_view name</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00122</field>
    <field name="keywords"></field>
    <field name="text">flag_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00123</field>
    <field name="keywords"></field>
    <field name="text">PASSED</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00124</field>
    <field name="keywords"></field>
    <field name="text">REF_FRAMES_RESTRICT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00125</field>
    <field name="keywords"></field>
    <field name="text">DYNAMIC_RANGE</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00126</field>
    <field name="keywords"></field>
    <field name="text">YUV444</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00127</field>
    <field name="keywords"></field>
    <field name="text">VUI_PARAMETERS</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00128</field>
    <field name="keywords"></field>
    <field name="text">MAX_FLAGS std::string_view from_flag flag_e flag flag _CONVERT PASSED _CONVERT REF_FRAMES_RESTRICT _CONVERT DYNAMIC_RANGE _CONVERT YUV444 _CONVERT VUI_PARAMETERS _CONVERT MAX_FLAGS</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00148</field>
    <field name="keywords"></field>
    <field name="text">option_t KITTY_DEFAULT_CONSTR_MOVE option_t option_t option_t std::string name std::variant&lt;int, int *, std::optional&lt;int&gt; std::function int std::string std::string value option_t std::string name value value name std::move name value std::move value std::unique_ptr&lt;const encoder_platform_formats_t&gt; platform_formats</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00163</field>
    <field name="keywords"></field>
    <field name="text">codec_t std::vector&lt;option_t&gt; common_options std::vector&lt;option_t&gt; sdr_options std::vector&lt;option_t&gt; hdr_options std::vector&lt;option_t&gt; sdr444_options std::vector&lt;option_t&gt; hdr444_options std::vector&lt;option_t&gt; fallback_options std::string name std::bitset&lt;MAX_FLAGS&gt; capabilities operator[] flag_e flag capabilities std::size_t flag std::bitset&lt;MAX_FLAGS&gt;::reference operator[] flag_e flag capabilities std::size_t flag av1 hevc h264 codec_t codec_from_config config_t config config videoFormat BOOST_LOG error config videoFormat h264 hevc av1 uint32_t flags</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00200</field>
    <field name="keywords"></field>
    <field name="text">encode_session_t encode_session_t convert platf::img_t img request_idr_frame request_normal_frame invalidate_ref_frames int64_t first_frame int64_t last_frame encoder_t software encoder_t nvenc encoder_t amdvce encoder_t quicksync encoder_t vaapi encoder_t videotoolbox</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00232</field>
    <field name="keywords"></field>
    <field name="text">packet_raw_t packet_raw_t is_idr int64_t frame_index uint8_t data data_size</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00243</field>
    <field name="keywords"></field>
    <field name="text">replace_t std::string_view old std::string_view _new KITTY_DEFAULT_CONSTR_MOVE replace_t replace_t std::string_view old std::string_view _new old std::move old _new std::move _new std::vector&lt;replace_t&gt; replacements channel_data after_ref_frame_invalidation std::optional&lt;std::chrono::steady_clock::time_point&gt; frame_timestamp</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00261</field>
    <field name="keywords"></field>
    <field name="text">packet_raw_avcodec packet_raw_t packet_raw_avcodec av_packet av_packet_alloc av_packet_free av_packet is_idr av_packet flags AV_PKT_FLAG_KEY int64_t frame_index av_packet pts uint8_t data av_packet data data_size av_packet size AVPacket av_packet</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00289</field>
    <field name="keywords"></field>
    <field name="text">packet_raw_generic packet_raw_t packet_raw_generic std::vector&lt;uint8_t&gt; frame_data int64_t frame_index idr frame_data std::move frame_data index frame_index idr idr is_idr idr int64_t frame_index index uint8_t data frame_data data data_size frame_data size std::vector&lt;uint8_t&gt; frame_data int64_t index idr packet_t std::unique_ptr&lt;packet_raw_t&gt;</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video.h</field>
    <field name="url">video_8h_source.html#l00319</field>
    <field name="keywords"></field>
    <field name="text">hdr_info_raw_t hdr_info_raw_t enabled enabled enabled metadata hdr_info_raw_t enabled SS_HDR_METADATA metadata enabled enabled metadata metadata enabled SS_HDR_METADATA metadata hdr_info_t std::unique_ptr&lt;hdr_info_raw_t&gt; active_hevc_mode active_av1_mode last_encoder_probe_supported_ref_frames_invalidation std::array&lt;bool, 3&gt; last_encoder_probe_supported_yuv444_for_codec capture safe::mail_t mail config_t config channel_data validate_encoder encoder_t encoder expect_failure probe_encoders</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">video_colorspace.cpp</field>
    <field name="url">video__colorspace_8cpp.html</field>
    <field name="keywords">video_colorspace.cpp</field>
    <field name="text">Definitions for colorspace functions</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">video::new_color_vectors_from_colorspace</field>
    <field name="args">(const sunshine_colorspace_t &amp;colorspace)</field>
    <field name="url">video__colorspace_8cpp.html#a14ba19d2a3961e8db38babbd471681a1</field>
    <field name="keywords">new_color_vectors_from_colorspace video::new_color_vectors_from_colorspace video</field>
    <field name="text">New version of color_vectors_from_colorspace() function that better adheres to the standards Returned vectors are used to perform RGB- YUV conversion Unlike its predecessor color vectors will produce output in UINT range not UNORM range Input is still in UNORM range Returned vectors won t modify color primaries and color transfer function colorspace Targeted YUV colorspace const color_t* that contains RGB- YUV transformation vectors Components range_y and range_uv are there for backwards compatibility and can be ignored in the computation New version of color_vectors_from_colorspace() function that better adheres to the standards Returned vectors are used to perform RGB- YUV conversion Unlike its predecessor color vectors will produce output in UINT range not UNORM range Input is still in UNORM range Returned vectors won t modify color primaries and color transfer function colorspace Targeted YUV colorspace const color_t* that contains RGB- YUV transformation vectors Components range_y and range_uv are there for backwards compatibility and can be ignored in the computation</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">video_colorspace.h</field>
    <field name="url">video__colorspace_8h.html</field>
    <field name="keywords">video_colorspace.h</field>
    <field name="text">Declarations for colorspace functions</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">video::colorspace_e</field>
    <field name="url">video__colorspace_8h.html#a63a3de9fcfeb81c803191b805dc8af63</field>
    <field name="keywords">colorspace_e video::colorspace_e video</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::colorspace_e::bt2020</field>
    <field name="url">video__colorspace_8h.html#a63a3de9fcfeb81c803191b805dc8af63a3127235a69c188fe65f79c547a2407ba</field>
    <field name="keywords">bt2020 video::colorspace_e::bt2020 bt2020 video::colorspace_e::bt2020</field>
    <field name="text">Rec 2 0 2 0 HDR</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::colorspace_e::rec709</field>
    <field name="url">video__colorspace_8h.html#a63a3de9fcfeb81c803191b805dc8af63a899d94a45e3536e88262dbb55d5b9272</field>
    <field name="keywords">rec709 video::colorspace_e::rec709 rec709 video::colorspace_e::rec709</field>
    <field name="text">Rec 7 0 9</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::colorspace_e::bt2020sdr</field>
    <field name="url">video__colorspace_8h.html#a63a3de9fcfeb81c803191b805dc8af63aaec96aee68dc33cfe580035dcfe86dda</field>
    <field name="keywords">bt2020sdr video::colorspace_e::bt2020sdr bt2020sdr video::colorspace_e::bt2020sdr</field>
    <field name="text">Rec 2 0 2 0 SDR</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">video::colorspace_e::rec601</field>
    <field name="url">video__colorspace_8h.html#a63a3de9fcfeb81c803191b805dc8af63af9319de2788ff860ad338c2eb2587ddf</field>
    <field name="keywords">rec601 video::colorspace_e::rec601 rec601 video::colorspace_e::rec601</field>
    <field name="text">Rec 6 0 1</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video_colorspace.h</field>
    <field name="url">video__colorspace_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">video</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video_colorspace.h</field>
    <field name="url">video__colorspace_8h_source.html#l00013</field>
    <field name="keywords"></field>
    <field name="text">colorspace_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video_colorspace.h</field>
    <field name="url">video__colorspace_8h_source.html#l00014</field>
    <field name="keywords"></field>
    <field name="text">rec601</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video_colorspace.h</field>
    <field name="url">video__colorspace_8h_source.html#l00015</field>
    <field name="keywords"></field>
    <field name="text">rec709</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video_colorspace.h</field>
    <field name="url">video__colorspace_8h_source.html#l00016</field>
    <field name="keywords"></field>
    <field name="text">bt2020sdr</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video_colorspace.h</field>
    <field name="url">video__colorspace_8h_source.html#l00017</field>
    <field name="keywords"></field>
    <field name="text">bt2020</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video_colorspace.h</field>
    <field name="url">video__colorspace_8h_source.html#l00020</field>
    <field name="keywords"></field>
    <field name="text">sunshine_colorspace_t colorspace_e colorspace full_range bit_depth colorspace_is_hdr sunshine_colorspace_t colorspace config_t sunshine_colorspace_t colorspace_from_client_config config_t config hdr_display</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video_colorspace.h</field>
    <field name="url">video__colorspace_8h_source.html#l00033</field>
    <field name="keywords"></field>
    <field name="text">avcodec_colorspace_t AVColorPrimaries primaries AVColorTransferCharacteristic transfer_function AVColorSpace matrix AVColorRange range software_format avcodec_colorspace_t avcodec_colorspace_from_sunshine_colorspace sunshine_colorspace_t sunshine_colorspace</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">video_colorspace.h</field>
    <field name="url">video__colorspace_8h_source.html#l00043</field>
    <field name="keywords"></field>
    <field name="text">color_t color_vec_y color_vec_u color_vec_v range_y range_uv color_t color_vectors_from_colorspace sunshine_colorspace_t colorspace color_t color_vectors_from_colorspace colorspace_e colorspace full_range color_t new_color_vectors_from_colorspace sunshine_colorspace_t colorspace</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">wayland.cpp</field>
    <field name="url">wayland_8cpp.html</field>
    <field name="keywords">wayland.cpp</field>
    <field name="text">Definitions for Wayland capture</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">CLASS_CALL</field>
    <field name="args">(c, m)</field>
    <field name="url">wayland_8cpp.html#a005847bdcb36baced7a2c58768ec12a6</field>
    <field name="keywords"></field>
    <field name="text">classCall c c::m c::m</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h.html</field>
    <field name="keywords">wayland.h</field>
    <field name="text">Declarations for Wayland capture</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">wl display_internal_t util::safe_ptr&lt;wl_display, wl_display_disconnect&gt;</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00028</field>
    <field name="keywords"></field>
    <field name="text">frame_t frame_t destroy egl::surface_descriptor_t sd</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00036</field>
    <field name="keywords"></field>
    <field name="text">dmabuf_t</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00038</field>
    <field name="keywords"></field>
    <field name="text">status_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00039</field>
    <field name="keywords"></field>
    <field name="text">WAITING</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00040</field>
    <field name="keywords"></field>
    <field name="text">READY</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00041</field>
    <field name="keywords"></field>
    <field name="text">REINIT dmabuf_t dmabuf_t dmabuf_t dmabuf_t dmabuf_t dmabuf_t dmabuf_t operator= dmabuf_t dmabuf_t operator= dmabuf_t listen zwlr_screencopy_manager_v1 screencopy_manager zwp_linux_dmabuf_v1 dmabuf_interface wl_output output blend_cursor buffer_params_created data zwp_linux_buffer_params_v1 params wl_buffer wl_buffer buffer_params_failed data zwp_linux_buffer_params_v1 params buffer zwlr_screencopy_frame_v1 frame std::uint32_t format std::uint32_t width std::uint32_t height std::uint32_t stride linux_dmabuf zwlr_screencopy_frame_v1 frame std::uint32_t format std::uint32_t width std::uint32_t height buffer_done zwlr_screencopy_frame_v1 frame flags zwlr_screencopy_frame_v1 frame std::uint32_t flags damage zwlr_screencopy_frame_v1 frame std::uint32_t x std::uint32_t y std::uint32_t width std::uint32_t height ready zwlr_screencopy_frame_v1 frame std::uint32_t tv_sec_hi std::uint32_t tv_sec_lo std::uint32_t tv_nsec failed zwlr_screencopy_frame_v1 frame frame_t get_next_frame current_frame frames frames frames status_e status std::array&lt;frame_t, 2&gt; frames frame_t current_frame zwlr_screencopy_frame_v1_listener listener init_gbm cleanup_gbm create_and_copy_dmabuf zwlr_screencopy_frame_v1 frame zwp_linux_dmabuf_v1 dmabuf_interface supported std::uint32_t format std::uint32_t width std::uint32_t height std::uint32_t stride shm_info supported std::uint32_t format std::uint32_t width std::uint32_t height dmabuf_info gbm_device gbm_device gbm_bo current_bo wl_buffer current_wl_buffer y_invert</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00100</field>
    <field name="keywords"></field>
    <field name="text">monitor_t monitor_t wl_output output monitor_t monitor_t monitor_t monitor_t monitor_t operator= monitor_t monitor_t operator= monitor_t listen zxdg_output_manager_v1 output_manager xdg_name zxdg_output_v1 name xdg_description zxdg_output_v1 description xdg_position zxdg_output_v1 std::int32_t x std::int32_t y xdg_size zxdg_output_v1 std::int32_t width std::int32_t height xdg_done zxdg_output_v1 wl_geometry wl_output wl_output std::int32_t x std::int32_t y std::int32_t physical_width std::int32_t physical_height std::int32_t subpixel make model std::int32_t transform wl_mode wl_output wl_output std::uint32_t flags std::int32_t width std::int32_t height std::int32_t refresh wl_done wl_output wl_output wl_scale wl_output wl_output std::int32_t factor wl_output output std::string name std::string description platf::touch_port_t viewport wl_output_listener wl_listener zxdg_output_v1_listener xdg_listener</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00133</field>
    <field name="keywords"></field>
    <field name="text">interface_t bind_t std::uint32_t id std::uint32_t version</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00140</field>
    <field name="keywords"></field>
    <field name="text">interface_e</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00141</field>
    <field name="keywords"></field>
    <field name="text">XDG_OUTPUT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00142</field>
    <field name="keywords"></field>
    <field name="text">WLR_EXPORT_DMABUF</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00143</field>
    <field name="keywords"></field>
    <field name="text">LINUX_DMABUF</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00144</field>
    <field name="keywords"></field>
    <field name="text">MAX_INTERFACES interface_t noexcept interface_t interface_t delete interface_t const interface_t delete interface_t operator const interface_t delete interface_t operator interface_t delete listen wl_registry registry operator interface_e bit interface bit std::vector&lt;std::unique_ptr&lt;monitor_t&gt; monitors zwlr_screencopy_manager_v1 screencopy_manager zwp_linux_dmabuf_v1 dmabuf_interface zxdg_output_manager_v1 output_manager add_interface wl_registry registry std::uint32_t interface std::uint32_t version del_interface wl_registry registry uint32_t std::bitset&lt;MAX_INTERFACES&gt; interface wl_registry_listener listener</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">wayland.h</field>
    <field name="url">wayland_8h_source.html#l00173</field>
    <field name="keywords"></field>
    <field name="text">display_t init display_name roundtrip dispatch std::chrono::milliseconds timeout wl_registry registry display_internal_t::pointer get display_internal get display_internal_t display_internal std::vector&lt;std::unique_ptr&lt;monitor_t&gt; monitors display_name init wl_output zxdg_output_manager_v1 wl monitor_t monitor_t wl_output output monitor_t monitor_t monitor_t monitor_t monitor_t operator= monitor_t monitor_t operator= monitor_t listen zxdg_output_manager_v1 output_manager wl_output output std::string name std::string description platf::touch_port_t viewport std::vector&lt;std::unique_ptr&lt;monitor_t&gt; monitors display_name init</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">misc.cpp</field>
    <field name="url">windows_2misc_8cpp.html</field>
    <field name="keywords">misc.cpp</field>
    <field name="text">Miscellaneous definitions for Windows</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::impersonate_current_user</field>
    <field name="args">(HANDLE user_token, std::function&lt; void()&gt; callback)</field>
    <field name="url">windows_2misc_8cpp.html#a10fe84dd3d4775399e913a2b64d2263e</field>
    <field name="keywords">impersonate_current_user platf::impersonate_current_user platf</field>
    <field name="text">Impersonate the current user and invoke the callback function user_token A handle to the user s token that was obtained from the shell callback A function that will be executed while impersonating the user Object that will store any error that occurred during the impersonation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::from_utf8</field>
    <field name="args">(const std::string &amp;string)</field>
    <field name="url">windows_2misc_8cpp.html#a15913f401214192b2dbdd7bf01da2eba</field>
    <field name="keywords">from_utf8 platf::from_utf8 platf</field>
    <field name="text">Convert a UTF-8 string into a UTF-16 wide string string The UTF-8 string The converted UTF-16 wide string Convert a UTF-8 string into a UTF-16 wide string string The UTF-8 string The converted UTF-16 wide string</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::override_per_user_predefined_keys</field>
    <field name="args">(HANDLE token)</field>
    <field name="url">windows_2misc_8cpp.html#a162ffc80f77670f8853643119ea1ae4b</field>
    <field name="keywords">override_per_user_predefined_keys platf::override_per_user_predefined_keys platf</field>
    <field name="text">This function overrides HKEY_CURRENT_USER and HKEY_CLASSES_ROOT using the provided token token The primary token identifying the user to use or NULL to restore original keys true if the override or restore operation was successful</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::create_startup_info</field>
    <field name="args">(FILE *file, HANDLE *job, std::error_code &amp;ec)</field>
    <field name="url">windows_2misc_8cpp.html#a21b0d513eb998ffc7bb541ee033ab0d1</field>
    <field name="keywords">create_startup_info platf::create_startup_info platf</field>
    <field name="text">Create a STARTUPINFOEXW structure for launching a process file A pointer to a FILE object that will be used as the standard output and error for the new process or null if not needed job A job object handle to insert the new process into This pointer must remain valid for the life of this startup info! ec A reference to a std::error_code object that will store any error that occurred during the creation of the structure A structure that contains information about how to launch the new process</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">WLAN_API_MAKE_VERSION</field>
    <field name="args">(_major, _minor)</field>
    <field name="url">windows_2misc_8cpp.html#a30de7016750a60c124fbab3510ea4de4</field>
    <field name="keywords"></field>
    <field name="text">DWORD _minor _major</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::is_running_as_system</field>
    <field name="args">()</field>
    <field name="url">windows_2misc_8cpp.html#a53f6c3cd4522b564d2fae973257f4aea</field>
    <field name="keywords">is_running_as_system platf::is_running_as_system platf</field>
    <field name="text">Check if the current process is running with system-level privileges true if the current process has system-level privileges false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::create_boost_child_from_results</field>
    <field name="args">(bool process_launched, const std::string &amp;cmd, std::error_code &amp;ec, PROCESS_INFORMATION &amp;process_info)</field>
    <field name="url">windows_2misc_8cpp.html#a6631e29abcd7ff73bb7da9dc630cb3de</field>
    <field name="keywords">create_boost_child_from_results platf::create_boost_child_from_results platf</field>
    <field name="text">Create a bp::child object from the results of launching a process process_launched A boolean indicating if the launch was successful cmd The command that was used to launch the process ec A reference to an std::error_code object that will store any error that occurred during the launch process_info A reference to a PROCESS_INFORMATION structure that contains information about the new process A bp::child object representing the new process or an empty bp::child object if the launch failed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::escape_argument_for_cmd</field>
    <field name="args">(const std::wstring &amp;argument)</field>
    <field name="url">windows_2misc_8cpp.html#a8853314be94af1fef6ec18490e06f64a</field>
    <field name="keywords">escape_argument_for_cmd platf::escape_argument_for_cmd platf</field>
    <field name="text">Escape an argument according to cmd s parsing convention argument An argument already escaped by escape_argument() An argument string suitable for use by cmd.exe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::retrieve_users_token</field>
    <field name="args">(bool elevated)</field>
    <field name="url">windows_2misc_8cpp.html#aa75096650807fe4ace1d5fcaabeee2f2</field>
    <field name="keywords">retrieve_users_token platf::retrieve_users_token platf</field>
    <field name="text">Obtain the current sessions user s primary token with elevated privileges The user s token If user has admin capability it will be elevated otherwise it will be a limited token On error nullptr</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::escape_argument</field>
    <field name="args">(const std::wstring &amp;argument)</field>
    <field name="url">windows_2misc_8cpp.html#ade158978d4dcd5cc16f08d9f52013571</field>
    <field name="keywords">escape_argument platf::escape_argument platf</field>
    <field name="text">Quote/escape an argument according to the Windows parsing convention argument The raw argument to process An argument string suitable for use by CreateProcess()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::resolve_command_string</field>
    <field name="args">(const std::string &amp;raw_cmd, const std::wstring &amp;working_dir, HANDLE token, DWORD &amp;creation_flags)</field>
    <field name="url">windows_2misc_8cpp.html#ae5dac8269d5e040704d71464e415c828</field>
    <field name="keywords">resolve_command_string platf::resolve_command_string platf</field>
    <field name="text">Resolve the given raw command into a proper command string for CreateProcess() This converts URLs and non-executable file paths into a runnable command like ShellExecute() raw_cmd The raw command provided by the user working_dir The working directory for the new process token The user token currently being impersonated or NULL if running as ourselves creation_flags The creation flags for CreateProcess() which may be modified by this function A command string suitable for use by CreateProcess()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">platf::to_utf8</field>
    <field name="args">(const std::wstring &amp;string)</field>
    <field name="url">windows_2misc_8cpp.html#ae6f52a348a20bf6c203bd0e0125be30e</field>
    <field name="keywords">to_utf8 platf::to_utf8 platf</field>
    <field name="text">Convert a UTF-16 wide string into a UTF-8 string string The UTF-16 wide string The converted UTF-8 string Convert a UTF-16 wide string into a UTF-8 string string The UTF-16 wide string The converted UTF-8 string</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">misc.h</field>
    <field name="url">windows_2misc_8h.html</field>
    <field name="keywords">misc.h</field>
    <field name="text">Miscellaneous declarations for Windows</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">misc.h</field>
    <field name="url">windows_2misc_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">platf print_status std::string_view prefix HRESULT status HDESK syncThreadDesktop int64_t qpc_counter std::chrono::nanoseconds qpc_time_difference int64_t performance_counter1 int64_t performance_counter2 std::wstring platf::from_utf8 std::string std::string platf::to_utf8 std::wstring</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">publish.cpp</field>
    <field name="url">windows_2publish_8cpp.html</field>
    <field name="keywords">publish.cpp</field>
    <field name="text">Definitions for Windows mDNS service registration</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">_FN</field>
    <field name="args">(x, ret, args)</field>
    <field name="url">windows_2publish_8cpp.html#a074a1d0c6561423a051b70bbfaa50898</field>
    <field name="keywords"></field>
    <field name="text">ret x _fn args x _fn x</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">SV</field>
    <field name="args">(quote)</field>
    <field name="url">windows_2publish_8cpp.html#a8aba388830e2a4d5ffe2ef94ca5c8ef5</field>
    <field name="keywords"></field>
    <field name="text">__SV quote</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">__SV</field>
    <field name="args">(quote)</field>
    <field name="url">windows_2publish_8cpp.html#af4762ca3735bad8b834c574b0d4462de</field>
    <field name="keywords"></field>
    <field name="text">L quote sv</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">wlgrab.cpp</field>
    <field name="url">wlgrab_8cpp.html</field>
    <field name="keywords">wlgrab.cpp</field>
    <field name="text">Definitions for wlgrab capture</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">x11grab.cpp</field>
    <field name="url">x11grab_8cpp.html</field>
    <field name="keywords">x11grab.cpp</field>
    <field name="text">Definitions for x11 capture</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">_FN</field>
    <field name="args">(x, ret, args)</field>
    <field name="url">x11grab_8cpp.html#a074a1d0c6561423a051b70bbfaa50898</field>
    <field name="keywords"></field>
    <field name="text">ret x _fn args x _fn x</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">x11grab.h</field>
    <field name="url">x11grab_8h.html</field>
    <field name="keywords">x11grab.h</field>
    <field name="text">Declarations for x11 capture</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">x11grab.h</field>
    <field name="url">x11grab_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">_XDisplay egl egl::cursor_t platf::x11 cursor_ctx_raw_t freeCursorCtx cursor_ctx_raw_t ctx freeDisplay _XDisplay xdisplay cursor_ctx_t util::safe_ptr&lt;cursor_ctx_raw_t, freeCursorCtx&gt; xdisplay_t util::safe_ptr&lt;_XDisplay, freeDisplay&gt;</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">x11grab.h</field>
    <field name="url">x11grab_8h_source.html#l00029</field>
    <field name="keywords"></field>
    <field name="text">cursor_t std::optional&lt;cursor_t&gt; make capture egl::cursor_t img blend img_t img offsetX offsetY cursor_ctx_t ctx xdisplay_t make_display</field>
  </doc>
</add>
